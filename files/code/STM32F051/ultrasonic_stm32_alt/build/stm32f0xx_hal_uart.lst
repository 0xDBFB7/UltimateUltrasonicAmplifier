ARM GAS  /tmp/ccPtXKna.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	UART_EndTxTransfer:
  23              	.LFB76:
  24              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @file    stm32f0xx_hal_uart.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   [..]
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 RXNE interrupt and Error Interrupts) are managed using the macros
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                 __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit and receive 
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
ARM GAS  /tmp/ccPtXKna.s 			page 2


  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         the HAL_UART_Init() API.
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    [..]
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (@) These APIs(HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_MultiProcessor_Init(),
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    [..]
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    [..] Three operation modes are available within this driver :     
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** Polling mode IO operation ***
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      =================================
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..]    
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit() 
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** Interrupt mode IO operation ***    
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      ===================================
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..]    
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT() 
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT() 
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback          
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** DMA mode IO operation ***    
ARM GAS  /tmp/ccPtXKna.s 			page 3


  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      ==============================
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..] 
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA() 
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA() 
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback          
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()      
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()  
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()      
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      *** UART HAL driver macros list ***
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      ============================================= 
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..]
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral 
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral     
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      [..] 
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros 
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   @endverbatim
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @attention
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *      without specific prior written permission.
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/ccPtXKna.s 			page 4


 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ******************************************************************************
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #include "stm32f0xx_hal.h"
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @addtogroup STM32F0xx_HAL_Driver
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART UART
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief HAL UART module driver
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 5


 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** ===============================================================================
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     in asynchronous mode.
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Baud Rate
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Word Length
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Stop Bit
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Parity
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Hardware flow control
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Receiver/transmitter modes
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Over Sampling Method
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) One-Bit Sampling Method
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) data logical level inversion
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) RX and TX pins swap
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) RX overrun detection disabling
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) DMA disabling on RX error
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) MSB first on communication line
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) auto Baud rate detection
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init() and HAL_MultiProcessor_Init()
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     API follow respectively the UART asynchronous, UART Half duplex and multiprocessor mode
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     configuration procedures (details for the procedures are available in reference manual).
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /*
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   Additional Table:  If the parity is enabled, then the MSB bit of the data written
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      in the data register is transmitted but is changed by the parity bit.
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      According to device capability (support or not of 7-bit word length),
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      frame length is either defined by the M bit (8-bits or 9-bits)
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      or by the M1 and M0 bits (7-bit, 8-bit or 9-bit).
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                      Possible UART frame formats are as listed in the following table:
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       Table 1. UART frame format.             
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |       M bit       |  PCE bit  |             UART frame                |
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         0         |     0     |    | SB |    8-bit data   | STB |     |
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         0         |     1     |    | SB | 7-bit data | PB | STB |     |
ARM GAS  /tmp/ccPtXKna.s 			page 6


 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         1         |     0     |    | SB |    9-bit data   | STB |     |
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |         1         |     1     |    | SB | 8-bit data | PB | STB |     |
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    0    |     0     |    | SB |    8 bit data   | STB |     |
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    0    |     1     |    | SB | 7 bit data | PB | STB |     |
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    1    |     0     |    | SB |    9 bit data   | STB |     |
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    0    |    1    |     1     |    | SB | 8 bit data | PB | STB |     |
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    1    |    0    |     0     |    | SB |    7 bit data   | STB |     |
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       |    1    |    0    |     1     |    | SB | 6 bit data | PB | STB |     |
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check the parameters */
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check the parameters */
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
ARM GAS  /tmp/ccPtXKna.s 			page 7


 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Peripheral */
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPtXKna.s 			page 8


 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check UART instance */
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), and IREN (if IrDA is supported)  bits in the USART_CR3 regist
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_SCEN);
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Peripheral */
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
ARM GAS  /tmp/ccPtXKna.s 			page 9


 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Address UART node address (4-, 6-, 7- or 8-bit long).
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param WakeUpMethod specifies the UART wakeup method.
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        This parameter can be one of the following values:
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the wake up method parameter */
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the UART Communication parameters */
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 10


 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported) bits in the USART_CR3 r
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR2_LINEN)
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_SCEN)
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if defined (USART_CR3_IREN)
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the Peripheral */
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart == NULL)
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_ERROR;
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 11


 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the Peripheral */
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DeInit the low level hardware */
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState    = HAL_UART_STATE_RESET;
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState   = HAL_UART_STATE_RESET;
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlock */
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
ARM GAS  /tmp/ccPtXKna.s 			page 12


 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                       ##### IO operation functions #####
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     and Half duplex data transfers.
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) There are two mode of transfer:
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (++) Blocking mode: The communication is performed in polling mode.
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            after finishing transfer.
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (++) Non-Blocking mode: The communication is performed using Interrupts
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The end of the data processing will be indicated through the
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            using DMA mode.
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Blocking mode API's are :
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Transmit()
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Receive()
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Transmit_IT()
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Receive_IT()
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_IRQHandler()
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Transmit_DMA()
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Receive_DMA()
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_DMAPause()
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_DMAResume()
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_DMAStop()
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_TxHalfCpltCallback()
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_TxCpltCallback()
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_RxHalfCpltCallback()
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_RxCpltCallback()
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_ErrorCallback()
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Abort()
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortTransmit()
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortReceive()
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_Abort_IT()
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortTransmit_IT()
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortReceive_IT()
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortCpltCallback()
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortTransmitCpltCallback()
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) HAL_UART_AbortReceiveCpltCallback()
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
ARM GAS  /tmp/ccPtXKna.s 			page 13


 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         Errors are handled as follows :
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Error is considered as Recoverable and non blocking : Transfer could go till end, but 
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in In
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              Received character is then retrieved and stored in Rx buffer, Error code is set to all
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UA
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              If user wants to abort it, Abort services should be called by user.
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         (++) Error is considered as Blocking : Transfer could not be completed properly and is abor
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****              Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() u
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData Pointer to data buffer.
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size Amount of data to be sent.
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout Timeout duration.
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart = 0U;
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return  HAL_ERROR;
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be filled into TDR will be 
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1U) != 0U)
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
ARM GAS  /tmp/ccPtXKna.s 			page 14


 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tickstart = HAL_GetTick();
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(huart->TxXferCount > 0)
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pData += 2;
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_TIMEOUT;
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData pointer to data buffer.
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size amount of data to be received.
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Timeout Timeout duration.
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled using u16 pointer cast). Depending on compilation cha
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
ARM GAS  /tmp/ccPtXKna.s 			page 15


 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t uhMask;
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart = 0;
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return  HAL_ERROR;
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be received from RDR will be 
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1U) != 0U)
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     tickstart = HAL_GetTick();
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* as long as data have to be received */
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(huart->RxXferCount > 0U)
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxXferCount--;
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         tmp = (uint16_t*) pData ;
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pData +=2U;
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
ARM GAS  /tmp/ccPtXKna.s 			page 16


 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData pointer to data buffer.
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size amount of data to be sent.
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be filled into TDR will be 
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1U) != 0U)
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
ARM GAS  /tmp/ccPtXKna.s 			page 17


 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Transmit Data Register Empty Interrupt */
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData pointer to data buffer.
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size amount of data to be received.
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled using u16 pointer cast). Depending on compilation cha
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data to be received from RDR will be 
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled through a u16 cast. */
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1U) != 0U)
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
ARM GAS  /tmp/ccPtXKna.s 			page 18


 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Parity Error and Data Register not empty Interrupts */
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData pointer to data buffer.
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size amount of data to be sent.
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer containing data to be sent, should be aligned on a half wor
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as sent data will be handled by DMA from halfword frontier). Depending on compilation 
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data copy into TDR will be 
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled by DMA from a u16 frontier. */
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1U) != 0U)
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
ARM GAS  /tmp/ccPtXKna.s 			page 19


1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the DMA error callback */
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the DMA abort callback */
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, S
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param pData pointer to data buffer.
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param Size amount of data to be received.
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         address of user data buffer for storing data to be received, should be aligned on a hal
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (as received data will be handled by DMA from halfword frontier). Depending on compilat
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         use of specific alignment compilation directives or pragmas might be required to ensure
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
ARM GAS  /tmp/ccPtXKna.s 			page 20


1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_ERROR;
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        should be aligned on a u16 frontier, as data copy from RDR will be 
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        handled by DMA from a u16 frontier. */
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((((uint32_t)pData)&1U) != 0U)
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return  HAL_ERROR;
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Locked */
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_LOCK(huart);
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the DMA error callback */
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the DMA abort callback */
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA channel */
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, S
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Process Unlocked */
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPtXKna.s 			page 21


1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
ARM GAS  /tmp/ccPtXKna.s 			page 22


1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback: 
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete  
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of 
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmatx != NULL)
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmarx != NULL)
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
ARM GAS  /tmp/ccPtXKna.s 			page 23


1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmatx != NULL)
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmarx != NULL)
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U; 
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U; 
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
ARM GAS  /tmp/ccPtXKna.s 			page 24


1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Handle ErrorCode to No Error */
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmatx != NULL)
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Tx transfer counter */
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U; 
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
ARM GAS  /tmp/ccPtXKna.s 			page 25


1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmarx != NULL)
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset Rx transfer counter */
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U; 
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
ARM GAS  /tmp/ccPtXKna.s 			page 26


1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t abortcplt = 1U;
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      before any call to DMA Abort functions */
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->hdmatx != NULL)
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        Otherwise, set it to NULL */
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->hdmarx != NULL)
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        Otherwise, set it to NULL */
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmatx != NULL)
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised : 
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA TX */
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
ARM GAS  /tmp/ccPtXKna.s 			page 27


1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 0U;
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmarx != NULL)
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised : 
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA RX */
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 1U;
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 0U;
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (abortcplt == 1U)
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U; 
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset errorCode */
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
ARM GAS  /tmp/ccPtXKna.s 			page 28


1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmatx != NULL)
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA TX */
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Reset Tx transfer counter */
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount = 0U; 
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset Tx transfer counter */
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U; 
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
ARM GAS  /tmp/ccPtXKna.s 			page 29


1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         This procedure performs following operations :
1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - Set handle State to READY
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** */
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmarx != NULL)
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Abort DMA RX */
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Reset Rx transfer counter */
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxXferCount = 0U; 
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
ARM GAS  /tmp/ccPtXKna.s 			page 30


1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Reset Rx transfer counter */
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U; 
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Handle UART interrupt request.
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t cr3its;
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t errorflags;
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* If no error occurs */
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (errorflags == RESET)
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       UART_Receive_IT(huart);
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }  
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* If some errors occur */
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   cr3its = READ_REG(huart->Instance->CR3);
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(   (errorflags != RESET)
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      && (   ((cr3its & USART_CR3_EIE) != RESET)
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
ARM GAS  /tmp/ccPtXKna.s 			page 31


1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(((isrflags & USART_ISR_ORE) != RESET) &&
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->ErrorCode != HAL_UART_ERROR_NONE)
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* UART in mode Receiver ---------------------------------------------------*/
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         UART_Receive_IT(huart);
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          consider error as blocking */
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {  
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Blocking error : transfer is aborted
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         UART_EndRxTransfer(huart);
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           if(huart->hdmarx != NULL)
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           {
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /* Set the UART DMA Abort callback : 
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 32


1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /* Abort DMA RX */
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             {
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             }
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           }
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           else
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           {
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             /* Call user error callback */
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           }
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         else
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           /* Call user error callback */
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Non Blocking error : transfer could go on. 
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            Error is notified to user through user error callback */
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   } /* End if some error occurs */
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART state ready to be able to start again the process */
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F0
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_Transmit_IT(huart);
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPtXKna.s 			page 33


1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Rx Transfer completed callback.
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/ccPtXKna.s 			page 34


1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief UART error callback.
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccPtXKna.s 			page 35


1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UNUSED(huart);
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    */
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *  @brief   UART control functions
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  ===============================================================================
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Enable UART in mute mode (does not mean UART enters mute mode;
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
ARM GAS  /tmp/ccPtXKna.s 			page 36


1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    /* Disable USART mute mode by clearing the MME bit in the CR1 register */
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear TE and RE bits */
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status.
2028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccPtXKna.s 			page 37


2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_LOCK(huart);
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear TE and RE bits */
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
2039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  *  @brief   UART Peripheral State functions
2053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****  *
2054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @verbatim
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ==============================================================================
2056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   ==============================================================================
2058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     [..]
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     This subsection provides functions allowing to :
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) Return the UART handle state.
2061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (+) Return the UART handle error code
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** @endverbatim
2064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Return the UART handle state.
2069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART.
2071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL state
2072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp1 = huart->gState;
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp2 = huart->RxState;
2078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART.
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval UART Error Code
ARM GAS  /tmp/ccPtXKna.s 			page 38


2087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return huart->ErrorCode;
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @}
2098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @{
2102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tmpreg                     = 0x00000000U;
2112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
2113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t brrtemp                    = 0x0000U;
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t usartdiv                   = 0x0000U;
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
2116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the parameters */
2118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  the UART Word Length, Parity, Mode and oversampling:
2131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set the M bits according to huart->Init.WordLength value
2132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set PCE and PS bits according to huart->Init.Parity value
2133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set TE and RE bits according to huart->Init.Mode value
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
2137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    * to huart->Init.StopBits value */
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
ARM GAS  /tmp/ccPtXKna.s 			page 39


2144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Configure
2145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
2146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *   to huart->Init.HwFlowCtl value
2147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    * - one-bit sampling method versus three samples' majority rule according
2148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****    *   to huart->Init.OneBitSampling */
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
2151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
2154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
2155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check UART Over Sampling to set Baud Rate Register */
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (clocksource)
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
2162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
2173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default:
2174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         ret = HAL_ERROR;
2175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     brrtemp = usartdiv & 0xFFF0U;
2179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
2180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->BRR = brrtemp;
2181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     switch (clocksource)
2185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
2188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
2191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
2194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
2197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
2199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       default:
2200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         ret = HAL_ERROR;
ARM GAS  /tmp/ccPtXKna.s 			page 40


2201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
2202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return ret;
2206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
2211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
2215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
2217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
2218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
2220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
2221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
2223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
2224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
2227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
2228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
2230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
2231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure data inversion */
2234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
2235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
2237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
2238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
2241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
2242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
2244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
2245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
2248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
2249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
2251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
2252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
2255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
2256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
ARM GAS  /tmp/ccPtXKna.s 			page 41


2258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
2259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
2262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
2263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
2265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
2266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
2267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
2268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
2269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
2271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
2272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
2276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
2277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
2279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
2280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief Check the UART Idle State.
2285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param huart UART handle.
2286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
2289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&
2291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tickstart = 0U;
2292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F0
2293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
2295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&
2298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Init tickstart for timeout managment*/
2299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   tickstart = HAL_GetTick();
2300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
2302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      Bits are defined for some specific devices, and are available only for UART instances supporti
2303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
2305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check if the Transmitter is enabled */
2307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
2308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Wait until TEACK flag is set */
2310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VAL
2311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Timeout occurred */
2313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
2314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
ARM GAS  /tmp/ccPtXKna.s 			page 42


2315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check if the Receiver is enabled */
2318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
2319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Wait until REACK flag is set */
2321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VAL
2322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Timeout occurred */
2324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
2325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F0
2329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Initialize the UART State */
2331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
2335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
2338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
2342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Flag Specifies the UART flag to check
2344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Status Flag status (SET or RESET)
2345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Tickstart Tick start value
2346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  Timeout Timeout duration
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
2350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Wait until flag is set */
2352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Check for the Timeout */
2355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(Timeout != HAL_MAX_DELAY)
2356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
2358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
2364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
2365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         /* Process Unlocked */
2367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         __HAL_UNLOCK(huart);
2368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
2369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
ARM GAS  /tmp/ccPtXKna.s 			page 43


2372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
2373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
  25              		.loc 1 2382 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  31              		.loc 1 2384 0
  32 0000 0268     		ldr	r2, [r0]
  33 0002 1368     		ldr	r3, [r2]
  34 0004 C021     		movs	r1, #192
  35 0006 8B43     		bics	r3, r1
  36 0008 1360     		str	r3, [r2]
2385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  37              		.loc 1 2387 0
  38 000a 2022     		movs	r2, #32
  39 000c 6923     		movs	r3, #105
  40 000e C254     		strb	r2, [r0, r3]
2388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
  41              		.loc 1 2388 0
  42              		@ sp needed
  43 0010 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE76:
  47              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  48              		.align	1
  49              		.syntax unified
  50              		.code	16
  51              		.thumb_func
  52              		.fpu softvfp
  54              	UART_EndRxTransfer:
  55              	.LFB77:
2389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
  56              		.loc 1 2397 0
  57              		.cfi_startproc
ARM GAS  /tmp/ccPtXKna.s 			page 44


  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61              	.LVL1:
2398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  62              		.loc 1 2399 0
  63 0000 0268     		ldr	r2, [r0]
  64 0002 1368     		ldr	r3, [r2]
  65 0004 0649     		ldr	r1, .L3
  66 0006 0B40     		ands	r3, r1
  67 0008 1360     		str	r3, [r2]
2400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
  68              		.loc 1 2400 0
  69 000a 0268     		ldr	r2, [r0]
  70 000c 9368     		ldr	r3, [r2, #8]
  71 000e 2331     		adds	r1, r1, #35
  72 0010 FF31     		adds	r1, r1, #255
  73 0012 8B43     		bics	r3, r1
  74 0014 9360     		str	r3, [r2, #8]
2401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  75              		.loc 1 2403 0
  76 0016 2022     		movs	r2, #32
  77 0018 6A23     		movs	r3, #106
  78 001a C254     		strb	r2, [r0, r3]
2404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
  79              		.loc 1 2404 0
  80              		@ sp needed
  81 001c 7047     		bx	lr
  82              	.L4:
  83 001e C046     		.align	2
  84              	.L3:
  85 0020 DFFEFFFF 		.word	-289
  86              		.cfi_endproc
  87              	.LFE77:
  89              		.section	.text.HAL_UART_MspInit,"ax",%progbits
  90              		.align	1
  91              		.weak	HAL_UART_MspInit
  92              		.syntax unified
  93              		.code	16
  94              		.thumb_func
  95              		.fpu softvfp
  97              	HAL_UART_MspInit:
  98              	.LFB39:
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
  99              		.loc 1 574 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL2:
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 105              		.loc 1 581 0
 106              		@ sp needed
 107 0000 7047     		bx	lr
ARM GAS  /tmp/ccPtXKna.s 			page 45


 108              		.cfi_endproc
 109              	.LFE39:
 111              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 112              		.align	1
 113              		.weak	HAL_UART_MspDeInit
 114              		.syntax unified
 115              		.code	16
 116              		.thumb_func
 117              		.fpu softvfp
 119              	HAL_UART_MspDeInit:
 120              	.LFB40:
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 121              		.loc 1 589 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.LVL3:
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 127              		.loc 1 596 0
 128              		@ sp needed
 129 0000 7047     		bx	lr
 130              		.cfi_endproc
 131              	.LFE40:
 133              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 134              		.align	1
 135              		.global	HAL_UART_DeInit
 136              		.syntax unified
 137              		.code	16
 138              		.thumb_func
 139              		.fpu softvfp
 141              	HAL_UART_DeInit:
 142              	.LFB38:
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 143              		.loc 1 536 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              	.LVL4:
 148 0000 70B5     		push	{r4, r5, r6, lr}
 149              	.LCFI0:
 150              		.cfi_def_cfa_offset 16
 151              		.cfi_offset 4, -16
 152              		.cfi_offset 5, -12
 153              		.cfi_offset 6, -8
 154              		.cfi_offset 14, -4
 155 0002 041E     		subs	r4, r0, #0
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 156              		.loc 1 538 0
 157 0004 18D0     		beq	.L9
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 158              		.loc 1 546 0
 159 0006 6926     		movs	r6, #105
 160 0008 2423     		movs	r3, #36
 161 000a 8355     		strb	r3, [r0, r6]
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 162              		.loc 1 549 0
ARM GAS  /tmp/ccPtXKna.s 			page 46


 163 000c 0268     		ldr	r2, [r0]
 164 000e 1368     		ldr	r3, [r2]
 165 0010 0121     		movs	r1, #1
 166 0012 8B43     		bics	r3, r1
 167 0014 1360     		str	r3, [r2]
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 168              		.loc 1 551 0
 169 0016 0368     		ldr	r3, [r0]
 170 0018 0025     		movs	r5, #0
 171 001a 1D60     		str	r5, [r3]
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 172              		.loc 1 552 0
 173 001c 0368     		ldr	r3, [r0]
 174 001e 5D60     		str	r5, [r3, #4]
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 175              		.loc 1 553 0
 176 0020 0368     		ldr	r3, [r0]
 177 0022 9D60     		str	r5, [r3, #8]
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 178              		.loc 1 556 0
 179 0024 FFF7FEFF 		bl	HAL_UART_MspDeInit
 180              	.LVL5:
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState    = HAL_UART_STATE_RESET;
 181              		.loc 1 558 0
 182 0028 E566     		str	r5, [r4, #108]
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState   = HAL_UART_STATE_RESET;
 183              		.loc 1 559 0
 184 002a A555     		strb	r5, [r4, r6]
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 185              		.loc 1 560 0
 186 002c 6A23     		movs	r3, #106
 187 002e E554     		strb	r5, [r4, r3]
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 188              		.loc 1 563 0
 189 0030 023B     		subs	r3, r3, #2
 190 0032 E554     		strb	r5, [r4, r3]
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 191              		.loc 1 565 0
 192 0034 0020     		movs	r0, #0
 193              	.L8:
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 194              		.loc 1 566 0
 195              		@ sp needed
 196              	.LVL6:
 197 0036 70BD     		pop	{r4, r5, r6, pc}
 198              	.LVL7:
 199              	.L9:
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 200              		.loc 1 540 0
 201 0038 0120     		movs	r0, #1
 202              	.LVL8:
 203 003a FCE7     		b	.L8
 204              		.cfi_endproc
 205              	.LFE38:
 207              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 208              		.align	1
 209              		.global	HAL_UART_Transmit_IT
ARM GAS  /tmp/ccPtXKna.s 			page 47


 210              		.syntax unified
 211              		.code	16
 212              		.thumb_func
 213              		.fpu softvfp
 215              	HAL_UART_Transmit_IT:
 216              	.LFB43:
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 217              		.loc 1 862 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              	.LVL9:
 222 0000 10B5     		push	{r4, lr}
 223              	.LCFI1:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 4, -8
 226              		.cfi_offset 14, -4
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 227              		.loc 1 864 0
 228 0002 6923     		movs	r3, #105
 229 0004 C35C     		ldrb	r3, [r0, r3]
 230 0006 202B     		cmp	r3, #32
 231 0008 01D0     		beq	.L18
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 232              		.loc 1 902 0
 233 000a 0220     		movs	r0, #2
 234              	.LVL10:
 235              	.L11:
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 236              		.loc 1 904 0
 237              		@ sp needed
 238 000c 10BD     		pop	{r4, pc}
 239              	.LVL11:
 240              	.L18:
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 241              		.loc 1 866 0
 242 000e 0029     		cmp	r1, #0
 243 0010 24D0     		beq	.L14
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 244              		.loc 1 866 0 is_stmt 0 discriminator 1
 245 0012 002A     		cmp	r2, #0
 246 0014 24D0     		beq	.L15
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 247              		.loc 1 874 0 is_stmt 1
 248 0016 8023     		movs	r3, #128
 249 0018 5B01     		lsls	r3, r3, #5
 250 001a 8468     		ldr	r4, [r0, #8]
 251 001c 9C42     		cmp	r4, r3
 252 001e 16D0     		beq	.L19
 253              	.L12:
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 254              		.loc 1 883 0
 255 0020 6823     		movs	r3, #104
 256 0022 C35C     		ldrb	r3, [r0, r3]
 257 0024 012B     		cmp	r3, #1
 258 0026 1DD0     		beq	.L17
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
ARM GAS  /tmp/ccPtXKna.s 			page 48


 259              		.loc 1 885 0 discriminator 2
 260 0028 C164     		str	r1, [r0, #76]
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 261              		.loc 1 886 0 discriminator 2
 262 002a 5023     		movs	r3, #80
 263 002c C252     		strh	r2, [r0, r3]
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 264              		.loc 1 887 0 discriminator 2
 265 002e 0233     		adds	r3, r3, #2
 266 0030 C252     		strh	r2, [r0, r3]
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 267              		.loc 1 889 0 discriminator 2
 268 0032 0023     		movs	r3, #0
 269 0034 C366     		str	r3, [r0, #108]
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 270              		.loc 1 890 0 discriminator 2
 271 0036 2121     		movs	r1, #33
 272              	.LVL12:
 273 0038 6922     		movs	r2, #105
 274              	.LVL13:
 275 003a 8154     		strb	r1, [r0, r2]
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 276              		.loc 1 893 0 discriminator 2
 277 003c 013A     		subs	r2, r2, #1
 278 003e 8354     		strb	r3, [r0, r2]
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 279              		.loc 1 896 0 discriminator 2
 280 0040 0268     		ldr	r2, [r0]
 281 0042 1368     		ldr	r3, [r2]
 282 0044 5F31     		adds	r1, r1, #95
 283 0046 0B43     		orrs	r3, r1
 284 0048 1360     		str	r3, [r2]
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 285              		.loc 1 898 0 discriminator 2
 286 004a 0020     		movs	r0, #0
 287              	.LVL14:
 288 004c DEE7     		b	.L11
 289              	.LVL15:
 290              	.L19:
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 291              		.loc 1 874 0 discriminator 1
 292 004e 0369     		ldr	r3, [r0, #16]
 293 0050 002B     		cmp	r3, #0
 294 0052 E5D1     		bne	.L12
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 295              		.loc 1 876 0
 296 0054 CB07     		lsls	r3, r1, #31
 297 0056 E3D5     		bpl	.L12
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 298              		.loc 1 878 0
 299 0058 0120     		movs	r0, #1
 300              	.LVL16:
 301 005a D7E7     		b	.L11
 302              	.LVL17:
 303              	.L14:
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 304              		.loc 1 868 0
ARM GAS  /tmp/ccPtXKna.s 			page 49


 305 005c 0120     		movs	r0, #1
 306              	.LVL18:
 307 005e D5E7     		b	.L11
 308              	.LVL19:
 309              	.L15:
 310 0060 0120     		movs	r0, #1
 311              	.LVL20:
 312 0062 D3E7     		b	.L11
 313              	.LVL21:
 314              	.L17:
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 315              		.loc 1 883 0
 316 0064 0220     		movs	r0, #2
 317              	.LVL22:
 318 0066 D1E7     		b	.L11
 319              		.cfi_endproc
 320              	.LFE43:
 322              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 323              		.align	1
 324              		.global	HAL_UART_Receive_IT
 325              		.syntax unified
 326              		.code	16
 327              		.thumb_func
 328              		.fpu softvfp
 330              	HAL_UART_Receive_IT:
 331              	.LFB44:
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 332              		.loc 1 918 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336              	.LVL23:
 337 0000 30B5     		push	{r4, r5, lr}
 338              	.LCFI2:
 339              		.cfi_def_cfa_offset 12
 340              		.cfi_offset 4, -12
 341              		.cfi_offset 5, -8
 342              		.cfi_offset 14, -4
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 343              		.loc 1 920 0
 344 0002 6A23     		movs	r3, #106
 345 0004 C35C     		ldrb	r3, [r0, r3]
 346 0006 202B     		cmp	r3, #32
 347 0008 01D0     		beq	.L32
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 348              		.loc 1 964 0
 349 000a 0220     		movs	r0, #2
 350              	.LVL24:
 351              	.L21:
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 352              		.loc 1 966 0
 353              		@ sp needed
 354 000c 30BD     		pop	{r4, r5, pc}
 355              	.LVL25:
 356              	.L32:
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 357              		.loc 1 922 0
ARM GAS  /tmp/ccPtXKna.s 			page 50


 358 000e 0029     		cmp	r1, #0
 359 0010 48D0     		beq	.L28
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 360              		.loc 1 922 0 is_stmt 0 discriminator 1
 361 0012 002A     		cmp	r2, #0
 362 0014 48D0     		beq	.L29
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 363              		.loc 1 930 0 is_stmt 1
 364 0016 8368     		ldr	r3, [r0, #8]
 365 0018 8024     		movs	r4, #128
 366 001a 6401     		lsls	r4, r4, #5
 367 001c A342     		cmp	r3, r4
 368 001e 2BD0     		beq	.L33
 369              	.L22:
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 370              		.loc 1 939 0
 371 0020 6824     		movs	r4, #104
 372 0022 045D     		ldrb	r4, [r0, r4]
 373 0024 012C     		cmp	r4, #1
 374 0026 41D0     		beq	.L31
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 375              		.loc 1 939 0 is_stmt 0 discriminator 2
 376 0028 0125     		movs	r5, #1
 377 002a 6824     		movs	r4, #104
 378 002c 0555     		strb	r5, [r0, r4]
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 379              		.loc 1 941 0 is_stmt 1 discriminator 2
 380 002e 4165     		str	r1, [r0, #84]
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 381              		.loc 1 942 0 discriminator 2
 382 0030 5821     		movs	r1, #88
 383              	.LVL26:
 384 0032 4252     		strh	r2, [r0, r1]
 385              	.LVL27:
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 386              		.loc 1 943 0 discriminator 2
 387 0034 0231     		adds	r1, r1, #2
 388 0036 4252     		strh	r2, [r0, r1]
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 389              		.loc 1 946 0 discriminator 2
 390 0038 8022     		movs	r2, #128
 391              	.LVL28:
 392 003a 5201     		lsls	r2, r2, #5
 393 003c 9342     		cmp	r3, r2
 394 003e 22D0     		beq	.L34
 395 0040 002B     		cmp	r3, #0
 396 0042 05D1     		bne	.L25
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 397              		.loc 1 946 0 is_stmt 0 discriminator 5
 398 0044 0369     		ldr	r3, [r0, #16]
 399 0046 002B     		cmp	r3, #0
 400 0048 28D1     		bne	.L26
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 401              		.loc 1 946 0 discriminator 6
 402 004a FF22     		movs	r2, #255
 403 004c 5C33     		adds	r3, r3, #92
 404 004e C252     		strh	r2, [r0, r3]
ARM GAS  /tmp/ccPtXKna.s 			page 51


 405              	.LVL29:
 406              	.L25:
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 407              		.loc 1 948 0 is_stmt 1
 408 0050 0023     		movs	r3, #0
 409 0052 C366     		str	r3, [r0, #108]
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 410              		.loc 1 949 0
 411 0054 2221     		movs	r1, #34
 412 0056 6A22     		movs	r2, #106
 413 0058 8154     		strb	r1, [r0, r2]
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 414              		.loc 1 952 0
 415 005a 023A     		subs	r2, r2, #2
 416 005c 8354     		strb	r3, [r0, r2]
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 417              		.loc 1 955 0
 418 005e 0268     		ldr	r2, [r0]
 419 0060 9368     		ldr	r3, [r2, #8]
 420 0062 2139     		subs	r1, r1, #33
 421 0064 0B43     		orrs	r3, r1
 422 0066 9360     		str	r3, [r2, #8]
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 423              		.loc 1 958 0
 424 0068 0268     		ldr	r2, [r0]
 425 006a 1168     		ldr	r1, [r2]
 426 006c 9023     		movs	r3, #144
 427 006e 5B00     		lsls	r3, r3, #1
 428 0070 0B43     		orrs	r3, r1
 429 0072 1360     		str	r3, [r2]
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 430              		.loc 1 960 0
 431 0074 0020     		movs	r0, #0
 432              	.LVL30:
 433 0076 C9E7     		b	.L21
 434              	.LVL31:
 435              	.L33:
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 436              		.loc 1 930 0 discriminator 1
 437 0078 0469     		ldr	r4, [r0, #16]
 438 007a 002C     		cmp	r4, #0
 439 007c D0D1     		bne	.L22
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 440              		.loc 1 932 0
 441 007e CC07     		lsls	r4, r1, #31
 442 0080 CED5     		bpl	.L22
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 443              		.loc 1 934 0
 444 0082 0120     		movs	r0, #1
 445              	.LVL32:
 446 0084 C2E7     		b	.L21
 447              	.LVL33:
 448              	.L34:
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 449              		.loc 1 946 0 discriminator 1
 450 0086 0369     		ldr	r3, [r0, #16]
 451 0088 002B     		cmp	r3, #0
ARM GAS  /tmp/ccPtXKna.s 			page 52


 452 008a 03D1     		bne	.L24
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 453              		.loc 1 946 0 is_stmt 0 discriminator 3
 454 008c 084A     		ldr	r2, .L35
 455 008e 5C33     		adds	r3, r3, #92
 456 0090 C252     		strh	r2, [r0, r3]
 457              	.LVL34:
 458 0092 DDE7     		b	.L25
 459              	.LVL35:
 460              	.L24:
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 461              		.loc 1 946 0 discriminator 4
 462 0094 FF22     		movs	r2, #255
 463 0096 5C23     		movs	r3, #92
 464 0098 C252     		strh	r2, [r0, r3]
 465              	.LVL36:
 466 009a D9E7     		b	.L25
 467              	.LVL37:
 468              	.L26:
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 469              		.loc 1 946 0 discriminator 7
 470 009c 7F22     		movs	r2, #127
 471 009e 5C23     		movs	r3, #92
 472 00a0 C252     		strh	r2, [r0, r3]
 473              	.LVL38:
 474 00a2 D5E7     		b	.L25
 475              	.LVL39:
 476              	.L28:
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 477              		.loc 1 924 0 is_stmt 1
 478 00a4 0120     		movs	r0, #1
 479              	.LVL40:
 480 00a6 B1E7     		b	.L21
 481              	.LVL41:
 482              	.L29:
 483 00a8 0120     		movs	r0, #1
 484              	.LVL42:
 485 00aa AFE7     		b	.L21
 486              	.LVL43:
 487              	.L31:
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 488              		.loc 1 939 0
 489 00ac 0220     		movs	r0, #2
 490              	.LVL44:
 491 00ae ADE7     		b	.L21
 492              	.L36:
 493              		.align	2
 494              	.L35:
 495 00b0 FF010000 		.word	511
 496              		.cfi_endproc
 497              	.LFE44:
 499              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 500              		.align	1
 501              		.global	HAL_UART_Transmit_DMA
 502              		.syntax unified
 503              		.code	16
 504              		.thumb_func
ARM GAS  /tmp/ccPtXKna.s 			page 53


 505              		.fpu softvfp
 507              	HAL_UART_Transmit_DMA:
 508              	.LFB45:
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 509              		.loc 1 980 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              	.LVL45:
 514 0000 70B5     		push	{r4, r5, r6, lr}
 515              	.LCFI3:
 516              		.cfi_def_cfa_offset 16
 517              		.cfi_offset 4, -16
 518              		.cfi_offset 5, -12
 519              		.cfi_offset 6, -8
 520              		.cfi_offset 14, -4
 521 0002 0400     		movs	r4, r0
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 522              		.loc 1 982 0
 523 0004 6920     		movs	r0, #105
 524              	.LVL46:
 525 0006 205C     		ldrb	r0, [r4, r0]
 526 0008 2028     		cmp	r0, #32
 527 000a 01D0     		beq	.L45
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 528              		.loc 1 1039 0
 529 000c 0220     		movs	r0, #2
 530              	.LVL47:
 531              	.L38:
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 532              		.loc 1 1041 0
 533              		@ sp needed
 534              	.LVL48:
 535 000e 70BD     		pop	{r4, r5, r6, pc}
 536              	.LVL49:
 537              	.L45:
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 538              		.loc 1 984 0
 539 0010 0029     		cmp	r1, #0
 540 0012 3ED0     		beq	.L41
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 541              		.loc 1 984 0 is_stmt 0 discriminator 1
 542 0014 002A     		cmp	r2, #0
 543 0016 3ED0     		beq	.L42
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 544              		.loc 1 992 0 is_stmt 1
 545 0018 8023     		movs	r3, #128
 546 001a 5B01     		lsls	r3, r3, #5
 547 001c A068     		ldr	r0, [r4, #8]
 548 001e 9842     		cmp	r0, r3
 549 0020 05D0     		beq	.L46
 550              	.L39:
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 551              		.loc 1 1001 0
 552 0022 6823     		movs	r3, #104
 553 0024 E35C     		ldrb	r3, [r4, r3]
 554 0026 012B     		cmp	r3, #1
ARM GAS  /tmp/ccPtXKna.s 			page 54


 555 0028 08D1     		bne	.L47
 556 002a 0220     		movs	r0, #2
 557 002c EFE7     		b	.L38
 558              	.L46:
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 559              		.loc 1 992 0 discriminator 1
 560 002e 2369     		ldr	r3, [r4, #16]
 561 0030 002B     		cmp	r3, #0
 562 0032 F6D1     		bne	.L39
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 563              		.loc 1 994 0
 564 0034 CB07     		lsls	r3, r1, #31
 565 0036 F4D5     		bpl	.L39
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 566              		.loc 1 996 0
 567 0038 0120     		movs	r0, #1
 568 003a E8E7     		b	.L38
 569              	.L47:
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 570              		.loc 1 1001 0 discriminator 2
 571 003c 6826     		movs	r6, #104
 572 003e 0123     		movs	r3, #1
 573 0040 A355     		strb	r3, [r4, r6]
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferSize = Size;
 574              		.loc 1 1003 0 discriminator 2
 575 0042 E164     		str	r1, [r4, #76]
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 576              		.loc 1 1004 0 discriminator 2
 577 0044 4F33     		adds	r3, r3, #79
 578 0046 E252     		strh	r2, [r4, r3]
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 579              		.loc 1 1005 0 discriminator 2
 580 0048 0233     		adds	r3, r3, #2
 581 004a E252     		strh	r2, [r4, r3]
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 582              		.loc 1 1007 0 discriminator 2
 583 004c 0025     		movs	r5, #0
 584 004e E566     		str	r5, [r4, #108]
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 585              		.loc 1 1008 0 discriminator 2
 586 0050 2121     		movs	r1, #33
 587              	.LVL50:
 588 0052 1733     		adds	r3, r3, #23
 589 0054 E154     		strb	r1, [r4, r3]
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 590              		.loc 1 1011 0 discriminator 2
 591 0056 236E     		ldr	r3, [r4, #96]
 592 0058 1049     		ldr	r1, .L48
 593 005a 9962     		str	r1, [r3, #40]
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 594              		.loc 1 1014 0 discriminator 2
 595 005c 236E     		ldr	r3, [r4, #96]
 596 005e 1049     		ldr	r1, .L48+4
 597 0060 D962     		str	r1, [r3, #44]
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 598              		.loc 1 1017 0 discriminator 2
 599 0062 236E     		ldr	r3, [r4, #96]
ARM GAS  /tmp/ccPtXKna.s 			page 55


 600 0064 0F49     		ldr	r1, .L48+8
 601 0066 1963     		str	r1, [r3, #48]
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 602              		.loc 1 1020 0 discriminator 2
 603 0068 236E     		ldr	r3, [r4, #96]
 604 006a 5D63     		str	r5, [r3, #52]
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 605              		.loc 1 1023 0 discriminator 2
 606 006c 2168     		ldr	r1, [r4]
 607 006e 2831     		adds	r1, r1, #40
 608 0070 1300     		movs	r3, r2
 609 0072 0A00     		movs	r2, r1
 610              	.LVL51:
 611 0074 E16C     		ldr	r1, [r4, #76]
 612 0076 206E     		ldr	r0, [r4, #96]
 613 0078 FFF7FEFF 		bl	HAL_DMA_Start_IT
 614              	.LVL52:
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 615              		.loc 1 1026 0 discriminator 2
 616 007c 2368     		ldr	r3, [r4]
 617 007e 4022     		movs	r2, #64
 618 0080 1A62     		str	r2, [r3, #32]
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 619              		.loc 1 1029 0 discriminator 2
 620 0082 A555     		strb	r5, [r4, r6]
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 621              		.loc 1 1033 0 discriminator 2
 622 0084 2268     		ldr	r2, [r4]
 623 0086 9368     		ldr	r3, [r2, #8]
 624 0088 8021     		movs	r1, #128
 625 008a 0B43     		orrs	r3, r1
 626 008c 9360     		str	r3, [r2, #8]
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 627              		.loc 1 1035 0 discriminator 2
 628 008e 0020     		movs	r0, #0
 629 0090 BDE7     		b	.L38
 630              	.LVL53:
 631              	.L41:
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 632              		.loc 1 986 0
 633 0092 0120     		movs	r0, #1
 634 0094 BBE7     		b	.L38
 635              	.L42:
 636 0096 0120     		movs	r0, #1
 637 0098 B9E7     		b	.L38
 638              	.L49:
 639 009a C046     		.align	2
 640              	.L48:
 641 009c 00000000 		.word	UART_DMATransmitCplt
 642 00a0 00000000 		.word	UART_DMATxHalfCplt
 643 00a4 00000000 		.word	UART_DMAError
 644              		.cfi_endproc
 645              	.LFE45:
 647              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 648              		.align	1
 649              		.global	HAL_UART_Receive_DMA
 650              		.syntax unified
ARM GAS  /tmp/ccPtXKna.s 			page 56


 651              		.code	16
 652              		.thumb_func
 653              		.fpu softvfp
 655              	HAL_UART_Receive_DMA:
 656              	.LFB46:
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 657              		.loc 1 1055 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              	.LVL54:
 662 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 663              	.LCFI4:
 664              		.cfi_def_cfa_offset 24
 665              		.cfi_offset 3, -24
 666              		.cfi_offset 4, -20
 667              		.cfi_offset 5, -16
 668              		.cfi_offset 6, -12
 669              		.cfi_offset 7, -8
 670              		.cfi_offset 14, -4
 671 0002 0400     		movs	r4, r0
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 672              		.loc 1 1057 0
 673 0004 6A20     		movs	r0, #106
 674              	.LVL55:
 675 0006 205C     		ldrb	r0, [r4, r0]
 676 0008 2028     		cmp	r0, #32
 677 000a 01D0     		beq	.L58
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 678              		.loc 1 1116 0
 679 000c 0220     		movs	r0, #2
 680              	.LVL56:
 681              	.L51:
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 682              		.loc 1 1118 0
 683              		@ sp needed
 684              	.LVL57:
 685 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 686              	.LVL58:
 687              	.L58:
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 688              		.loc 1 1059 0
 689 0010 0029     		cmp	r1, #0
 690 0012 42D0     		beq	.L54
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 691              		.loc 1 1059 0 is_stmt 0 discriminator 1
 692 0014 002A     		cmp	r2, #0
 693 0016 42D0     		beq	.L55
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 694              		.loc 1 1067 0 is_stmt 1
 695 0018 8023     		movs	r3, #128
 696 001a 5B01     		lsls	r3, r3, #5
 697 001c A068     		ldr	r0, [r4, #8]
 698 001e 9842     		cmp	r0, r3
 699 0020 05D0     		beq	.L59
 700              	.L52:
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 57


 701              		.loc 1 1076 0
 702 0022 6823     		movs	r3, #104
 703 0024 E35C     		ldrb	r3, [r4, r3]
 704 0026 012B     		cmp	r3, #1
 705 0028 08D1     		bne	.L60
 706 002a 0220     		movs	r0, #2
 707 002c EFE7     		b	.L51
 708              	.L59:
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 709              		.loc 1 1067 0 discriminator 1
 710 002e 2369     		ldr	r3, [r4, #16]
 711 0030 002B     		cmp	r3, #0
 712 0032 F6D1     		bne	.L52
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 713              		.loc 1 1069 0
 714 0034 CB07     		lsls	r3, r1, #31
 715 0036 F4D5     		bpl	.L52
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 716              		.loc 1 1071 0
 717 0038 0120     		movs	r0, #1
 718 003a E8E7     		b	.L51
 719              	.L60:
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 720              		.loc 1 1076 0 discriminator 2
 721 003c 6827     		movs	r7, #104
 722 003e 0126     		movs	r6, #1
 723 0040 E655     		strb	r6, [r4, r7]
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferSize = Size;
 724              		.loc 1 1078 0 discriminator 2
 725 0042 6165     		str	r1, [r4, #84]
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 726              		.loc 1 1079 0 discriminator 2
 727 0044 5823     		movs	r3, #88
 728 0046 E252     		strh	r2, [r4, r3]
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 729              		.loc 1 1081 0 discriminator 2
 730 0048 0025     		movs	r5, #0
 731 004a E566     		str	r5, [r4, #108]
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 732              		.loc 1 1082 0 discriminator 2
 733 004c 2221     		movs	r1, #34
 734              	.LVL59:
 735 004e 1233     		adds	r3, r3, #18
 736 0050 E154     		strb	r1, [r4, r3]
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 737              		.loc 1 1085 0 discriminator 2
 738 0052 636E     		ldr	r3, [r4, #100]
 739 0054 1349     		ldr	r1, .L61
 740 0056 9962     		str	r1, [r3, #40]
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 741              		.loc 1 1088 0 discriminator 2
 742 0058 636E     		ldr	r3, [r4, #100]
 743 005a 1349     		ldr	r1, .L61+4
 744 005c D962     		str	r1, [r3, #44]
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 745              		.loc 1 1091 0 discriminator 2
 746 005e 636E     		ldr	r3, [r4, #100]
ARM GAS  /tmp/ccPtXKna.s 			page 58


 747 0060 1249     		ldr	r1, .L61+8
 748 0062 1963     		str	r1, [r3, #48]
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 749              		.loc 1 1094 0 discriminator 2
 750 0064 636E     		ldr	r3, [r4, #100]
 751 0066 5D63     		str	r5, [r3, #52]
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 752              		.loc 1 1097 0 discriminator 2
 753 0068 2168     		ldr	r1, [r4]
 754 006a 2431     		adds	r1, r1, #36
 755 006c 1300     		movs	r3, r2
 756 006e 626D     		ldr	r2, [r4, #84]
 757              	.LVL60:
 758 0070 606E     		ldr	r0, [r4, #100]
 759 0072 FFF7FEFF 		bl	HAL_DMA_Start_IT
 760              	.LVL61:
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 761              		.loc 1 1100 0 discriminator 2
 762 0076 E555     		strb	r5, [r4, r7]
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 763              		.loc 1 1103 0 discriminator 2
 764 0078 2268     		ldr	r2, [r4]
 765 007a 1168     		ldr	r1, [r2]
 766 007c 8023     		movs	r3, #128
 767 007e 5B00     		lsls	r3, r3, #1
 768 0080 0B43     		orrs	r3, r1
 769 0082 1360     		str	r3, [r2]
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 770              		.loc 1 1106 0 discriminator 2
 771 0084 2268     		ldr	r2, [r4]
 772 0086 9368     		ldr	r3, [r2, #8]
 773 0088 3343     		orrs	r3, r6
 774 008a 9360     		str	r3, [r2, #8]
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 775              		.loc 1 1110 0 discriminator 2
 776 008c 2268     		ldr	r2, [r4]
 777 008e 9368     		ldr	r3, [r2, #8]
 778 0090 4021     		movs	r1, #64
 779 0092 0B43     		orrs	r3, r1
 780 0094 9360     		str	r3, [r2, #8]
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 781              		.loc 1 1112 0 discriminator 2
 782 0096 0020     		movs	r0, #0
 783 0098 B9E7     		b	.L51
 784              	.LVL62:
 785              	.L54:
1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 786              		.loc 1 1061 0
 787 009a 0120     		movs	r0, #1
 788 009c B7E7     		b	.L51
 789              	.L55:
 790 009e 0120     		movs	r0, #1
 791 00a0 B5E7     		b	.L51
 792              	.L62:
 793 00a2 C046     		.align	2
 794              	.L61:
 795 00a4 00000000 		.word	UART_DMAReceiveCplt
ARM GAS  /tmp/ccPtXKna.s 			page 59


 796 00a8 00000000 		.word	UART_DMARxHalfCplt
 797 00ac 00000000 		.word	UART_DMAError
 798              		.cfi_endproc
 799              	.LFE46:
 801              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 802              		.align	1
 803              		.global	HAL_UART_DMAPause
 804              		.syntax unified
 805              		.code	16
 806              		.thumb_func
 807              		.fpu softvfp
 809              	HAL_UART_DMAPause:
 810              	.LFB47:
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
 811              		.loc 1 1126 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816              	.LVL63:
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 817              		.loc 1 1128 0
 818 0000 6823     		movs	r3, #104
 819 0002 C35C     		ldrb	r3, [r0, r3]
 820 0004 012B     		cmp	r3, #1
 821 0006 2CD0     		beq	.L67
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 822              		.loc 1 1128 0 is_stmt 0 discriminator 2
 823 0008 0122     		movs	r2, #1
 824 000a 6823     		movs	r3, #104
 825 000c C254     		strb	r2, [r0, r3]
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 826              		.loc 1 1130 0 is_stmt 1 discriminator 2
 827 000e 0133     		adds	r3, r3, #1
 828 0010 C35C     		ldrb	r3, [r0, r3]
 829 0012 212B     		cmp	r3, #33
 830 0014 08D0     		beq	.L68
 831              	.L65:
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 832              		.loc 1 1136 0
 833 0016 6A23     		movs	r3, #106
 834 0018 C35C     		ldrb	r3, [r0, r3]
 835 001a 222B     		cmp	r3, #34
 836 001c 0DD0     		beq	.L69
 837              	.L66:
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 838              		.loc 1 1148 0
 839 001e 0022     		movs	r2, #0
 840 0020 6823     		movs	r3, #104
 841 0022 C254     		strb	r2, [r0, r3]
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 842              		.loc 1 1150 0
 843 0024 0020     		movs	r0, #0
 844              	.LVL64:
 845              	.L64:
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 846              		.loc 1 1151 0
ARM GAS  /tmp/ccPtXKna.s 			page 60


 847              		@ sp needed
 848 0026 7047     		bx	lr
 849              	.LVL65:
 850              	.L68:
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 851              		.loc 1 1131 0 discriminator 1
 852 0028 0368     		ldr	r3, [r0]
 853 002a 9A68     		ldr	r2, [r3, #8]
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 854              		.loc 1 1130 0 discriminator 1
 855 002c 1206     		lsls	r2, r2, #24
 856 002e F2D5     		bpl	.L65
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 857              		.loc 1 1134 0
 858 0030 9A68     		ldr	r2, [r3, #8]
 859 0032 8021     		movs	r1, #128
 860 0034 8A43     		bics	r2, r1
 861 0036 9A60     		str	r2, [r3, #8]
 862 0038 EDE7     		b	.L65
 863              	.L69:
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 864              		.loc 1 1137 0 discriminator 1
 865 003a 0368     		ldr	r3, [r0]
 866 003c 9A68     		ldr	r2, [r3, #8]
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 867              		.loc 1 1136 0 discriminator 1
 868 003e 5206     		lsls	r2, r2, #25
 869 0040 EDD5     		bpl	.L66
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 870              		.loc 1 1140 0
 871 0042 1A68     		ldr	r2, [r3]
 872 0044 0849     		ldr	r1, .L70
 873 0046 0A40     		ands	r2, r1
 874 0048 1A60     		str	r2, [r3]
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 875              		.loc 1 1141 0
 876 004a 0268     		ldr	r2, [r0]
 877 004c 9368     		ldr	r3, [r2, #8]
 878 004e 0331     		adds	r1, r1, #3
 879 0050 FF31     		adds	r1, r1, #255
 880 0052 8B43     		bics	r3, r1
 881 0054 9360     		str	r3, [r2, #8]
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 882              		.loc 1 1144 0
 883 0056 0268     		ldr	r2, [r0]
 884 0058 9368     		ldr	r3, [r2, #8]
 885 005a 3F31     		adds	r1, r1, #63
 886 005c 8B43     		bics	r3, r1
 887 005e 9360     		str	r3, [r2, #8]
 888 0060 DDE7     		b	.L66
 889              	.L67:
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 890              		.loc 1 1128 0
 891 0062 0220     		movs	r0, #2
 892              	.LVL66:
 893 0064 DFE7     		b	.L64
 894              	.L71:
ARM GAS  /tmp/ccPtXKna.s 			page 61


 895 0066 C046     		.align	2
 896              	.L70:
 897 0068 FFFEFFFF 		.word	-257
 898              		.cfi_endproc
 899              	.LFE47:
 901              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 902              		.align	1
 903              		.global	HAL_UART_DMAResume
 904              		.syntax unified
 905              		.code	16
 906              		.thumb_func
 907              		.fpu softvfp
 909              	HAL_UART_DMAResume:
 910              	.LFB48:
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
 911              		.loc 1 1159 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              		@ link register save eliminated.
 916              	.LVL67:
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 917              		.loc 1 1161 0
 918 0000 6823     		movs	r3, #104
 919 0002 C35C     		ldrb	r3, [r0, r3]
 920 0004 012B     		cmp	r3, #1
 921 0006 29D0     		beq	.L76
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 922              		.loc 1 1161 0 is_stmt 0 discriminator 2
 923 0008 0122     		movs	r2, #1
 924 000a 6823     		movs	r3, #104
 925 000c C254     		strb	r2, [r0, r3]
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 926              		.loc 1 1163 0 is_stmt 1 discriminator 2
 927 000e 0133     		adds	r3, r3, #1
 928 0010 C35C     		ldrb	r3, [r0, r3]
 929 0012 212B     		cmp	r3, #33
 930 0014 08D0     		beq	.L77
 931              	.L74:
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 932              		.loc 1 1168 0
 933 0016 6A23     		movs	r3, #106
 934 0018 C35C     		ldrb	r3, [r0, r3]
 935 001a 222B     		cmp	r3, #34
 936 001c 0AD0     		beq	.L78
 937              	.L75:
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 938              		.loc 1 1182 0
 939 001e 0022     		movs	r2, #0
 940 0020 6823     		movs	r3, #104
 941 0022 C254     		strb	r2, [r0, r3]
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 942              		.loc 1 1184 0
 943 0024 0020     		movs	r0, #0
 944              	.LVL68:
 945              	.L73:
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 62


 946              		.loc 1 1185 0
 947              		@ sp needed
 948 0026 7047     		bx	lr
 949              	.LVL69:
 950              	.L77:
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 951              		.loc 1 1166 0
 952 0028 0268     		ldr	r2, [r0]
 953 002a 9368     		ldr	r3, [r2, #8]
 954 002c 8021     		movs	r1, #128
 955 002e 0B43     		orrs	r3, r1
 956 0030 9360     		str	r3, [r2, #8]
 957 0032 F0E7     		b	.L74
 958              	.L78:
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 959              		.loc 1 1171 0
 960 0034 0368     		ldr	r3, [r0]
 961 0036 0822     		movs	r2, #8
 962 0038 1A62     		str	r2, [r3, #32]
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 963              		.loc 1 1174 0
 964 003a 0268     		ldr	r2, [r0]
 965 003c 1168     		ldr	r1, [r2]
 966 003e 8023     		movs	r3, #128
 967 0040 5B00     		lsls	r3, r3, #1
 968 0042 0B43     		orrs	r3, r1
 969 0044 1360     		str	r3, [r2]
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 970              		.loc 1 1175 0
 971 0046 0268     		ldr	r2, [r0]
 972 0048 9368     		ldr	r3, [r2, #8]
 973 004a 0121     		movs	r1, #1
 974 004c 0B43     		orrs	r3, r1
 975 004e 9360     		str	r3, [r2, #8]
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 976              		.loc 1 1178 0
 977 0050 0268     		ldr	r2, [r0]
 978 0052 9368     		ldr	r3, [r2, #8]
 979 0054 3F31     		adds	r1, r1, #63
 980 0056 0B43     		orrs	r3, r1
 981 0058 9360     		str	r3, [r2, #8]
 982 005a E0E7     		b	.L75
 983              	.L76:
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 984              		.loc 1 1161 0
 985 005c 0220     		movs	r0, #2
 986              	.LVL70:
 987 005e E2E7     		b	.L73
 988              		.cfi_endproc
 989              	.LFE48:
 991              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 992              		.align	1
 993              		.global	HAL_UART_DMAStop
 994              		.syntax unified
 995              		.code	16
 996              		.thumb_func
 997              		.fpu softvfp
ARM GAS  /tmp/ccPtXKna.s 			page 63


 999              	HAL_UART_DMAStop:
 1000              	.LFB49:
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
 1001              		.loc 1 1193 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              	.LVL71:
 1006 0000 10B5     		push	{r4, lr}
 1007              	.LCFI5:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
 1011 0002 0400     		movs	r4, r0
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 1012              		.loc 1 1202 0
 1013 0004 6923     		movs	r3, #105
 1014 0006 C35C     		ldrb	r3, [r0, r3]
 1015 0008 212B     		cmp	r3, #33
 1016 000a 05D0     		beq	.L84
 1017              	.LVL72:
 1018              	.L80:
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 1019              		.loc 1 1217 0
 1020 000c 6A23     		movs	r3, #106
 1021 000e E35C     		ldrb	r3, [r4, r3]
 1022 0010 222B     		cmp	r3, #34
 1023 0012 12D0     		beq	.L85
 1024              	.L82:
1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1025              		.loc 1 1232 0
 1026 0014 0020     		movs	r0, #0
 1027              		@ sp needed
 1028              	.LVL73:
 1029 0016 10BD     		pop	{r4, pc}
 1030              	.LVL74:
 1031              	.L84:
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1032              		.loc 1 1203 0 discriminator 1
 1033 0018 0368     		ldr	r3, [r0]
 1034 001a 9A68     		ldr	r2, [r3, #8]
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 1035              		.loc 1 1202 0 discriminator 1
 1036 001c 1206     		lsls	r2, r2, #24
 1037 001e F5D5     		bpl	.L80
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1038              		.loc 1 1205 0
 1039 0020 9A68     		ldr	r2, [r3, #8]
 1040 0022 8021     		movs	r1, #128
 1041 0024 8A43     		bics	r2, r1
 1042 0026 9A60     		str	r2, [r3, #8]
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1043              		.loc 1 1208 0
 1044 0028 006E     		ldr	r0, [r0, #96]
 1045              	.LVL75:
 1046 002a 0028     		cmp	r0, #0
 1047 002c 01D0     		beq	.L81
ARM GAS  /tmp/ccPtXKna.s 			page 64


1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1048              		.loc 1 1210 0
 1049 002e FFF7FEFF 		bl	HAL_DMA_Abort
 1050              	.LVL76:
 1051              	.L81:
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 1052              		.loc 1 1213 0
 1053 0032 2000     		movs	r0, r4
 1054 0034 FFF7FEFF 		bl	UART_EndTxTransfer
 1055              	.LVL77:
 1056 0038 E8E7     		b	.L80
 1057              	.L85:
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1058              		.loc 1 1218 0 discriminator 1
 1059 003a 2368     		ldr	r3, [r4]
 1060 003c 9A68     		ldr	r2, [r3, #8]
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 1061              		.loc 1 1217 0 discriminator 1
 1062 003e 5206     		lsls	r2, r2, #25
 1063 0040 E8D5     		bpl	.L82
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1064              		.loc 1 1220 0
 1065 0042 9A68     		ldr	r2, [r3, #8]
 1066 0044 4021     		movs	r1, #64
 1067 0046 8A43     		bics	r2, r1
 1068 0048 9A60     		str	r2, [r3, #8]
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1069              		.loc 1 1223 0
 1070 004a 606E     		ldr	r0, [r4, #100]
 1071 004c 0028     		cmp	r0, #0
 1072 004e 01D0     		beq	.L83
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1073              		.loc 1 1225 0
 1074 0050 FFF7FEFF 		bl	HAL_DMA_Abort
 1075              	.LVL78:
 1076              	.L83:
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 1077              		.loc 1 1228 0
 1078 0054 2000     		movs	r0, r4
 1079 0056 FFF7FEFF 		bl	UART_EndRxTransfer
 1080              	.LVL79:
 1081 005a DBE7     		b	.L82
 1082              		.cfi_endproc
 1083              	.LFE49:
 1085              		.section	.text.HAL_UART_Abort,"ax",%progbits
 1086              		.align	1
 1087              		.global	HAL_UART_Abort
 1088              		.syntax unified
 1089              		.code	16
 1090              		.thumb_func
 1091              		.fpu softvfp
 1093              	HAL_UART_Abort:
 1094              	.LFB50:
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1095              		.loc 1 1247 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccPtXKna.s 			page 65


 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              	.LVL80:
 1100 0000 10B5     		push	{r4, lr}
 1101              	.LCFI6:
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 4, -8
 1104              		.cfi_offset 14, -4
 1105 0002 0400     		movs	r4, r0
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1106              		.loc 1 1249 0
 1107 0004 0268     		ldr	r2, [r0]
 1108 0006 1368     		ldr	r3, [r2]
 1109 0008 1C49     		ldr	r1, .L89
 1110 000a 0B40     		ands	r3, r1
 1111 000c 1360     		str	r3, [r2]
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1112              		.loc 1 1250 0
 1113 000e 0268     		ldr	r2, [r0]
 1114 0010 9368     		ldr	r3, [r2, #8]
 1115 0012 E331     		adds	r1, r1, #227
 1116 0014 FF31     		adds	r1, r1, #255
 1117 0016 8B43     		bics	r3, r1
 1118 0018 9360     		str	r3, [r2, #8]
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1119              		.loc 1 1253 0
 1120 001a 0368     		ldr	r3, [r0]
 1121 001c 9A68     		ldr	r2, [r3, #8]
 1122 001e 1206     		lsls	r2, r2, #24
 1123 0020 0BD5     		bpl	.L87
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1124              		.loc 1 1255 0
 1125 0022 9A68     		ldr	r2, [r3, #8]
 1126 0024 7F31     		adds	r1, r1, #127
 1127 0026 8A43     		bics	r2, r1
 1128 0028 9A60     		str	r2, [r3, #8]
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1129              		.loc 1 1258 0
 1130 002a 036E     		ldr	r3, [r0, #96]
 1131 002c 002B     		cmp	r3, #0
 1132 002e 04D0     		beq	.L87
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1133              		.loc 1 1262 0
 1134 0030 0022     		movs	r2, #0
 1135 0032 5A63     		str	r2, [r3, #52]
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1136              		.loc 1 1264 0
 1137 0034 006E     		ldr	r0, [r0, #96]
 1138              	.LVL81:
 1139 0036 FFF7FEFF 		bl	HAL_DMA_Abort
 1140              	.LVL82:
 1141              	.L87:
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1142              		.loc 1 1269 0
 1143 003a 2368     		ldr	r3, [r4]
 1144 003c 9A68     		ldr	r2, [r3, #8]
 1145 003e 5206     		lsls	r2, r2, #25
 1146 0040 0BD5     		bpl	.L88
ARM GAS  /tmp/ccPtXKna.s 			page 66


1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1147              		.loc 1 1271 0
 1148 0042 9A68     		ldr	r2, [r3, #8]
 1149 0044 4021     		movs	r1, #64
 1150 0046 8A43     		bics	r2, r1
 1151 0048 9A60     		str	r2, [r3, #8]
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1152              		.loc 1 1274 0
 1153 004a 636E     		ldr	r3, [r4, #100]
 1154 004c 002B     		cmp	r3, #0
 1155 004e 04D0     		beq	.L88
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1156              		.loc 1 1278 0
 1157 0050 0022     		movs	r2, #0
 1158 0052 5A63     		str	r2, [r3, #52]
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1159              		.loc 1 1280 0
 1160 0054 606E     		ldr	r0, [r4, #100]
 1161 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 1162              	.LVL83:
 1163              	.L88:
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U; 
 1164              		.loc 1 1285 0
 1165 005a 0023     		movs	r3, #0
 1166 005c 5222     		movs	r2, #82
 1167 005e A352     		strh	r3, [r4, r2]
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1168              		.loc 1 1286 0
 1169 0060 0832     		adds	r2, r2, #8
 1170 0062 A352     		strh	r3, [r4, r2]
1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1171              		.loc 1 1289 0
 1172 0064 2268     		ldr	r2, [r4]
 1173 0066 0F21     		movs	r1, #15
 1174 0068 1162     		str	r1, [r2, #32]
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 1175              		.loc 1 1292 0
 1176 006a 2022     		movs	r2, #32
 1177 006c 5A31     		adds	r1, r1, #90
 1178 006e 6254     		strb	r2, [r4, r1]
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1179              		.loc 1 1293 0
 1180 0070 0131     		adds	r1, r1, #1
 1181 0072 6254     		strb	r2, [r4, r1]
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1182              		.loc 1 1296 0
 1183 0074 E366     		str	r3, [r4, #108]
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1184              		.loc 1 1299 0
 1185 0076 0020     		movs	r0, #0
 1186              		@ sp needed
 1187              	.LVL84:
 1188 0078 10BD     		pop	{r4, pc}
 1189              	.L90:
 1190 007a C046     		.align	2
 1191              	.L89:
 1192 007c 1FFEFFFF 		.word	-481
ARM GAS  /tmp/ccPtXKna.s 			page 67


 1193              		.cfi_endproc
 1194              	.LFE50:
 1196              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 1197              		.align	1
 1198              		.global	HAL_UART_AbortTransmit
 1199              		.syntax unified
 1200              		.code	16
 1201              		.thumb_func
 1202              		.fpu softvfp
 1204              	HAL_UART_AbortTransmit:
 1205              	.LFB51:
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 1206              		.loc 1 1314 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              	.LVL85:
 1211 0000 10B5     		push	{r4, lr}
 1212              	.LCFI7:
 1213              		.cfi_def_cfa_offset 8
 1214              		.cfi_offset 4, -8
 1215              		.cfi_offset 14, -4
 1216 0002 0400     		movs	r4, r0
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1217              		.loc 1 1316 0
 1218 0004 0268     		ldr	r2, [r0]
 1219 0006 1368     		ldr	r3, [r2]
 1220 0008 C021     		movs	r1, #192
 1221 000a 8B43     		bics	r3, r1
 1222 000c 1360     		str	r3, [r2]
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1223              		.loc 1 1319 0
 1224 000e 0368     		ldr	r3, [r0]
 1225 0010 9A68     		ldr	r2, [r3, #8]
 1226 0012 1206     		lsls	r2, r2, #24
 1227 0014 0BD5     		bpl	.L92
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1228              		.loc 1 1321 0
 1229 0016 9A68     		ldr	r2, [r3, #8]
 1230 0018 4039     		subs	r1, r1, #64
 1231 001a 8A43     		bics	r2, r1
 1232 001c 9A60     		str	r2, [r3, #8]
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1233              		.loc 1 1324 0
 1234 001e 036E     		ldr	r3, [r0, #96]
 1235 0020 002B     		cmp	r3, #0
 1236 0022 04D0     		beq	.L92
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1237              		.loc 1 1328 0
 1238 0024 0022     		movs	r2, #0
 1239 0026 5A63     		str	r2, [r3, #52]
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1240              		.loc 1 1330 0
 1241 0028 006E     		ldr	r0, [r0, #96]
 1242              	.LVL86:
 1243 002a FFF7FEFF 		bl	HAL_DMA_Abort
 1244              	.LVL87:
ARM GAS  /tmp/ccPtXKna.s 			page 68


 1245              	.L92:
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1246              		.loc 1 1335 0
 1247 002e 0022     		movs	r2, #0
 1248 0030 5223     		movs	r3, #82
 1249 0032 E252     		strh	r2, [r4, r3]
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1250              		.loc 1 1338 0
 1251 0034 2032     		adds	r2, r2, #32
 1252 0036 1733     		adds	r3, r3, #23
 1253 0038 E254     		strb	r2, [r4, r3]
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1254              		.loc 1 1341 0
 1255 003a 0020     		movs	r0, #0
 1256              		@ sp needed
 1257              	.LVL88:
 1258 003c 10BD     		pop	{r4, pc}
 1259              		.cfi_endproc
 1260              	.LFE51:
 1262              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 1263              		.align	1
 1264              		.global	HAL_UART_AbortReceive
 1265              		.syntax unified
 1266              		.code	16
 1267              		.thumb_func
 1268              		.fpu softvfp
 1270              	HAL_UART_AbortReceive:
 1271              	.LFB52:
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 1272              		.loc 1 1356 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 0, uses_anonymous_args = 0
 1276              	.LVL89:
 1277 0000 10B5     		push	{r4, lr}
 1278              	.LCFI8:
 1279              		.cfi_def_cfa_offset 8
 1280              		.cfi_offset 4, -8
 1281              		.cfi_offset 14, -4
 1282 0002 0400     		movs	r4, r0
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1283              		.loc 1 1358 0
 1284 0004 0268     		ldr	r2, [r0]
 1285 0006 1368     		ldr	r3, [r2]
 1286 0008 1149     		ldr	r1, .L95
 1287 000a 0B40     		ands	r3, r1
 1288 000c 1360     		str	r3, [r2]
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1289              		.loc 1 1359 0
 1290 000e 0268     		ldr	r2, [r0]
 1291 0010 9368     		ldr	r3, [r2, #8]
 1292 0012 2331     		adds	r1, r1, #35
 1293 0014 FF31     		adds	r1, r1, #255
 1294 0016 8B43     		bics	r3, r1
 1295 0018 9360     		str	r3, [r2, #8]
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1296              		.loc 1 1362 0
ARM GAS  /tmp/ccPtXKna.s 			page 69


 1297 001a 0368     		ldr	r3, [r0]
 1298 001c 9A68     		ldr	r2, [r3, #8]
 1299 001e 5206     		lsls	r2, r2, #25
 1300 0020 0BD5     		bpl	.L94
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1301              		.loc 1 1364 0
 1302 0022 9A68     		ldr	r2, [r3, #8]
 1303 0024 3F31     		adds	r1, r1, #63
 1304 0026 8A43     		bics	r2, r1
 1305 0028 9A60     		str	r2, [r3, #8]
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1306              		.loc 1 1367 0
 1307 002a 436E     		ldr	r3, [r0, #100]
 1308 002c 002B     		cmp	r3, #0
 1309 002e 04D0     		beq	.L94
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1310              		.loc 1 1371 0
 1311 0030 0022     		movs	r2, #0
 1312 0032 5A63     		str	r2, [r3, #52]
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1313              		.loc 1 1373 0
 1314 0034 406E     		ldr	r0, [r0, #100]
 1315              	.LVL90:
 1316 0036 FFF7FEFF 		bl	HAL_DMA_Abort
 1317              	.LVL91:
 1318              	.L94:
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1319              		.loc 1 1378 0
 1320 003a 0022     		movs	r2, #0
 1321 003c 5A23     		movs	r3, #90
 1322 003e E252     		strh	r2, [r4, r3]
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1323              		.loc 1 1381 0
 1324 0040 2368     		ldr	r3, [r4]
 1325 0042 0F32     		adds	r2, r2, #15
 1326 0044 1A62     		str	r2, [r3, #32]
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1327              		.loc 1 1384 0
 1328 0046 1132     		adds	r2, r2, #17
 1329 0048 6A23     		movs	r3, #106
 1330 004a E254     		strb	r2, [r4, r3]
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1331              		.loc 1 1387 0
 1332 004c 0020     		movs	r0, #0
 1333              		@ sp needed
 1334              	.LVL92:
 1335 004e 10BD     		pop	{r4, pc}
 1336              	.L96:
 1337              		.align	2
 1338              	.L95:
 1339 0050 DFFEFFFF 		.word	-289
 1340              		.cfi_endproc
 1341              	.LFE52:
 1343              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1344              		.align	1
 1345              		.weak	HAL_UART_TxCpltCallback
 1346              		.syntax unified
ARM GAS  /tmp/ccPtXKna.s 			page 70


 1347              		.code	16
 1348              		.thumb_func
 1349              		.fpu softvfp
 1351              	HAL_UART_TxCpltCallback:
 1352              	.LFB57:
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1353              		.loc 1 1811 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358              	.LVL93:
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1359              		.loc 1 1818 0
 1360              		@ sp needed
 1361 0000 7047     		bx	lr
 1362              		.cfi_endproc
 1363              	.LFE57:
 1365              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 1366              		.align	1
 1367              		.syntax unified
 1368              		.code	16
 1369              		.thumb_func
 1370              		.fpu softvfp
 1372              	UART_DMATransmitCplt:
 1373              	.LFB78:
2405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
2409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
2410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1374              		.loc 1 2413 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              	.LVL94:
 1379 0000 10B5     		push	{r4, lr}
 1380              	.LCFI9:
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 4, -8
 1383              		.cfi_offset 14, -4
2414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 1384              		.loc 1 2414 0
 1385 0002 436A     		ldr	r3, [r0, #36]
 1386              	.LVL95:
2415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
2416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Normal mode */
2417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 1387              		.loc 1 2417 0
 1388 0004 0268     		ldr	r2, [r0]
 1389 0006 1268     		ldr	r2, [r2]
 1390 0008 9206     		lsls	r2, r2, #26
 1391 000a 0DD4     		bmi	.L99
ARM GAS  /tmp/ccPtXKna.s 			page 71


2418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0;
 1392              		.loc 1 2419 0
 1393 000c 0021     		movs	r1, #0
 1394 000e 5222     		movs	r2, #82
 1395 0010 9952     		strh	r1, [r3, r2]
2420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
2422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
2423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1396              		.loc 1 2423 0
 1397 0012 1968     		ldr	r1, [r3]
 1398 0014 8A68     		ldr	r2, [r1, #8]
 1399 0016 8020     		movs	r0, #128
 1400              	.LVL96:
 1401 0018 8243     		bics	r2, r0
 1402 001a 8A60     		str	r2, [r1, #8]
2424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 1403              		.loc 1 2426 0
 1404 001c 1A68     		ldr	r2, [r3]
 1405 001e 1368     		ldr	r3, [r2]
 1406              	.LVL97:
 1407 0020 4021     		movs	r1, #64
 1408 0022 0B43     		orrs	r3, r1
 1409 0024 1360     		str	r3, [r2]
 1410              	.L98:
2427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Circular mode */
2429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1411              		.loc 1 2434 0
 1412              		@ sp needed
 1413 0026 10BD     		pop	{r4, pc}
 1414              	.LVL98:
 1415              	.L99:
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 1416              		.loc 1 2431 0
 1417 0028 1800     		movs	r0, r3
 1418              	.LVL99:
 1419 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1420              	.LVL100:
 1421              		.loc 1 2434 0
 1422 002e FAE7     		b	.L98
 1423              		.cfi_endproc
 1424              	.LFE78:
 1426              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 1427              		.align	1
 1428              		.weak	HAL_UART_TxHalfCpltCallback
 1429              		.syntax unified
 1430              		.code	16
 1431              		.thumb_func
ARM GAS  /tmp/ccPtXKna.s 			page 72


 1432              		.fpu softvfp
 1434              	HAL_UART_TxHalfCpltCallback:
 1435              	.LFB58:
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1436              		.loc 1 1826 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 1440              		@ link register save eliminated.
 1441              	.LVL101:
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1442              		.loc 1 1833 0
 1443              		@ sp needed
 1444 0000 7047     		bx	lr
 1445              		.cfi_endproc
 1446              	.LFE58:
 1448              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 1449              		.align	1
 1450              		.syntax unified
 1451              		.code	16
 1452              		.thumb_func
 1453              		.fpu softvfp
 1455              	UART_DMATxHalfCplt:
 1456              	.LFB79:
2435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
2438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
2439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1457              		.loc 1 2442 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 0
 1460              		@ frame_needed = 0, uses_anonymous_args = 0
 1461              	.LVL102:
 1462 0000 10B5     		push	{r4, lr}
 1463              	.LCFI10:
 1464              		.cfi_def_cfa_offset 8
 1465              		.cfi_offset 4, -8
 1466              		.cfi_offset 14, -4
2443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 1467              		.loc 1 2443 0
 1468 0002 406A     		ldr	r0, [r0, #36]
 1469              	.LVL103:
2444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 1470              		.loc 1 2445 0
 1471 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 1472              	.LVL104:
2446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1473              		.loc 1 2446 0
 1474              		@ sp needed
 1475 0008 10BD     		pop	{r4, pc}
 1476              		.cfi_endproc
 1477              	.LFE79:
ARM GAS  /tmp/ccPtXKna.s 			page 73


 1479              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1480              		.align	1
 1481              		.weak	HAL_UART_RxCpltCallback
 1482              		.syntax unified
 1483              		.code	16
 1484              		.thumb_func
 1485              		.fpu softvfp
 1487              	HAL_UART_RxCpltCallback:
 1488              	.LFB59:
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1489              		.loc 1 1841 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 0
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
 1493              		@ link register save eliminated.
 1494              	.LVL105:
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1495              		.loc 1 1848 0
 1496              		@ sp needed
 1497 0000 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE59:
 1501              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 1502              		.align	1
 1503              		.syntax unified
 1504              		.code	16
 1505              		.thumb_func
 1506              		.fpu softvfp
 1508              	UART_DMAReceiveCplt:
 1509              	.LFB80:
2447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
2450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
2451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1510              		.loc 1 2454 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514              	.LVL106:
 1515 0000 10B5     		push	{r4, lr}
 1516              	.LCFI11:
 1517              		.cfi_def_cfa_offset 8
 1518              		.cfi_offset 4, -8
 1519              		.cfi_offset 14, -4
2455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 1520              		.loc 1 2455 0
 1521 0002 436A     		ldr	r3, [r0, #36]
 1522              	.LVL107:
2456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* DMA Normal mode */
2458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 1523              		.loc 1 2458 0
 1524 0004 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccPtXKna.s 			page 74


 1525 0006 1268     		ldr	r2, [r2]
 1526 0008 9206     		lsls	r2, r2, #26
 1527 000a 15D4     		bmi	.L105
2459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
 1528              		.loc 1 2460 0
 1529 000c 0021     		movs	r1, #0
 1530 000e 5A22     		movs	r2, #90
 1531 0010 9952     		strh	r1, [r3, r2]
2461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1532              		.loc 1 2463 0
 1533 0012 1968     		ldr	r1, [r3]
 1534 0014 0A68     		ldr	r2, [r1]
 1535 0016 0A48     		ldr	r0, .L106
 1536              	.LVL108:
 1537 0018 0240     		ands	r2, r0
 1538 001a 0A60     		str	r2, [r1]
2464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1539              		.loc 1 2464 0
 1540 001c 1968     		ldr	r1, [r3]
 1541 001e 8A68     		ldr	r2, [r1, #8]
 1542 0020 0330     		adds	r0, r0, #3
 1543 0022 FF30     		adds	r0, r0, #255
 1544 0024 8243     		bics	r2, r0
 1545 0026 8A60     		str	r2, [r1, #8]
2465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        in the UART CR3 register */
2468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1546              		.loc 1 2468 0
 1547 0028 1968     		ldr	r1, [r3]
 1548 002a 8A68     		ldr	r2, [r1, #8]
 1549 002c 3F30     		adds	r0, r0, #63
 1550 002e 8243     		bics	r2, r0
 1551 0030 8A60     		str	r2, [r1, #8]
2469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1552              		.loc 1 2471 0
 1553 0032 2021     		movs	r1, #32
 1554 0034 6A22     		movs	r2, #106
 1555 0036 9954     		strb	r1, [r3, r2]
 1556              	.L105:
2472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 1557              		.loc 1 2474 0
 1558 0038 1800     		movs	r0, r3
 1559 003a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 1560              	.LVL109:
2475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1561              		.loc 1 2475 0
 1562              		@ sp needed
 1563 003e 10BD     		pop	{r4, pc}
 1564              	.L107:
ARM GAS  /tmp/ccPtXKna.s 			page 75


 1565              		.align	2
 1566              	.L106:
 1567 0040 FFFEFFFF 		.word	-257
 1568              		.cfi_endproc
 1569              	.LFE80:
 1571              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 1572              		.align	1
 1573              		.weak	HAL_UART_RxHalfCpltCallback
 1574              		.syntax unified
 1575              		.code	16
 1576              		.thumb_func
 1577              		.fpu softvfp
 1579              	HAL_UART_RxHalfCpltCallback:
 1580              	.LFB60:
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1581              		.loc 1 1856 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              		@ link register save eliminated.
 1586              	.LVL110:
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1587              		.loc 1 1863 0
 1588              		@ sp needed
 1589 0000 7047     		bx	lr
 1590              		.cfi_endproc
 1591              	.LFE60:
 1593              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 1594              		.align	1
 1595              		.syntax unified
 1596              		.code	16
 1597              		.thumb_func
 1598              		.fpu softvfp
 1600              	UART_DMARxHalfCplt:
 1601              	.LFB81:
2476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
2479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
2480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1602              		.loc 1 2483 0
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 0
 1605              		@ frame_needed = 0, uses_anonymous_args = 0
 1606              	.LVL111:
 1607 0000 10B5     		push	{r4, lr}
 1608              	.LCFI12:
 1609              		.cfi_def_cfa_offset 8
 1610              		.cfi_offset 4, -8
 1611              		.cfi_offset 14, -4
2484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 1612              		.loc 1 2484 0
 1613 0002 406A     		ldr	r0, [r0, #36]
 1614              	.LVL112:
ARM GAS  /tmp/ccPtXKna.s 			page 76


2485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
 1615              		.loc 1 2486 0
 1616 0004 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 1617              	.LVL113:
2487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1618              		.loc 1 2487 0
 1619              		@ sp needed
 1620 0008 10BD     		pop	{r4, pc}
 1621              		.cfi_endproc
 1622              	.LFE81:
 1624              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 1625              		.align	1
 1626              		.weak	HAL_UART_ErrorCallback
 1627              		.syntax unified
 1628              		.code	16
 1629              		.thumb_func
 1630              		.fpu softvfp
 1632              	HAL_UART_ErrorCallback:
 1633              	.LFB61:
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1634              		.loc 1 1871 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639              	.LVL114:
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1640              		.loc 1 1878 0
 1641              		@ sp needed
 1642 0000 7047     		bx	lr
 1643              		.cfi_endproc
 1644              	.LFE61:
 1646              		.section	.text.UART_DMAError,"ax",%progbits
 1647              		.align	1
 1648              		.syntax unified
 1649              		.code	16
 1650              		.thumb_func
 1651              		.fpu softvfp
 1653              	UART_DMAError:
 1654              	.LFB82:
2488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief DMA UART communication error callback.
2491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param hdma DMA handle.
2492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1655              		.loc 1 2495 0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 0
 1658              		@ frame_needed = 0, uses_anonymous_args = 0
 1659              	.LVL115:
 1660 0000 10B5     		push	{r4, lr}
 1661              	.LCFI13:
 1662              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccPtXKna.s 			page 77


 1663              		.cfi_offset 4, -8
 1664              		.cfi_offset 14, -4
2496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 1665              		.loc 1 2496 0
 1666 0002 446A     		ldr	r4, [r0, #36]
 1667              	.LVL116:
2497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 1668              		.loc 1 2499 0
 1669 0004 6923     		movs	r3, #105
 1670 0006 E35C     		ldrb	r3, [r4, r3]
 1671 0008 212B     		cmp	r3, #33
 1672 000a 0BD0     		beq	.L114
 1673              	.LVL117:
 1674              	.L112:
2500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
2501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = 0U;
2503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTxTransfer(huart);
2504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1675              		.loc 1 2507 0
 1676 000c 6A23     		movs	r3, #106
 1677 000e E35C     		ldrb	r3, [r4, r3]
 1678 0010 222B     		cmp	r3, #34
 1679 0012 12D0     		beq	.L115
 1680              	.L113:
2508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
2509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
2511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndRxTransfer(huart);
2512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 1681              		.loc 1 2514 0
 1682 0014 E36E     		ldr	r3, [r4, #108]
 1683 0016 1022     		movs	r2, #16
 1684 0018 1343     		orrs	r3, r2
 1685 001a E366     		str	r3, [r4, #108]
2515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 1686              		.loc 1 2515 0
 1687 001c 2000     		movs	r0, r4
 1688 001e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 1689              	.LVL118:
2516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1690              		.loc 1 2516 0
 1691              		@ sp needed
 1692              	.LVL119:
 1693 0022 10BD     		pop	{r4, pc}
 1694              	.LVL120:
 1695              	.L114:
2500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1696              		.loc 1 2500 0
 1697 0024 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccPtXKna.s 			page 78


 1698 0026 9B68     		ldr	r3, [r3, #8]
 1699 0028 1B06     		lsls	r3, r3, #24
 1700 002a EFD5     		bpl	.L112
2502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 1701              		.loc 1 2502 0
 1702 002c 0022     		movs	r2, #0
 1703 002e 5223     		movs	r3, #82
 1704 0030 E252     		strh	r2, [r4, r3]
2503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 1705              		.loc 1 2503 0
 1706 0032 2000     		movs	r0, r4
 1707              	.LVL121:
 1708 0034 FFF7FEFF 		bl	UART_EndTxTransfer
 1709              	.LVL122:
 1710 0038 E8E7     		b	.L112
 1711              	.L115:
2508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1712              		.loc 1 2508 0
 1713 003a 2368     		ldr	r3, [r4]
 1714 003c 9B68     		ldr	r3, [r3, #8]
 1715 003e 5B06     		lsls	r3, r3, #25
 1716 0040 E8D5     		bpl	.L113
2510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 1717              		.loc 1 2510 0
 1718 0042 0022     		movs	r2, #0
 1719 0044 5A23     		movs	r3, #90
 1720 0046 E252     		strh	r2, [r4, r3]
2511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 1721              		.loc 1 2511 0
 1722 0048 2000     		movs	r0, r4
 1723 004a FFF7FEFF 		bl	UART_EndRxTransfer
 1724              	.LVL123:
 1725 004e E1E7     		b	.L113
 1726              		.cfi_endproc
 1727              	.LFE82:
 1729              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 1730              		.align	1
 1731              		.syntax unified
 1732              		.code	16
 1733              		.thumb_func
 1734              		.fpu softvfp
 1736              	UART_DMAAbortOnError:
 1737              	.LFB83:
2517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
2522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1738              		.loc 1 2525 0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 0
 1741              		@ frame_needed = 0, uses_anonymous_args = 0
 1742              	.LVL124:
ARM GAS  /tmp/ccPtXKna.s 			page 79


 1743 0000 10B5     		push	{r4, lr}
 1744              	.LCFI14:
 1745              		.cfi_def_cfa_offset 8
 1746              		.cfi_offset 4, -8
 1747              		.cfi_offset 14, -4
2526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 1748              		.loc 1 2526 0
 1749 0002 406A     		ldr	r0, [r0, #36]
 1750              	.LVL125:
2527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1751              		.loc 1 2527 0
 1752 0004 0023     		movs	r3, #0
 1753 0006 5A22     		movs	r2, #90
 1754 0008 8352     		strh	r3, [r0, r2]
2528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 1755              		.loc 1 2528 0
 1756 000a 083A     		subs	r2, r2, #8
 1757 000c 8352     		strh	r3, [r0, r2]
2529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 1758              		.loc 1 2530 0
 1759 000e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 1760              	.LVL126:
2531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 1761              		.loc 1 2531 0
 1762              		@ sp needed
 1763 0012 10BD     		pop	{r4, pc}
 1764              		.cfi_endproc
 1765              	.LFE83:
 1767              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 1768              		.align	1
 1769              		.weak	HAL_UART_AbortCpltCallback
 1770              		.syntax unified
 1771              		.code	16
 1772              		.thumb_func
 1773              		.fpu softvfp
 1775              	HAL_UART_AbortCpltCallback:
 1776              	.LFB62:
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1777              		.loc 1 1886 0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
 1781              		@ link register save eliminated.
 1782              	.LVL127:
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1783              		.loc 1 1893 0
 1784              		@ sp needed
 1785 0000 7047     		bx	lr
 1786              		.cfi_endproc
 1787              	.LFE62:
 1789              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 1790              		.align	1
 1791              		.global	HAL_UART_Abort_IT
 1792              		.syntax unified
 1793              		.code	16
 1794              		.thumb_func
ARM GAS  /tmp/ccPtXKna.s 			page 80


 1795              		.fpu softvfp
 1797              	HAL_UART_Abort_IT:
 1798              	.LFB53:
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 1799              		.loc 1 1404 0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803              	.LVL128:
 1804 0000 10B5     		push	{r4, lr}
 1805              	.LCFI15:
 1806              		.cfi_def_cfa_offset 8
 1807              		.cfi_offset 4, -8
 1808              		.cfi_offset 14, -4
 1809 0002 0400     		movs	r4, r0
 1810              	.LVL129:
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1811              		.loc 1 1408 0
 1812 0004 0268     		ldr	r2, [r0]
 1813 0006 1368     		ldr	r3, [r2]
 1814 0008 3249     		ldr	r1, .L131
 1815 000a 0B40     		ands	r3, r1
 1816 000c 1360     		str	r3, [r2]
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1817              		.loc 1 1409 0
 1818 000e 0268     		ldr	r2, [r0]
 1819 0010 9368     		ldr	r3, [r2, #8]
 1820 0012 E331     		adds	r1, r1, #227
 1821 0014 FF31     		adds	r1, r1, #255
 1822 0016 8B43     		bics	r3, r1
 1823 0018 9360     		str	r3, [r2, #8]
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1824              		.loc 1 1414 0
 1825 001a 036E     		ldr	r3, [r0, #96]
 1826 001c 002B     		cmp	r3, #0
 1827 001e 05D0     		beq	.L119
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1828              		.loc 1 1418 0
 1829 0020 0268     		ldr	r2, [r0]
 1830 0022 9268     		ldr	r2, [r2, #8]
 1831 0024 1206     		lsls	r2, r2, #24
 1832 0026 1ED5     		bpl	.L120
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1833              		.loc 1 1420 0
 1834 0028 2B4A     		ldr	r2, .L131+4
 1835 002a 5A63     		str	r2, [r3, #52]
 1836              	.L119:
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1837              		.loc 1 1428 0
 1838 002c 636E     		ldr	r3, [r4, #100]
 1839 002e 002B     		cmp	r3, #0
 1840 0030 05D0     		beq	.L121
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1841              		.loc 1 1432 0
 1842 0032 2268     		ldr	r2, [r4]
 1843 0034 9268     		ldr	r2, [r2, #8]
 1844 0036 5206     		lsls	r2, r2, #25
ARM GAS  /tmp/ccPtXKna.s 			page 81


 1845 0038 18D5     		bpl	.L122
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1846              		.loc 1 1434 0
 1847 003a 284A     		ldr	r2, .L131+8
 1848 003c 5A63     		str	r2, [r3, #52]
 1849              	.L121:
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1850              		.loc 1 1443 0
 1851 003e 2368     		ldr	r3, [r4]
 1852 0040 9A68     		ldr	r2, [r3, #8]
 1853 0042 1206     		lsls	r2, r2, #24
 1854 0044 15D5     		bpl	.L126
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1855              		.loc 1 1446 0
 1856 0046 9A68     		ldr	r2, [r3, #8]
 1857 0048 8021     		movs	r1, #128
 1858 004a 8A43     		bics	r2, r1
 1859 004c 9A60     		str	r2, [r3, #8]
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1860              		.loc 1 1449 0
 1861 004e 206E     		ldr	r0, [r4, #96]
 1862              	.LVL130:
 1863 0050 0028     		cmp	r0, #0
 1864 0052 26D0     		beq	.L127
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 1865              		.loc 1 1455 0
 1866 0054 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 1867              	.LVL131:
 1868 0058 0028     		cmp	r0, #0
 1869 005a 24D0     		beq	.L128
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 1870              		.loc 1 1457 0
 1871 005c 236E     		ldr	r3, [r4, #96]
 1872 005e 0022     		movs	r2, #0
 1873 0060 5A63     		str	r2, [r3, #52]
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 1874              		.loc 1 1405 0
 1875 0062 0132     		adds	r2, r2, #1
 1876 0064 06E0     		b	.L123
 1877              	.LVL132:
 1878              	.L120:
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1879              		.loc 1 1424 0
 1880 0066 0022     		movs	r2, #0
 1881 0068 5A63     		str	r2, [r3, #52]
 1882 006a DFE7     		b	.L119
 1883              	.L122:
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 1884              		.loc 1 1438 0
 1885 006c 0022     		movs	r2, #0
 1886 006e 5A63     		str	r2, [r3, #52]
 1887 0070 E5E7     		b	.L121
 1888              	.L126:
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 1889              		.loc 1 1405 0
 1890 0072 0122     		movs	r2, #1
 1891              	.LVL133:
ARM GAS  /tmp/ccPtXKna.s 			page 82


 1892              	.L123:
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1893              		.loc 1 1467 0
 1894 0074 2368     		ldr	r3, [r4]
 1895 0076 9968     		ldr	r1, [r3, #8]
 1896 0078 4906     		lsls	r1, r1, #25
 1897 007a 0ED5     		bpl	.L124
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1898              		.loc 1 1469 0
 1899 007c 9968     		ldr	r1, [r3, #8]
 1900 007e 4020     		movs	r0, #64
 1901 0080 8143     		bics	r1, r0
 1902 0082 9960     		str	r1, [r3, #8]
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 1903              		.loc 1 1472 0
 1904 0084 606E     		ldr	r0, [r4, #100]
 1905 0086 0028     		cmp	r0, #0
 1906 0088 07D0     		beq	.L124
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 1907              		.loc 1 1478 0
 1908 008a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 1909              	.LVL134:
 1910 008e 0028     		cmp	r0, #0
 1911 0090 0BD0     		beq	.L129
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         abortcplt = 1U;
 1912              		.loc 1 1480 0
 1913 0092 636E     		ldr	r3, [r4, #100]
 1914 0094 0022     		movs	r2, #0
 1915 0096 5A63     		str	r2, [r3, #52]
 1916              	.LVL135:
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 1917              		.loc 1 1481 0
 1918 0098 0132     		adds	r2, r2, #1
 1919              	.LVL136:
 1920              	.L124:
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 1921              		.loc 1 1491 0
 1922 009a 012A     		cmp	r2, #1
 1923 009c 07D0     		beq	.L130
 1924              	.LVL137:
 1925              	.L125:
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1926              		.loc 1 1512 0
 1927 009e 0020     		movs	r0, #0
 1928              		@ sp needed
 1929              	.LVL138:
 1930 00a0 10BD     		pop	{r4, pc}
 1931              	.LVL139:
 1932              	.L127:
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 1933              		.loc 1 1405 0
 1934 00a2 0122     		movs	r2, #1
 1935 00a4 E6E7     		b	.L123
 1936              	.L128:
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 1937              		.loc 1 1461 0
 1938 00a6 0022     		movs	r2, #0
ARM GAS  /tmp/ccPtXKna.s 			page 83


 1939 00a8 E4E7     		b	.L123
 1940              	.LVL140:
 1941              	.L129:
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 1942              		.loc 1 1485 0
 1943 00aa 0022     		movs	r2, #0
 1944 00ac F5E7     		b	.L124
 1945              	.LVL141:
 1946              	.L130:
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = 0U;
 1947              		.loc 1 1494 0
 1948 00ae 0023     		movs	r3, #0
 1949 00b0 5132     		adds	r2, r2, #81
 1950              	.LVL142:
 1951 00b2 A352     		strh	r3, [r4, r2]
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1952              		.loc 1 1495 0
 1953 00b4 0832     		adds	r2, r2, #8
 1954              	.LVL143:
 1955 00b6 A352     		strh	r3, [r4, r2]
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1956              		.loc 1 1498 0
 1957 00b8 E366     		str	r3, [r4, #108]
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1958              		.loc 1 1501 0
 1959 00ba 2368     		ldr	r3, [r4]
 1960 00bc 4B3A     		subs	r2, r2, #75
 1961              	.LVL144:
 1962 00be 1A62     		str	r2, [r3, #32]
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1963              		.loc 1 1504 0
 1964 00c0 2023     		movs	r3, #32
 1965 00c2 5A32     		adds	r2, r2, #90
 1966              	.LVL145:
 1967 00c4 A354     		strb	r3, [r4, r2]
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 1968              		.loc 1 1505 0
 1969 00c6 0132     		adds	r2, r2, #1
 1970              	.LVL146:
 1971 00c8 A354     		strb	r3, [r4, r2]
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 1972              		.loc 1 1508 0
 1973 00ca 2000     		movs	r0, r4
 1974 00cc FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 1975              	.LVL147:
 1976 00d0 E5E7     		b	.L125
 1977              	.L132:
 1978 00d2 C046     		.align	2
 1979              	.L131:
 1980 00d4 1FFEFFFF 		.word	-481
 1981 00d8 00000000 		.word	UART_DMATxAbortCallback
 1982 00dc 00000000 		.word	UART_DMARxAbortCallback
 1983              		.cfi_endproc
 1984              	.LFE53:
 1986              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 1987              		.align	1
 1988              		.syntax unified
ARM GAS  /tmp/ccPtXKna.s 			page 84


 1989              		.code	16
 1990              		.thumb_func
 1991              		.fpu softvfp
 1993              	UART_DMARxAbortCallback:
 1994              	.LFB85:
2532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
2539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
2543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef* )(hdma->Parent);
2544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
2545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
2546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->hdmarx != NULL)
2549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmarx->XferAbortCallback != NULL)
2551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
2553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
2556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
2558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
2559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset errorCode */
2561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
2564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
2565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
2571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
2573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
2581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/ccPtXKna.s 			page 85


2584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 1995              		.loc 1 2584 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              	.LVL148:
 2000 0000 10B5     		push	{r4, lr}
 2001              	.LCFI16:
 2002              		.cfi_def_cfa_offset 8
 2003              		.cfi_offset 4, -8
 2004              		.cfi_offset 14, -4
2585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef* )(hdma->Parent);
 2005              		.loc 1 2585 0
 2006 0002 406A     		ldr	r0, [r0, #36]
 2007              	.LVL149:
2586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
2587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 2008              		.loc 1 2587 0
 2009 0004 436E     		ldr	r3, [r0, #100]
 2010 0006 0022     		movs	r2, #0
 2011 0008 5A63     		str	r2, [r3, #52]
2588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 2012              		.loc 1 2590 0
 2013 000a 036E     		ldr	r3, [r0, #96]
 2014 000c 002B     		cmp	r3, #0
 2015 000e 03D0     		beq	.L134
2591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->hdmatx->XferAbortCallback != NULL)
 2016              		.loc 1 2592 0
 2017 0010 5B6B     		ldr	r3, [r3, #52]
 2018 0012 002B     		cmp	r3, #0
 2019 0014 00D0     		beq	.L134
 2020              	.LVL150:
 2021              	.L133:
2593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
2595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
2598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
2600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
2601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Reset errorCode */
2603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
2606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
2607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
2613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
ARM GAS  /tmp/ccPtXKna.s 			page 86


2614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2022              		.loc 1 2614 0
 2023              		@ sp needed
 2024 0016 10BD     		pop	{r4, pc}
 2025              	.LVL151:
 2026              	.L134:
2599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2027              		.loc 1 2599 0
 2028 0018 0023     		movs	r3, #0
 2029 001a 5222     		movs	r2, #82
 2030 001c 8352     		strh	r3, [r0, r2]
2600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2031              		.loc 1 2600 0
 2032 001e 0832     		adds	r2, r2, #8
 2033 0020 8352     		strh	r3, [r0, r2]
2603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2034              		.loc 1 2603 0
 2035 0022 C366     		str	r3, [r0, #108]
2606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2036              		.loc 1 2606 0
 2037 0024 0368     		ldr	r3, [r0]
 2038 0026 4B3A     		subs	r2, r2, #75
 2039 0028 1A62     		str	r2, [r3, #32]
2609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2040              		.loc 1 2609 0
 2041 002a 2023     		movs	r3, #32
 2042 002c 5A32     		adds	r2, r2, #90
 2043 002e 8354     		strb	r3, [r0, r2]
2610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2044              		.loc 1 2610 0
 2045 0030 0132     		adds	r2, r2, #1
 2046 0032 8354     		strb	r3, [r0, r2]
2613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2047              		.loc 1 2613 0
 2048 0034 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2049              	.LVL152:
 2050 0038 EDE7     		b	.L133
 2051              		.cfi_endproc
 2052              	.LFE85:
 2054              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 2055              		.align	1
 2056              		.syntax unified
 2057              		.code	16
 2058              		.thumb_func
 2059              		.fpu softvfp
 2061              	UART_DMATxAbortCallback:
 2062              	.LFB84:
2542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef* )(hdma->Parent);
 2063              		.loc 1 2542 0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 2067              	.LVL153:
 2068 0000 10B5     		push	{r4, lr}
 2069              	.LCFI17:
 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 4, -8
ARM GAS  /tmp/ccPtXKna.s 			page 87


 2072              		.cfi_offset 14, -4
2543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2073              		.loc 1 2543 0
 2074 0002 406A     		ldr	r0, [r0, #36]
 2075              	.LVL154:
2545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2076              		.loc 1 2545 0
 2077 0004 036E     		ldr	r3, [r0, #96]
 2078 0006 0022     		movs	r2, #0
 2079 0008 5A63     		str	r2, [r3, #52]
2548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 2080              		.loc 1 2548 0
 2081 000a 436E     		ldr	r3, [r0, #100]
 2082 000c 002B     		cmp	r3, #0
 2083 000e 03D0     		beq	.L137
2550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2084              		.loc 1 2550 0
 2085 0010 5B6B     		ldr	r3, [r3, #52]
 2086 0012 002B     		cmp	r3, #0
 2087 0014 00D0     		beq	.L137
 2088              	.LVL155:
 2089              	.L136:
2572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2090              		.loc 1 2572 0
 2091              		@ sp needed
 2092 0016 10BD     		pop	{r4, pc}
 2093              	.LVL156:
 2094              	.L137:
2557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2095              		.loc 1 2557 0
 2096 0018 0023     		movs	r3, #0
 2097 001a 5222     		movs	r2, #82
 2098 001c 8352     		strh	r3, [r0, r2]
2558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2099              		.loc 1 2558 0
 2100 001e 0832     		adds	r2, r2, #8
 2101 0020 8352     		strh	r3, [r0, r2]
2561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2102              		.loc 1 2561 0
 2103 0022 C366     		str	r3, [r0, #108]
2564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2104              		.loc 1 2564 0
 2105 0024 0368     		ldr	r3, [r0]
 2106 0026 4B3A     		subs	r2, r2, #75
 2107 0028 1A62     		str	r2, [r3, #32]
2567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2108              		.loc 1 2567 0
 2109 002a 2023     		movs	r3, #32
 2110 002c 5A32     		adds	r2, r2, #90
 2111 002e 8354     		strb	r3, [r0, r2]
2568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2112              		.loc 1 2568 0
 2113 0030 0132     		adds	r2, r2, #1
 2114 0032 8354     		strb	r3, [r0, r2]
2571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2115              		.loc 1 2571 0
 2116 0034 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
ARM GAS  /tmp/ccPtXKna.s 			page 88


 2117              	.LVL157:
 2118 0038 EDE7     		b	.L136
 2119              		.cfi_endproc
 2120              	.LFE84:
 2122              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 2123              		.align	1
 2124              		.weak	HAL_UART_AbortTransmitCpltCallback
 2125              		.syntax unified
 2126              		.code	16
 2127              		.thumb_func
 2128              		.fpu softvfp
 2130              	HAL_UART_AbortTransmitCpltCallback:
 2131              	.LFB63:
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2132              		.loc 1 1901 0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 0
 2135              		@ frame_needed = 0, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 2137              	.LVL158:
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2138              		.loc 1 1908 0
 2139              		@ sp needed
 2140 0000 7047     		bx	lr
 2141              		.cfi_endproc
 2142              	.LFE63:
 2144              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2145              		.align	1
 2146              		.global	HAL_UART_AbortTransmit_IT
 2147              		.syntax unified
 2148              		.code	16
 2149              		.thumb_func
 2150              		.fpu softvfp
 2152              	HAL_UART_AbortTransmit_IT:
 2153              	.LFB54:
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 2154              		.loc 1 1529 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              	.LVL159:
 2159 0000 10B5     		push	{r4, lr}
 2160              	.LCFI18:
 2161              		.cfi_def_cfa_offset 8
 2162              		.cfi_offset 4, -8
 2163              		.cfi_offset 14, -4
 2164 0002 0400     		movs	r4, r0
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2165              		.loc 1 1531 0
 2166 0004 0268     		ldr	r2, [r0]
 2167 0006 1368     		ldr	r3, [r2]
 2168 0008 C021     		movs	r1, #192
 2169 000a 8B43     		bics	r3, r1
 2170 000c 1360     		str	r3, [r2]
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 2171              		.loc 1 1534 0
 2172 000e 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccPtXKna.s 			page 89


 2173 0010 9A68     		ldr	r2, [r3, #8]
 2174 0012 1206     		lsls	r2, r2, #24
 2175 0014 1CD5     		bpl	.L141
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2176              		.loc 1 1536 0
 2177 0016 9A68     		ldr	r2, [r3, #8]
 2178 0018 4039     		subs	r1, r1, #64
 2179 001a 8A43     		bics	r2, r1
 2180 001c 9A60     		str	r2, [r3, #8]
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2181              		.loc 1 1539 0
 2182 001e 036E     		ldr	r3, [r0, #96]
 2183 0020 002B     		cmp	r3, #0
 2184 0022 0CD0     		beq	.L142
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2185              		.loc 1 1543 0
 2186 0024 0F4A     		ldr	r2, .L145
 2187 0026 5A63     		str	r2, [r3, #52]
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 2188              		.loc 1 1546 0
 2189 0028 006E     		ldr	r0, [r0, #96]
 2190              	.LVL160:
 2191 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2192              	.LVL161:
 2193 002e 0028     		cmp	r0, #0
 2194 0030 01D1     		bne	.L144
 2195              	.L143:
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2196              		.loc 1 1577 0
 2197 0032 0020     		movs	r0, #0
 2198              		@ sp needed
 2199              	.LVL162:
 2200 0034 10BD     		pop	{r4, pc}
 2201              	.LVL163:
 2202              	.L144:
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 2203              		.loc 1 1549 0
 2204 0036 206E     		ldr	r0, [r4, #96]
 2205 0038 436B     		ldr	r3, [r0, #52]
 2206 003a 9847     		blx	r3
 2207              	.LVL164:
 2208 003c F9E7     		b	.L143
 2209              	.LVL165:
 2210              	.L142:
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2211              		.loc 1 1555 0
 2212 003e 0022     		movs	r2, #0
 2213 0040 5223     		movs	r3, #82
 2214 0042 C252     		strh	r2, [r0, r3]
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2215              		.loc 1 1558 0
 2216 0044 2032     		adds	r2, r2, #32
 2217 0046 1733     		adds	r3, r3, #23
 2218 0048 C254     		strb	r2, [r0, r3]
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 2219              		.loc 1 1561 0
 2220 004a FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
ARM GAS  /tmp/ccPtXKna.s 			page 90


 2221              	.LVL166:
 2222 004e F0E7     		b	.L143
 2223              	.LVL167:
 2224              	.L141:
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2225              		.loc 1 1567 0
 2226 0050 0022     		movs	r2, #0
 2227 0052 5223     		movs	r3, #82
 2228 0054 C252     		strh	r2, [r0, r3]
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2229              		.loc 1 1570 0
 2230 0056 2032     		adds	r2, r2, #32
 2231 0058 1733     		adds	r3, r3, #23
 2232 005a C254     		strb	r2, [r0, r3]
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 2233              		.loc 1 1573 0
 2234 005c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2235              	.LVL168:
 2236 0060 E7E7     		b	.L143
 2237              	.L146:
 2238 0062 C046     		.align	2
 2239              	.L145:
 2240 0064 00000000 		.word	UART_DMATxOnlyAbortCallback
 2241              		.cfi_endproc
 2242              	.LFE54:
 2244              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 2245              		.align	1
 2246              		.syntax unified
 2247              		.code	16
 2248              		.thumb_func
 2249              		.fpu softvfp
 2251              	UART_DMATxOnlyAbortCallback:
 2252              	.LFB86:
2615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
2623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2253              		.loc 1 2626 0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 0
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 2257              	.LVL169:
 2258 0000 10B5     		push	{r4, lr}
 2259              	.LCFI19:
 2260              		.cfi_def_cfa_offset 8
 2261              		.cfi_offset 4, -8
 2262              		.cfi_offset 14, -4
2627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 2263              		.loc 1 2627 0
ARM GAS  /tmp/ccPtXKna.s 			page 91


 2264 0002 406A     		ldr	r0, [r0, #36]
 2265              	.LVL170:
2628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2266              		.loc 1 2629 0
 2267 0004 0022     		movs	r2, #0
 2268 0006 5223     		movs	r3, #82
 2269 0008 C252     		strh	r2, [r0, r3]
2630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2270              		.loc 1 2632 0
 2271 000a 2032     		adds	r2, r2, #32
 2272 000c 1733     		adds	r3, r3, #23
 2273 000e C254     		strb	r2, [r0, r3]
2633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
2635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 2274              		.loc 1 2635 0
 2275 0010 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2276              	.LVL171:
2636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2277              		.loc 1 2636 0
 2278              		@ sp needed
 2279 0014 10BD     		pop	{r4, pc}
 2280              		.cfi_endproc
 2281              	.LFE86:
 2283              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 2284              		.align	1
 2285              		.weak	HAL_UART_AbortReceiveCpltCallback
 2286              		.syntax unified
 2287              		.code	16
 2288              		.thumb_func
 2289              		.fpu softvfp
 2291              	HAL_UART_AbortReceiveCpltCallback:
 2292              	.LFB64:
1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2293              		.loc 1 1916 0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 2298              	.LVL172:
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2299              		.loc 1 1923 0
 2300              		@ sp needed
 2301 0000 7047     		bx	lr
 2302              		.cfi_endproc
 2303              	.LFE64:
 2305              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2306              		.align	1
 2307              		.global	HAL_UART_AbortReceive_IT
 2308              		.syntax unified
 2309              		.code	16
 2310              		.thumb_func
 2311              		.fpu softvfp
 2313              	HAL_UART_AbortReceive_IT:
ARM GAS  /tmp/ccPtXKna.s 			page 92


 2314              	.LFB55:
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2315              		.loc 1 1594 0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 2319              	.LVL173:
 2320 0000 10B5     		push	{r4, lr}
 2321              	.LCFI20:
 2322              		.cfi_def_cfa_offset 8
 2323              		.cfi_offset 4, -8
 2324              		.cfi_offset 14, -4
 2325 0002 0400     		movs	r4, r0
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2326              		.loc 1 1596 0
 2327 0004 0268     		ldr	r2, [r0]
 2328 0006 1368     		ldr	r3, [r2]
 2329 0008 1B49     		ldr	r1, .L154
 2330 000a 0B40     		ands	r3, r1
 2331 000c 1360     		str	r3, [r2]
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2332              		.loc 1 1597 0
 2333 000e 0268     		ldr	r2, [r0]
 2334 0010 9368     		ldr	r3, [r2, #8]
 2335 0012 2331     		adds	r1, r1, #35
 2336 0014 FF31     		adds	r1, r1, #255
 2337 0016 8B43     		bics	r3, r1
 2338 0018 9360     		str	r3, [r2, #8]
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 2339              		.loc 1 1600 0
 2340 001a 0368     		ldr	r3, [r0]
 2341 001c 9A68     		ldr	r2, [r3, #8]
 2342 001e 5206     		lsls	r2, r2, #25
 2343 0020 1FD5     		bpl	.L150
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2344              		.loc 1 1602 0
 2345 0022 9A68     		ldr	r2, [r3, #8]
 2346 0024 3F31     		adds	r1, r1, #63
 2347 0026 8A43     		bics	r2, r1
 2348 0028 9A60     		str	r2, [r3, #8]
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2349              		.loc 1 1605 0
 2350 002a 436E     		ldr	r3, [r0, #100]
 2351 002c 002B     		cmp	r3, #0
 2352 002e 0CD0     		beq	.L151
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2353              		.loc 1 1609 0
 2354 0030 124A     		ldr	r2, .L154+4
 2355 0032 5A63     		str	r2, [r3, #52]
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 2356              		.loc 1 1612 0
 2357 0034 406E     		ldr	r0, [r0, #100]
 2358              	.LVL174:
 2359 0036 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2360              	.LVL175:
 2361 003a 0028     		cmp	r0, #0
 2362 003c 01D1     		bne	.L153
ARM GAS  /tmp/ccPtXKna.s 			page 93


 2363              	.L152:
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2364              		.loc 1 1649 0
 2365 003e 0020     		movs	r0, #0
 2366              		@ sp needed
 2367              	.LVL176:
 2368 0040 10BD     		pop	{r4, pc}
 2369              	.LVL177:
 2370              	.L153:
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 2371              		.loc 1 1615 0
 2372 0042 606E     		ldr	r0, [r4, #100]
 2373 0044 436B     		ldr	r3, [r0, #52]
 2374 0046 9847     		blx	r3
 2375              	.LVL178:
 2376 0048 F9E7     		b	.L152
 2377              	.LVL179:
 2378              	.L151:
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2379              		.loc 1 1621 0
 2380 004a 0022     		movs	r2, #0
 2381 004c 5A23     		movs	r3, #90
 2382 004e C252     		strh	r2, [r0, r3]
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2383              		.loc 1 1624 0
 2384 0050 0368     		ldr	r3, [r0]
 2385 0052 0F32     		adds	r2, r2, #15
 2386 0054 1A62     		str	r2, [r3, #32]
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2387              		.loc 1 1627 0
 2388 0056 1132     		adds	r2, r2, #17
 2389 0058 6A23     		movs	r3, #106
 2390 005a C254     		strb	r2, [r0, r3]
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 2391              		.loc 1 1630 0
 2392 005c FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2393              	.LVL180:
 2394 0060 EDE7     		b	.L152
 2395              	.LVL181:
 2396              	.L150:
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2397              		.loc 1 1636 0
 2398 0062 0021     		movs	r1, #0
 2399 0064 5A22     		movs	r2, #90
 2400 0066 8152     		strh	r1, [r0, r2]
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2401              		.loc 1 1639 0
 2402 0068 4B3A     		subs	r2, r2, #75
 2403 006a 1A62     		str	r2, [r3, #32]
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2404              		.loc 1 1642 0
 2405 006c 1132     		adds	r2, r2, #17
 2406 006e 6A23     		movs	r3, #106
 2407 0070 C254     		strb	r2, [r0, r3]
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 2408              		.loc 1 1645 0
 2409 0072 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
ARM GAS  /tmp/ccPtXKna.s 			page 94


 2410              	.LVL182:
 2411 0076 E2E7     		b	.L152
 2412              	.L155:
 2413              		.align	2
 2414              	.L154:
 2415 0078 DFFEFFFF 		.word	-289
 2416 007c 00000000 		.word	UART_DMARxOnlyAbortCallback
 2417              		.cfi_endproc
 2418              	.LFE55:
 2420              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 2421              		.align	1
 2422              		.syntax unified
 2423              		.code	16
 2424              		.thumb_func
 2425              		.fpu softvfp
 2427              	UART_DMARxOnlyAbortCallback:
 2428              	.LFB87:
2637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  hdma DMA handle.
2644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval None
2645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 2429              		.loc 1 2647 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 0
 2432              		@ frame_needed = 0, uses_anonymous_args = 0
 2433              	.LVL183:
 2434 0000 10B5     		push	{r4, lr}
 2435              	.LCFI21:
 2436              		.cfi_def_cfa_offset 8
 2437              		.cfi_offset 4, -8
 2438              		.cfi_offset 14, -4
2648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2439              		.loc 1 2648 0
 2440 0002 406A     		ldr	r0, [r0, #36]
 2441              	.LVL184:
2649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2442              		.loc 1 2650 0
 2443 0004 0022     		movs	r2, #0
 2444 0006 5A23     		movs	r3, #90
 2445 0008 C252     		strh	r2, [r0, r3]
2651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
2653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2446              		.loc 1 2653 0
 2447 000a 0368     		ldr	r3, [r0]
 2448 000c 0F32     		adds	r2, r2, #15
 2449 000e 1A62     		str	r2, [r3, #32]
2654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
ARM GAS  /tmp/ccPtXKna.s 			page 95


2656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2450              		.loc 1 2656 0
 2451 0010 1132     		adds	r2, r2, #17
 2452 0012 6A23     		movs	r3, #106
 2453 0014 C254     		strb	r2, [r0, r3]
2657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Call user Abort complete callback */
2659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 2454              		.loc 1 2659 0
 2455 0016 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2456              	.LVL185:
2660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2457              		.loc 1 2660 0
 2458              		@ sp needed
 2459 001a 10BD     		pop	{r4, pc}
 2460              		.cfi_endproc
 2461              	.LFE87:
 2463              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 2464              		.align	1
 2465              		.global	HAL_MultiProcessor_EnterMuteMode
 2466              		.syntax unified
 2467              		.code	16
 2468              		.thumb_func
 2469              		.fpu softvfp
 2471              	HAL_MultiProcessor_EnterMuteMode:
 2472              	.LFB67:
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 2473              		.loc 1 1996 0
 2474              		.cfi_startproc
 2475              		@ args = 0, pretend = 0, frame = 0
 2476              		@ frame_needed = 0, uses_anonymous_args = 0
 2477              		@ link register save eliminated.
 2478              	.LVL186:
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2479              		.loc 1 1997 0
 2480 0000 0268     		ldr	r2, [r0]
 2481 0002 9369     		ldr	r3, [r2, #24]
 2482 0004 0421     		movs	r1, #4
 2483 0006 0B43     		orrs	r3, r1
 2484 0008 9361     		str	r3, [r2, #24]
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2485              		.loc 1 1998 0
 2486              		@ sp needed
 2487 000a 7047     		bx	lr
 2488              		.cfi_endproc
 2489              	.LFE67:
 2491              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 2492              		.align	1
 2493              		.global	HAL_HalfDuplex_EnableTransmitter
 2494              		.syntax unified
 2495              		.code	16
 2496              		.thumb_func
 2497              		.fpu softvfp
 2499              	HAL_HalfDuplex_EnableTransmitter:
 2500              	.LFB68:
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
 2501              		.loc 1 2006 0
ARM GAS  /tmp/ccPtXKna.s 			page 96


 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 0, uses_anonymous_args = 0
 2505              	.LVL187:
 2506 0000 30B5     		push	{r4, r5, lr}
 2507              	.LCFI22:
 2508              		.cfi_def_cfa_offset 12
 2509              		.cfi_offset 4, -12
 2510              		.cfi_offset 5, -8
 2511              		.cfi_offset 14, -4
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2512              		.loc 1 2008 0
 2513 0002 6823     		movs	r3, #104
 2514 0004 C35C     		ldrb	r3, [r0, r3]
 2515 0006 012B     		cmp	r3, #1
 2516 0008 15D0     		beq	.L160
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2517              		.loc 1 2008 0 is_stmt 0 discriminator 2
 2518 000a 6822     		movs	r2, #104
 2519 000c 0123     		movs	r3, #1
 2520 000e 8354     		strb	r3, [r0, r2]
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2521              		.loc 1 2009 0 is_stmt 1 discriminator 2
 2522 0010 6921     		movs	r1, #105
 2523 0012 2333     		adds	r3, r3, #35
 2524 0014 4354     		strb	r3, [r0, r1]
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
 2525              		.loc 1 2012 0 discriminator 2
 2526 0016 0468     		ldr	r4, [r0]
 2527 0018 2368     		ldr	r3, [r4]
 2528 001a 0C25     		movs	r5, #12
 2529 001c AB43     		bics	r3, r5
 2530 001e 2360     		str	r3, [r4]
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2531              		.loc 1 2014 0 discriminator 2
 2532 0020 0468     		ldr	r4, [r0]
 2533 0022 2368     		ldr	r3, [r4]
 2534 0024 043D     		subs	r5, r5, #4
 2535 0026 2B43     		orrs	r3, r5
 2536 0028 2360     		str	r3, [r4]
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2537              		.loc 1 2016 0 discriminator 2
 2538 002a 2023     		movs	r3, #32
 2539 002c 4354     		strb	r3, [r0, r1]
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2540              		.loc 1 2019 0 discriminator 2
 2541 002e 0023     		movs	r3, #0
 2542 0030 8354     		strb	r3, [r0, r2]
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2543              		.loc 1 2021 0 discriminator 2
 2544 0032 0020     		movs	r0, #0
 2545              	.LVL188:
 2546              	.L159:
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2547              		.loc 1 2022 0
 2548              		@ sp needed
 2549 0034 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccPtXKna.s 			page 97


 2550              	.LVL189:
 2551              	.L160:
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2552              		.loc 1 2008 0
 2553 0036 0220     		movs	r0, #2
 2554              	.LVL190:
 2555 0038 FCE7     		b	.L159
 2556              		.cfi_endproc
 2557              	.LFE68:
 2559              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 2560              		.align	1
 2561              		.global	HAL_HalfDuplex_EnableReceiver
 2562              		.syntax unified
 2563              		.code	16
 2564              		.thumb_func
 2565              		.fpu softvfp
 2567              	HAL_HalfDuplex_EnableReceiver:
 2568              	.LFB69:
2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
 2569              		.loc 1 2030 0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 2573              	.LVL191:
 2574 0000 30B5     		push	{r4, r5, lr}
 2575              	.LCFI23:
 2576              		.cfi_def_cfa_offset 12
 2577              		.cfi_offset 4, -12
 2578              		.cfi_offset 5, -8
 2579              		.cfi_offset 14, -4
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2580              		.loc 1 2032 0
 2581 0002 6823     		movs	r3, #104
 2582 0004 C35C     		ldrb	r3, [r0, r3]
 2583 0006 012B     		cmp	r3, #1
 2584 0008 15D0     		beq	.L163
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2585              		.loc 1 2032 0 is_stmt 0 discriminator 2
 2586 000a 6822     		movs	r2, #104
 2587 000c 0123     		movs	r3, #1
 2588 000e 8354     		strb	r3, [r0, r2]
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2589              		.loc 1 2033 0 is_stmt 1 discriminator 2
 2590 0010 6921     		movs	r1, #105
 2591 0012 2333     		adds	r3, r3, #35
 2592 0014 4354     		strb	r3, [r0, r1]
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
 2593              		.loc 1 2036 0 discriminator 2
 2594 0016 0468     		ldr	r4, [r0]
 2595 0018 2368     		ldr	r3, [r4]
 2596 001a 0C25     		movs	r5, #12
 2597 001c AB43     		bics	r3, r5
 2598 001e 2360     		str	r3, [r4]
2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2599              		.loc 1 2038 0 discriminator 2
 2600 0020 0468     		ldr	r4, [r0]
 2601 0022 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccPtXKna.s 			page 98


 2602 0024 083D     		subs	r5, r5, #8
 2603 0026 2B43     		orrs	r3, r5
 2604 0028 2360     		str	r3, [r4]
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Unlocked */
 2605              		.loc 1 2040 0 discriminator 2
 2606 002a 2023     		movs	r3, #32
 2607 002c 4354     		strb	r3, [r0, r1]
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2608              		.loc 1 2042 0 discriminator 2
 2609 002e 0023     		movs	r3, #0
 2610 0030 8354     		strb	r3, [r0, r2]
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2611              		.loc 1 2044 0 discriminator 2
 2612 0032 0020     		movs	r0, #0
 2613              	.LVL192:
 2614              	.L162:
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2615              		.loc 1 2045 0
 2616              		@ sp needed
 2617 0034 30BD     		pop	{r4, r5, pc}
 2618              	.LVL193:
 2619              	.L163:
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 2620              		.loc 1 2032 0
 2621 0036 0220     		movs	r0, #2
 2622              	.LVL194:
 2623 0038 FCE7     		b	.L162
 2624              		.cfi_endproc
 2625              	.LFE69:
 2627              		.section	.text.HAL_UART_GetState,"ax",%progbits
 2628              		.align	1
 2629              		.global	HAL_UART_GetState
 2630              		.syntax unified
 2631              		.code	16
 2632              		.thumb_func
 2633              		.fpu softvfp
 2635              	HAL_UART_GetState:
 2636              	.LFB70:
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
 2637              		.loc 1 2074 0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 0
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641              		@ link register save eliminated.
 2642              	.LVL195:
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   temp2 = huart->RxState;
 2643              		.loc 1 2076 0
 2644 0000 6923     		movs	r3, #105
 2645 0002 C35C     		ldrb	r3, [r0, r3]
 2646              	.LVL196:
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2647              		.loc 1 2077 0
 2648 0004 6A22     		movs	r2, #106
 2649 0006 805C     		ldrb	r0, [r0, r2]
 2650              	.LVL197:
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2651              		.loc 1 2079 0
ARM GAS  /tmp/ccPtXKna.s 			page 99


 2652 0008 1843     		orrs	r0, r3
 2653              	.LVL198:
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2654              		.loc 1 2080 0
 2655              		@ sp needed
 2656 000a 7047     		bx	lr
 2657              		.cfi_endproc
 2658              	.LFE70:
 2660              		.section	.text.HAL_UART_GetError,"ax",%progbits
 2661              		.align	1
 2662              		.global	HAL_UART_GetError
 2663              		.syntax unified
 2664              		.code	16
 2665              		.thumb_func
 2666              		.fpu softvfp
 2668              	HAL_UART_GetError:
 2669              	.LFB71:
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return huart->ErrorCode;
 2670              		.loc 1 2089 0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 0
 2673              		@ frame_needed = 0, uses_anonymous_args = 0
 2674              		@ link register save eliminated.
 2675              	.LVL199:
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 2676              		.loc 1 2090 0
 2677 0000 C06E     		ldr	r0, [r0, #108]
 2678              	.LVL200:
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
 2679              		.loc 1 2091 0
 2680              		@ sp needed
 2681 0002 7047     		bx	lr
 2682              		.cfi_endproc
 2683              	.LFE71:
 2685              		.global	__aeabi_uidiv
 2686              		.section	.text.UART_SetConfig,"ax",%progbits
 2687              		.align	1
 2688              		.global	UART_SetConfig
 2689              		.syntax unified
 2690              		.code	16
 2691              		.thumb_func
 2692              		.fpu softvfp
 2694              	UART_SetConfig:
 2695              	.LFB72:
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t tmpreg                     = 0x00000000U;
 2696              		.loc 1 2110 0
 2697              		.cfi_startproc
 2698              		@ args = 0, pretend = 0, frame = 0
 2699              		@ frame_needed = 0, uses_anonymous_args = 0
 2700              	.LVL201:
 2701 0000 70B5     		push	{r4, r5, r6, lr}
 2702              	.LCFI24:
 2703              		.cfi_def_cfa_offset 16
 2704              		.cfi_offset 4, -16
 2705              		.cfi_offset 5, -12
 2706              		.cfi_offset 6, -8
 2707              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPtXKna.s 			page 100


 2708 0002 0400     		movs	r4, r0
 2709              	.LVL202:
2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 2710              		.loc 1 2135 0
 2711 0004 8368     		ldr	r3, [r0, #8]
 2712 0006 0269     		ldr	r2, [r0, #16]
 2713 0008 1343     		orrs	r3, r2
 2714 000a 4269     		ldr	r2, [r0, #20]
 2715 000c 1343     		orrs	r3, r2
 2716 000e C269     		ldr	r2, [r0, #28]
 2717 0010 1343     		orrs	r3, r2
 2718              	.LVL203:
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2719              		.loc 1 2136 0
 2720 0012 0168     		ldr	r1, [r0]
 2721 0014 0A68     		ldr	r2, [r1]
 2722 0016 5F48     		ldr	r0, .L196
 2723              	.LVL204:
 2724 0018 0240     		ands	r2, r0
 2725 001a 1343     		orrs	r3, r2
 2726              	.LVL205:
 2727 001c 0B60     		str	r3, [r1]
 2728              	.LVL206:
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2729              		.loc 1 2141 0
 2730 001e 2268     		ldr	r2, [r4]
 2731 0020 5368     		ldr	r3, [r2, #4]
 2732 0022 5D49     		ldr	r1, .L196+4
 2733 0024 0B40     		ands	r3, r1
 2734 0026 E168     		ldr	r1, [r4, #12]
 2735 0028 0B43     		orrs	r3, r1
 2736 002a 5360     		str	r3, [r2, #4]
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 2737              		.loc 1 2149 0
 2738 002c A369     		ldr	r3, [r4, #24]
 2739 002e 226A     		ldr	r2, [r4, #32]
 2740 0030 1343     		orrs	r3, r2
 2741              	.LVL207:
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2742              		.loc 1 2150 0
 2743 0032 2168     		ldr	r1, [r4]
 2744 0034 8A68     		ldr	r2, [r1, #8]
 2745 0036 5948     		ldr	r0, .L196+8
 2746 0038 0240     		ands	r2, r0
 2747 003a 1343     		orrs	r3, r2
 2748              	.LVL208:
 2749 003c 8B60     		str	r3, [r1, #8]
 2750              	.LVL209:
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2751              		.loc 1 2153 0
 2752 003e 2568     		ldr	r5, [r4]
 2753 0040 574B     		ldr	r3, .L196+12
 2754 0042 9D42     		cmp	r5, r3
 2755 0044 20D0     		beq	.L191
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2756              		.loc 1 2153 0 is_stmt 0 discriminator 2
 2757 0046 574B     		ldr	r3, .L196+16
ARM GAS  /tmp/ccPtXKna.s 			page 101


 2758 0048 9D42     		cmp	r5, r3
 2759 004a 31D0     		beq	.L192
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2760              		.loc 1 2153 0
 2761 004c 1023     		movs	r3, #16
 2762              	.LVL210:
 2763              	.L172:
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 2764              		.loc 1 2156 0 is_stmt 1
 2765 004e 8022     		movs	r2, #128
 2766 0050 1202     		lsls	r2, r2, #8
 2767 0052 E169     		ldr	r1, [r4, #28]
 2768 0054 9142     		cmp	r1, r2
 2769 0056 2FD0     		beq	.L193
2184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2770              		.loc 1 2184 0
 2771 0058 022B     		cmp	r3, #2
 2772 005a 00D1     		bne	.LCB2327
 2773 005c 7FE0     		b	.L181	@long jump
 2774              	.LCB2327:
 2775 005e 00D8     		bhi	.LCB2329
 2776 0060 6FE0     		b	.L194	@long jump
 2777              	.LCB2329:
 2778 0062 042B     		cmp	r3, #4
 2779 0064 00D1     		bne	.LCB2331
 2780 0066 86E0     		b	.L184	@long jump
 2781              	.LCB2331:
 2782 0068 082B     		cmp	r3, #8
 2783 006a 00D0     		beq	.LCB2333
 2784 006c 8FE0     		b	.L189	@long jump
 2785              	.LCB2333:
2196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2786              		.loc 1 2196 0
 2787 006e 6168     		ldr	r1, [r4, #4]
 2788 0070 4808     		lsrs	r0, r1, #1
 2789 0072 8023     		movs	r3, #128
 2790              	.LVL211:
 2791 0074 1B02     		lsls	r3, r3, #8
 2792 0076 9C46     		mov	ip, r3
 2793 0078 6044     		add	r0, r0, ip
 2794 007a FFF7FEFF 		bl	__aeabi_uidiv
 2795              	.LVL212:
 2796 007e 0004     		lsls	r0, r0, #16
 2797 0080 000C     		lsrs	r0, r0, #16
 2798 0082 E860     		str	r0, [r5, #12]
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2799              		.loc 1 2115 0
 2800 0084 0020     		movs	r0, #0
2197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 2801              		.loc 1 2197 0
 2802 0086 41E0     		b	.L180
 2803              	.LVL213:
 2804              	.L191:
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2805              		.loc 1 2153 0 discriminator 1
 2806 0088 474B     		ldr	r3, .L196+20
 2807 008a 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccPtXKna.s 			page 102


 2808 008c 0323     		movs	r3, #3
 2809 008e 1340     		ands	r3, r2
 2810 0090 012B     		cmp	r3, #1
 2811 0092 09D0     		beq	.L169
 2812 0094 002B     		cmp	r3, #0
 2813 0096 05D0     		beq	.L170
 2814 0098 022B     		cmp	r3, #2
 2815 009a 07D0     		beq	.L171
 2816 009c 032B     		cmp	r3, #3
 2817 009e 09D0     		beq	.L186
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2818              		.loc 1 2153 0 is_stmt 0 discriminator 3
 2819 00a0 1023     		movs	r3, #16
 2820 00a2 D4E7     		b	.L172
 2821              	.L170:
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2822              		.loc 1 2153 0
 2823 00a4 0023     		movs	r3, #0
 2824 00a6 D2E7     		b	.L172
 2825              	.L169:
 2826              	.LVL214:
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2827              		.loc 1 2153 0 discriminator 5
 2828 00a8 0423     		movs	r3, #4
 2829 00aa D0E7     		b	.L172
 2830              	.LVL215:
 2831              	.L171:
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2832              		.loc 1 2153 0 discriminator 6
 2833 00ac 0823     		movs	r3, #8
 2834 00ae CEE7     		b	.L172
 2835              	.LVL216:
 2836              	.L192:
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   
 2837              		.loc 1 2153 0
 2838 00b0 0023     		movs	r3, #0
 2839 00b2 CCE7     		b	.L172
 2840              	.L186:
 2841 00b4 0223     		movs	r3, #2
 2842 00b6 CAE7     		b	.L172
 2843              	.LVL217:
 2844              	.L193:
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2845              		.loc 1 2158 0 is_stmt 1
 2846 00b8 022B     		cmp	r3, #2
 2847 00ba 28D0     		beq	.L175
 2848 00bc 0FD9     		bls	.L195
 2849 00be 042B     		cmp	r3, #4
 2850 00c0 30D0     		beq	.L178
 2851 00c2 082B     		cmp	r3, #8
 2852 00c4 3AD1     		bne	.L188
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2853              		.loc 1 2170 0
 2854 00c6 6368     		ldr	r3, [r4, #4]
 2855              	.LVL218:
 2856 00c8 5808     		lsrs	r0, r3, #1
 2857 00ca 8023     		movs	r3, #128
ARM GAS  /tmp/ccPtXKna.s 			page 103


 2858 00cc 5B02     		lsls	r3, r3, #9
 2859 00ce 9C46     		mov	ip, r3
 2860 00d0 6044     		add	r0, r0, ip
 2861 00d2 6168     		ldr	r1, [r4, #4]
 2862 00d4 FFF7FEFF 		bl	__aeabi_uidiv
 2863              	.LVL219:
 2864 00d8 83B2     		uxth	r3, r0
 2865              	.LVL220:
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2866              		.loc 1 2115 0
 2867 00da 0020     		movs	r0, #0
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 2868              		.loc 1 2171 0
 2869 00dc 0CE0     		b	.L174
 2870              	.LVL221:
 2871              	.L195:
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2872              		.loc 1 2158 0
 2873 00de 002B     		cmp	r3, #0
 2874 00e0 2CD1     		bne	.L188
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2875              		.loc 1 2161 0
 2876 00e2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 2877              	.LVL222:
 2878 00e6 4000     		lsls	r0, r0, #1
 2879 00e8 6368     		ldr	r3, [r4, #4]
 2880 00ea 5B08     		lsrs	r3, r3, #1
 2881 00ec C018     		adds	r0, r0, r3
 2882 00ee 6168     		ldr	r1, [r4, #4]
 2883 00f0 FFF7FEFF 		bl	__aeabi_uidiv
 2884              	.LVL223:
 2885 00f4 83B2     		uxth	r3, r0
 2886              	.LVL224:
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2887              		.loc 1 2115 0
 2888 00f6 0020     		movs	r0, #0
 2889              	.LVL225:
 2890              	.L174:
2178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 2891              		.loc 1 2178 0
 2892 00f8 0F22     		movs	r2, #15
 2893 00fa 1900     		movs	r1, r3
 2894 00fc 9143     		bics	r1, r2
 2895 00fe 0A00     		movs	r2, r1
 2896              	.LVL226:
2179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->Instance->BRR = brrtemp;
 2897              		.loc 1 2179 0
 2898 0100 5B10     		asrs	r3, r3, #1
 2899              	.LVL227:
 2900 0102 0721     		movs	r1, #7
 2901 0104 0B40     		ands	r3, r1
 2902 0106 1343     		orrs	r3, r2
 2903              	.LVL228:
2180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 2904              		.loc 1 2180 0
 2905 0108 2268     		ldr	r2, [r4]
 2906 010a D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccPtXKna.s 			page 104


 2907              	.LVL229:
 2908              	.L180:
2207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2909              		.loc 1 2207 0
 2910              		@ sp needed
 2911              	.LVL230:
 2912 010c 70BD     		pop	{r4, r5, r6, pc}
 2913              	.LVL231:
 2914              	.L175:
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2915              		.loc 1 2164 0
 2916 010e 6368     		ldr	r3, [r4, #4]
 2917              	.LVL232:
 2918 0110 5808     		lsrs	r0, r3, #1
 2919 0112 264B     		ldr	r3, .L196+24
 2920 0114 9C46     		mov	ip, r3
 2921 0116 6044     		add	r0, r0, ip
 2922 0118 6168     		ldr	r1, [r4, #4]
 2923 011a FFF7FEFF 		bl	__aeabi_uidiv
 2924              	.LVL233:
 2925 011e 83B2     		uxth	r3, r0
 2926              	.LVL234:
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2927              		.loc 1 2115 0
 2928 0120 0020     		movs	r0, #0
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
 2929              		.loc 1 2165 0
 2930 0122 E9E7     		b	.L174
 2931              	.LVL235:
 2932              	.L178:
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2933              		.loc 1 2167 0
 2934 0124 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 2935              	.LVL236:
 2936 0128 4000     		lsls	r0, r0, #1
 2937 012a 6368     		ldr	r3, [r4, #4]
 2938 012c 5B08     		lsrs	r3, r3, #1
 2939 012e C018     		adds	r0, r0, r3
 2940 0130 6168     		ldr	r1, [r4, #4]
 2941 0132 FFF7FEFF 		bl	__aeabi_uidiv
 2942              	.LVL237:
 2943 0136 83B2     		uxth	r3, r0
 2944              	.LVL238:
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2945              		.loc 1 2115 0
 2946 0138 0020     		movs	r0, #0
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 2947              		.loc 1 2168 0
 2948 013a DDE7     		b	.L174
 2949              	.LVL239:
 2950              	.L188:
2174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2951              		.loc 1 2174 0
 2952 013c 0120     		movs	r0, #1
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 2953              		.loc 1 2114 0
 2954 013e 0023     		movs	r3, #0
ARM GAS  /tmp/ccPtXKna.s 			page 105


 2955              	.LVL240:
 2956 0140 DAE7     		b	.L174
 2957              	.LVL241:
 2958              	.L194:
2184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 2959              		.loc 1 2184 0
 2960 0142 002B     		cmp	r3, #0
 2961 0144 23D1     		bne	.L189
2187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2962              		.loc 1 2187 0
 2963 0146 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 2964              	.LVL242:
 2965 014a 6168     		ldr	r1, [r4, #4]
 2966 014c 4B08     		lsrs	r3, r1, #1
 2967 014e C018     		adds	r0, r0, r3
 2968 0150 FFF7FEFF 		bl	__aeabi_uidiv
 2969              	.LVL243:
 2970 0154 0004     		lsls	r0, r0, #16
 2971 0156 000C     		lsrs	r0, r0, #16
 2972 0158 E860     		str	r0, [r5, #12]
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2973              		.loc 1 2115 0
 2974 015a 0020     		movs	r0, #0
2188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 2975              		.loc 1 2188 0
 2976 015c D6E7     		b	.L180
 2977              	.LVL244:
 2978              	.L181:
2190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2979              		.loc 1 2190 0
 2980 015e 6168     		ldr	r1, [r4, #4]
 2981 0160 4808     		lsrs	r0, r1, #1
 2982 0162 134B     		ldr	r3, .L196+28
 2983              	.LVL245:
 2984 0164 9C46     		mov	ip, r3
 2985 0166 6044     		add	r0, r0, ip
 2986 0168 FFF7FEFF 		bl	__aeabi_uidiv
 2987              	.LVL246:
 2988 016c 0004     		lsls	r0, r0, #16
 2989 016e 000C     		lsrs	r0, r0, #16
 2990 0170 E860     		str	r0, [r5, #12]
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 2991              		.loc 1 2115 0
 2992 0172 0020     		movs	r0, #0
2191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
 2993              		.loc 1 2191 0
 2994 0174 CAE7     		b	.L180
 2995              	.LVL247:
 2996              	.L184:
2193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 2997              		.loc 1 2193 0
 2998 0176 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 2999              	.LVL248:
 3000 017a 6168     		ldr	r1, [r4, #4]
 3001 017c 4B08     		lsrs	r3, r1, #1
 3002 017e C018     		adds	r0, r0, r3
 3003 0180 FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  /tmp/ccPtXKna.s 			page 106


 3004              	.LVL249:
 3005 0184 0004     		lsls	r0, r0, #16
 3006 0186 000C     		lsrs	r0, r0, #16
 3007 0188 E860     		str	r0, [r5, #12]
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3008              		.loc 1 2115 0
 3009 018a 0020     		movs	r0, #0
2194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
 3010              		.loc 1 2194 0
 3011 018c BEE7     		b	.L180
 3012              	.LVL250:
 3013              	.L189:
2200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         break;
 3014              		.loc 1 2200 0
 3015 018e 0120     		movs	r0, #1
 3016 0190 BCE7     		b	.L180
 3017              	.L197:
 3018 0192 C046     		.align	2
 3019              	.L196:
 3020 0194 F369FFFF 		.word	-38413
 3021 0198 FFCFFFFF 		.word	-12289
 3022 019c FFF4FFFF 		.word	-2817
 3023 01a0 00380140 		.word	1073821696
 3024 01a4 00440040 		.word	1073759232
 3025 01a8 00100240 		.word	1073876992
 3026 01ac 0024F400 		.word	16000000
 3027 01b0 00127A00 		.word	8000000
 3028              		.cfi_endproc
 3029              	.LFE72:
 3031              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 3032              		.align	1
 3033              		.global	UART_AdvFeatureConfig
 3034              		.syntax unified
 3035              		.code	16
 3036              		.thumb_func
 3037              		.fpu softvfp
 3039              	UART_AdvFeatureConfig:
 3040              	.LFB73:
2215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
 3041              		.loc 1 2215 0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 0
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 3045              		@ link register save eliminated.
 3046              	.LVL251:
2220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3047              		.loc 1 2220 0
 3048 0000 436A     		ldr	r3, [r0, #36]
 3049 0002 DB07     		lsls	r3, r3, #31
 3050 0004 06D5     		bpl	.L199
2223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3051              		.loc 1 2223 0
 3052 0006 0268     		ldr	r2, [r0]
 3053 0008 5368     		ldr	r3, [r2, #4]
 3054 000a 2C49     		ldr	r1, .L208
 3055 000c 0B40     		ands	r3, r1
 3056 000e 816A     		ldr	r1, [r0, #40]
ARM GAS  /tmp/ccPtXKna.s 			page 107


 3057 0010 0B43     		orrs	r3, r1
 3058 0012 5360     		str	r3, [r2, #4]
 3059              	.L199:
2227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3060              		.loc 1 2227 0
 3061 0014 436A     		ldr	r3, [r0, #36]
 3062 0016 9B07     		lsls	r3, r3, #30
 3063 0018 06D5     		bpl	.L200
2230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3064              		.loc 1 2230 0
 3065 001a 0268     		ldr	r2, [r0]
 3066 001c 5368     		ldr	r3, [r2, #4]
 3067 001e 2849     		ldr	r1, .L208+4
 3068 0020 0B40     		ands	r3, r1
 3069 0022 C16A     		ldr	r1, [r0, #44]
 3070 0024 0B43     		orrs	r3, r1
 3071 0026 5360     		str	r3, [r2, #4]
 3072              	.L200:
2234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3073              		.loc 1 2234 0
 3074 0028 436A     		ldr	r3, [r0, #36]
 3075 002a 5B07     		lsls	r3, r3, #29
 3076 002c 06D5     		bpl	.L201
2237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3077              		.loc 1 2237 0
 3078 002e 0268     		ldr	r2, [r0]
 3079 0030 5368     		ldr	r3, [r2, #4]
 3080 0032 2449     		ldr	r1, .L208+8
 3081 0034 0B40     		ands	r3, r1
 3082 0036 016B     		ldr	r1, [r0, #48]
 3083 0038 0B43     		orrs	r3, r1
 3084 003a 5360     		str	r3, [r2, #4]
 3085              	.L201:
2241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3086              		.loc 1 2241 0
 3087 003c 436A     		ldr	r3, [r0, #36]
 3088 003e 1B07     		lsls	r3, r3, #28
 3089 0040 06D5     		bpl	.L202
2244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3090              		.loc 1 2244 0
 3091 0042 0268     		ldr	r2, [r0]
 3092 0044 5368     		ldr	r3, [r2, #4]
 3093 0046 2049     		ldr	r1, .L208+12
 3094 0048 0B40     		ands	r3, r1
 3095 004a 416B     		ldr	r1, [r0, #52]
 3096 004c 0B43     		orrs	r3, r1
 3097 004e 5360     		str	r3, [r2, #4]
 3098              	.L202:
2248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3099              		.loc 1 2248 0
 3100 0050 436A     		ldr	r3, [r0, #36]
 3101 0052 DB06     		lsls	r3, r3, #27
 3102 0054 06D5     		bpl	.L203
2251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3103              		.loc 1 2251 0
 3104 0056 0268     		ldr	r2, [r0]
 3105 0058 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/ccPtXKna.s 			page 108


 3106 005a 1C49     		ldr	r1, .L208+16
 3107 005c 0B40     		ands	r3, r1
 3108 005e 816B     		ldr	r1, [r0, #56]
 3109 0060 0B43     		orrs	r3, r1
 3110 0062 9360     		str	r3, [r2, #8]
 3111              	.L203:
2255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3112              		.loc 1 2255 0
 3113 0064 436A     		ldr	r3, [r0, #36]
 3114 0066 9B06     		lsls	r3, r3, #26
 3115 0068 06D5     		bpl	.L204
2258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3116              		.loc 1 2258 0
 3117 006a 0268     		ldr	r2, [r0]
 3118 006c 9368     		ldr	r3, [r2, #8]
 3119 006e 1849     		ldr	r1, .L208+20
 3120 0070 0B40     		ands	r3, r1
 3121 0072 C16B     		ldr	r1, [r0, #60]
 3122 0074 0B43     		orrs	r3, r1
 3123 0076 9360     		str	r3, [r2, #8]
 3124              	.L204:
2262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3125              		.loc 1 2262 0
 3126 0078 436A     		ldr	r3, [r0, #36]
 3127 007a 5B06     		lsls	r3, r3, #25
 3128 007c 0BD5     		bpl	.L205
2266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
 3129              		.loc 1 2266 0
 3130 007e 0268     		ldr	r2, [r0]
 3131 0080 5368     		ldr	r3, [r2, #4]
 3132 0082 1449     		ldr	r1, .L208+24
 3133 0084 0B40     		ands	r3, r1
 3134 0086 016C     		ldr	r1, [r0, #64]
 3135 0088 0B43     		orrs	r3, r1
 3136 008a 5360     		str	r3, [r2, #4]
2268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3137              		.loc 1 2268 0
 3138 008c 8023     		movs	r3, #128
 3139 008e 5B03     		lsls	r3, r3, #13
 3140 0090 026C     		ldr	r2, [r0, #64]
 3141 0092 9A42     		cmp	r2, r3
 3142 0094 0AD0     		beq	.L207
 3143              	.L205:
2276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3144              		.loc 1 2276 0
 3145 0096 436A     		ldr	r3, [r0, #36]
 3146 0098 1B06     		lsls	r3, r3, #24
 3147 009a 06D5     		bpl	.L198
2279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3148              		.loc 1 2279 0
 3149 009c 0268     		ldr	r2, [r0]
 3150 009e 5368     		ldr	r3, [r2, #4]
 3151 00a0 0D49     		ldr	r1, .L208+28
 3152 00a2 0B40     		ands	r3, r1
 3153 00a4 816C     		ldr	r1, [r0, #72]
 3154 00a6 0B43     		orrs	r3, r1
 3155 00a8 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccPtXKna.s 			page 109


 3156              	.L198:
2281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3157              		.loc 1 2281 0
 3158              		@ sp needed
 3159 00aa 7047     		bx	lr
 3160              	.L207:
2271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 3161              		.loc 1 2271 0
 3162 00ac 0268     		ldr	r2, [r0]
 3163 00ae 5368     		ldr	r3, [r2, #4]
 3164 00b0 0A49     		ldr	r1, .L208+32
 3165 00b2 0B40     		ands	r3, r1
 3166 00b4 416C     		ldr	r1, [r0, #68]
 3167 00b6 0B43     		orrs	r3, r1
 3168 00b8 5360     		str	r3, [r2, #4]
 3169 00ba ECE7     		b	.L205
 3170              	.L209:
 3171              		.align	2
 3172              	.L208:
 3173 00bc FFFFFDFF 		.word	-131073
 3174 00c0 FFFFFEFF 		.word	-65537
 3175 00c4 FFFFFBFF 		.word	-262145
 3176 00c8 FF7FFFFF 		.word	-32769
 3177 00cc FFEFFFFF 		.word	-4097
 3178 00d0 FFDFFFFF 		.word	-8193
 3179 00d4 FFFFEFFF 		.word	-1048577
 3180 00d8 FFFFF7FF 		.word	-524289
 3181 00dc FFFF9FFF 		.word	-6291457
 3182              		.cfi_endproc
 3183              	.LFE73:
 3185              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 3186              		.align	1
 3187              		.global	UART_WaitOnFlagUntilTimeout
 3188              		.syntax unified
 3189              		.code	16
 3190              		.thumb_func
 3191              		.fpu softvfp
 3193              	UART_WaitOnFlagUntilTimeout:
 3194              	.LFB75:
2350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Wait until flag is set */
 3195              		.loc 1 2350 0
 3196              		.cfi_startproc
 3197              		@ args = 4, pretend = 0, frame = 0
 3198              		@ frame_needed = 0, uses_anonymous_args = 0
 3199              	.LVL252:
 3200 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3201              	.LCFI25:
 3202              		.cfi_def_cfa_offset 20
 3203              		.cfi_offset 4, -20
 3204              		.cfi_offset 5, -16
 3205              		.cfi_offset 6, -12
 3206              		.cfi_offset 7, -8
 3207              		.cfi_offset 14, -4
 3208 0002 C646     		mov	lr, r8
 3209 0004 00B5     		push	{lr}
 3210              	.LCFI26:
 3211              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccPtXKna.s 			page 110


 3212              		.cfi_offset 8, -24
 3213 0006 0500     		movs	r5, r0
 3214 0008 0F00     		movs	r7, r1
 3215 000a 1600     		movs	r6, r2
 3216 000c 9846     		mov	r8, r3
 3217 000e 069C     		ldr	r4, [sp, #24]
 3218              	.LVL253:
 3219              	.L212:
2352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3220              		.loc 1 2352 0
 3221 0010 2B68     		ldr	r3, [r5]
 3222 0012 DB69     		ldr	r3, [r3, #28]
 3223 0014 3A00     		movs	r2, r7
 3224 0016 9A43     		bics	r2, r3
 3225 0018 1300     		movs	r3, r2
 3226 001a 5A42     		rsbs	r2, r3, #0
 3227 001c 5341     		adcs	r3, r3, r2
 3228 001e B342     		cmp	r3, r6
 3229 0020 1ED1     		bne	.L216
2355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3230              		.loc 1 2355 0
 3231 0022 631C     		adds	r3, r4, #1
 3232 0024 F4D0     		beq	.L212
2357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3233              		.loc 1 2357 0
 3234 0026 002C     		cmp	r4, #0
 3235 0028 05D0     		beq	.L213
2357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3236              		.loc 1 2357 0 is_stmt 0 discriminator 1
 3237 002a FFF7FEFF 		bl	HAL_GetTick
 3238              	.LVL254:
 3239 002e 4346     		mov	r3, r8
 3240 0030 C01A     		subs	r0, r0, r3
 3241 0032 8442     		cmp	r4, r0
 3242 0034 ECD2     		bcs	.L212
 3243              	.L213:
2360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3244              		.loc 1 2360 0 is_stmt 1
 3245 0036 2A68     		ldr	r2, [r5]
 3246 0038 1368     		ldr	r3, [r2]
 3247 003a 0B49     		ldr	r1, .L217
 3248 003c 0B40     		ands	r3, r1
 3249 003e 1360     		str	r3, [r2]
2361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3250              		.loc 1 2361 0
 3251 0040 2A68     		ldr	r2, [r5]
 3252 0042 9368     		ldr	r3, [r2, #8]
 3253 0044 A331     		adds	r1, r1, #163
 3254 0046 FF31     		adds	r1, r1, #255
 3255 0048 8B43     		bics	r3, r1
 3256 004a 9360     		str	r3, [r2, #8]
2363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 3257              		.loc 1 2363 0
 3258 004c 2023     		movs	r3, #32
 3259 004e 6922     		movs	r2, #105
 3260 0050 AB54     		strb	r3, [r5, r2]
2364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 111


 3261              		.loc 1 2364 0
 3262 0052 0132     		adds	r2, r2, #1
 3263 0054 AB54     		strb	r3, [r5, r2]
2367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         return HAL_TIMEOUT;
 3264              		.loc 1 2367 0
 3265 0056 0022     		movs	r2, #0
 3266 0058 4833     		adds	r3, r3, #72
 3267 005a EA54     		strb	r2, [r5, r3]
2368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3268              		.loc 1 2368 0
 3269 005c 0320     		movs	r0, #3
 3270 005e 00E0     		b	.L214
 3271              	.L216:
2372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3272              		.loc 1 2372 0
 3273 0060 0020     		movs	r0, #0
 3274              	.L214:
2373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3275              		.loc 1 2373 0
 3276              		@ sp needed
 3277              	.LVL255:
 3278              	.LVL256:
 3279              	.LVL257:
 3280 0062 04BC     		pop	{r2}
 3281 0064 9046     		mov	r8, r2
 3282 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 3283              	.L218:
 3284              		.align	2
 3285              	.L217:
 3286 0068 5FFEFFFF 		.word	-417
 3287              		.cfi_endproc
 3288              	.LFE75:
 3290              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 3291              		.align	1
 3292              		.global	HAL_UART_Transmit
 3293              		.syntax unified
 3294              		.code	16
 3295              		.thumb_func
 3296              		.fpu softvfp
 3298              	HAL_UART_Transmit:
 3299              	.LFB41:
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
 3300              		.loc 1 692 0
 3301              		.cfi_startproc
 3302              		@ args = 0, pretend = 0, frame = 8
 3303              		@ frame_needed = 0, uses_anonymous_args = 0
 3304              	.LVL258:
 3305 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3306              	.LCFI27:
 3307              		.cfi_def_cfa_offset 20
 3308              		.cfi_offset 4, -20
 3309              		.cfi_offset 5, -16
 3310              		.cfi_offset 6, -12
 3311              		.cfi_offset 7, -8
 3312              		.cfi_offset 14, -4
 3313 0002 85B0     		sub	sp, sp, #20
 3314              	.LCFI28:
ARM GAS  /tmp/ccPtXKna.s 			page 112


 3315              		.cfi_def_cfa_offset 40
 3316 0004 0400     		movs	r4, r0
 3317 0006 0F00     		movs	r7, r1
 3318 0008 1600     		movs	r6, r2
 3319 000a 1D00     		movs	r5, r3
 3320              	.LVL259:
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3321              		.loc 1 697 0
 3322 000c 6923     		movs	r3, #105
 3323              	.LVL260:
 3324 000e C35C     		ldrb	r3, [r0, r3]
 3325 0010 202B     		cmp	r3, #32
 3326 0012 02D0     		beq	.L233
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3327              		.loc 1 759 0
 3328 0014 0220     		movs	r0, #2
 3329              	.LVL261:
 3330              	.L220:
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3331              		.loc 1 761 0
 3332 0016 05B0     		add	sp, sp, #20
 3333              		@ sp needed
 3334              	.LVL262:
 3335              	.LVL263:
 3336              	.LVL264:
 3337 0018 F0BD     		pop	{r4, r5, r6, r7, pc}
 3338              	.LVL265:
 3339              	.L233:
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3340              		.loc 1 699 0
 3341 001a 0029     		cmp	r1, #0
 3342 001c 5BD0     		beq	.L227
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3343              		.loc 1 699 0 is_stmt 0 discriminator 1
 3344 001e 002A     		cmp	r2, #0
 3345 0020 5BD0     		beq	.L228
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3346              		.loc 1 707 0 is_stmt 1
 3347 0022 8023     		movs	r3, #128
 3348 0024 5B01     		lsls	r3, r3, #5
 3349 0026 8268     		ldr	r2, [r0, #8]
 3350              	.LVL266:
 3351 0028 9A42     		cmp	r2, r3
 3352 002a 05D0     		beq	.L234
 3353              	.L221:
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3354              		.loc 1 716 0
 3355 002c 6823     		movs	r3, #104
 3356 002e E35C     		ldrb	r3, [r4, r3]
 3357 0030 012B     		cmp	r3, #1
 3358 0032 08D1     		bne	.L235
 3359 0034 0220     		movs	r0, #2
 3360              	.LVL267:
 3361 0036 EEE7     		b	.L220
 3362              	.LVL268:
 3363              	.L234:
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
ARM GAS  /tmp/ccPtXKna.s 			page 113


 3364              		.loc 1 707 0 discriminator 1
 3365 0038 0369     		ldr	r3, [r0, #16]
 3366 003a 002B     		cmp	r3, #0
 3367 003c F6D1     		bne	.L221
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3368              		.loc 1 709 0
 3369 003e CB07     		lsls	r3, r1, #31
 3370 0040 F4D5     		bpl	.L221
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3371              		.loc 1 711 0
 3372 0042 0120     		movs	r0, #1
 3373              	.LVL269:
 3374 0044 E7E7     		b	.L220
 3375              	.LVL270:
 3376              	.L235:
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3377              		.loc 1 716 0 discriminator 2
 3378 0046 0122     		movs	r2, #1
 3379 0048 6823     		movs	r3, #104
 3380 004a E254     		strb	r2, [r4, r3]
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 3381              		.loc 1 718 0 discriminator 2
 3382 004c 0023     		movs	r3, #0
 3383 004e E366     		str	r3, [r4, #108]
 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3384              		.loc 1 719 0 discriminator 2
 3385 0050 2032     		adds	r2, r2, #32
 3386 0052 6933     		adds	r3, r3, #105
 3387 0054 E254     		strb	r2, [r4, r3]
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3388              		.loc 1 722 0 discriminator 2
 3389 0056 FFF7FEFF 		bl	HAL_GetTick
 3390              	.LVL271:
 3391 005a 0390     		str	r0, [sp, #12]
 3392              	.LVL272:
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->TxXferCount = Size;
 3393              		.loc 1 724 0 discriminator 2
 3394 005c 5023     		movs	r3, #80
 3395 005e E652     		strh	r6, [r4, r3]
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     while(huart->TxXferCount > 0)
 3396              		.loc 1 725 0 discriminator 2
 3397 0060 0233     		adds	r3, r3, #2
 3398 0062 E652     		strh	r6, [r4, r3]
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3399              		.loc 1 726 0 discriminator 2
 3400 0064 03E0     		b	.L222
 3401              	.LVL273:
 3402              	.L223:
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3403              		.loc 1 741 0
 3404 0066 3B78     		ldrb	r3, [r7]
 3405 0068 2268     		ldr	r2, [r4]
 3406 006a 1385     		strh	r3, [r2, #40]
 3407 006c 0137     		adds	r7, r7, #1
 3408              	.LVL274:
 3409              	.L222:
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
ARM GAS  /tmp/ccPtXKna.s 			page 114


 3410              		.loc 1 726 0
 3411 006e 5223     		movs	r3, #82
 3412 0070 E35A     		ldrh	r3, [r4, r3]
 3413 0072 9BB2     		uxth	r3, r3
 3414 0074 002B     		cmp	r3, #0
 3415 0076 1CD0     		beq	.L236
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 3416              		.loc 1 728 0
 3417 0078 5222     		movs	r2, #82
 3418 007a A35A     		ldrh	r3, [r4, r2]
 3419 007c 013B     		subs	r3, r3, #1
 3420 007e 9BB2     		uxth	r3, r3
 3421 0080 A352     		strh	r3, [r4, r2]
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3422              		.loc 1 729 0
 3423 0082 0095     		str	r5, [sp]
 3424 0084 039B     		ldr	r3, [sp, #12]
 3425 0086 0022     		movs	r2, #0
 3426 0088 8021     		movs	r1, #128
 3427 008a 2000     		movs	r0, r4
 3428 008c FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3429              	.LVL275:
 3430 0090 0028     		cmp	r0, #0
 3431 0092 24D1     		bne	.L231
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3432              		.loc 1 733 0
 3433 0094 8023     		movs	r3, #128
 3434 0096 5B01     		lsls	r3, r3, #5
 3435 0098 A268     		ldr	r2, [r4, #8]
 3436 009a 9A42     		cmp	r2, r3
 3437 009c E3D1     		bne	.L223
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3438              		.loc 1 733 0 is_stmt 0 discriminator 1
 3439 009e 2369     		ldr	r3, [r4, #16]
 3440 00a0 002B     		cmp	r3, #0
 3441 00a2 E0D1     		bne	.L223
 3442              	.LVL276:
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pData += 2;
 3443              		.loc 1 736 0 is_stmt 1
 3444 00a4 3B88     		ldrh	r3, [r7]
 3445 00a6 DB05     		lsls	r3, r3, #23
 3446 00a8 DB0D     		lsrs	r3, r3, #23
 3447 00aa 2268     		ldr	r2, [r4]
 3448 00ac 1385     		strh	r3, [r2, #40]
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3449              		.loc 1 737 0
 3450 00ae 0237     		adds	r7, r7, #2
 3451              	.LVL277:
 3452 00b0 DDE7     		b	.L222
 3453              	.LVL278:
 3454              	.L236:
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3455              		.loc 1 744 0
 3456 00b2 0095     		str	r5, [sp]
 3457 00b4 039B     		ldr	r3, [sp, #12]
 3458 00b6 0022     		movs	r2, #0
 3459 00b8 4021     		movs	r1, #64
ARM GAS  /tmp/ccPtXKna.s 			page 115


 3460 00ba 2000     		movs	r0, r4
 3461 00bc FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3462              	.LVL279:
 3463 00c0 0028     		cmp	r0, #0
 3464 00c2 01D0     		beq	.L237
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 3465              		.loc 1 746 0
 3466 00c4 0320     		movs	r0, #3
 3467 00c6 A6E7     		b	.L220
 3468              	.L237:
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3469              		.loc 1 750 0
 3470 00c8 2022     		movs	r2, #32
 3471 00ca 6923     		movs	r3, #105
 3472 00cc E254     		strb	r2, [r4, r3]
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3473              		.loc 1 753 0
 3474 00ce 0022     		movs	r2, #0
 3475 00d0 013B     		subs	r3, r3, #1
 3476 00d2 E254     		strb	r2, [r4, r3]
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3477              		.loc 1 755 0
 3478 00d4 9FE7     		b	.L220
 3479              	.LVL280:
 3480              	.L227:
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 3481              		.loc 1 701 0
 3482 00d6 0120     		movs	r0, #1
 3483              	.LVL281:
 3484 00d8 9DE7     		b	.L220
 3485              	.LVL282:
 3486              	.L228:
 3487 00da 0120     		movs	r0, #1
 3488              	.LVL283:
 3489 00dc 9BE7     		b	.L220
 3490              	.LVL284:
 3491              	.L231:
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3492              		.loc 1 731 0
 3493 00de 0320     		movs	r0, #3
 3494 00e0 99E7     		b	.L220
 3495              		.cfi_endproc
 3496              	.LFE41:
 3498              		.section	.text.HAL_UART_Receive,"ax",%progbits
 3499              		.align	1
 3500              		.global	HAL_UART_Receive
 3501              		.syntax unified
 3502              		.code	16
 3503              		.thumb_func
 3504              		.fpu softvfp
 3506              	HAL_UART_Receive:
 3507              	.LFB42:
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
 3508              		.loc 1 776 0
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 8
 3511              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccPtXKna.s 			page 116


 3512              	.LVL285:
 3513 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3514              	.LCFI29:
 3515              		.cfi_def_cfa_offset 20
 3516              		.cfi_offset 4, -20
 3517              		.cfi_offset 5, -16
 3518              		.cfi_offset 6, -12
 3519              		.cfi_offset 7, -8
 3520              		.cfi_offset 14, -4
 3521 0002 85B0     		sub	sp, sp, #20
 3522              	.LCFI30:
 3523              		.cfi_def_cfa_offset 40
 3524 0004 0400     		movs	r4, r0
 3525 0006 0F00     		movs	r7, r1
 3526 0008 1600     		movs	r6, r2
 3527 000a 1D00     		movs	r5, r3
 3528              	.LVL286:
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3529              		.loc 1 782 0
 3530 000c 6A23     		movs	r3, #106
 3531              	.LVL287:
 3532 000e C35C     		ldrb	r3, [r0, r3]
 3533 0010 202B     		cmp	r3, #32
 3534 0012 02D0     		beq	.L255
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3535              		.loc 1 846 0
 3536 0014 0220     		movs	r0, #2
 3537              	.LVL288:
 3538              	.L239:
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3539              		.loc 1 848 0
 3540 0016 05B0     		add	sp, sp, #20
 3541              		@ sp needed
 3542              	.LVL289:
 3543              	.LVL290:
 3544              	.LVL291:
 3545 0018 F0BD     		pop	{r4, r5, r6, r7, pc}
 3546              	.LVL292:
 3547              	.L255:
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3548              		.loc 1 784 0
 3549 001a 0029     		cmp	r1, #0
 3550 001c 70D0     		beq	.L250
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3551              		.loc 1 784 0 is_stmt 0 discriminator 1
 3552 001e 002A     		cmp	r2, #0
 3553 0020 70D0     		beq	.L251
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3554              		.loc 1 792 0 is_stmt 1
 3555 0022 8023     		movs	r3, #128
 3556 0024 5B01     		lsls	r3, r3, #5
 3557 0026 8268     		ldr	r2, [r0, #8]
 3558              	.LVL293:
 3559 0028 9A42     		cmp	r2, r3
 3560 002a 05D0     		beq	.L256
 3561              	.L240:
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
ARM GAS  /tmp/ccPtXKna.s 			page 117


 3562              		.loc 1 801 0
 3563 002c 6823     		movs	r3, #104
 3564 002e E35C     		ldrb	r3, [r4, r3]
 3565 0030 012B     		cmp	r3, #1
 3566 0032 08D1     		bne	.L257
 3567 0034 0220     		movs	r0, #2
 3568              	.LVL294:
 3569 0036 EEE7     		b	.L239
 3570              	.LVL295:
 3571              	.L256:
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3572              		.loc 1 792 0 discriminator 1
 3573 0038 0369     		ldr	r3, [r0, #16]
 3574 003a 002B     		cmp	r3, #0
 3575 003c F6D1     		bne	.L240
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3576              		.loc 1 794 0
 3577 003e CB07     		lsls	r3, r1, #31
 3578 0040 F4D5     		bpl	.L240
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3579              		.loc 1 796 0
 3580 0042 0120     		movs	r0, #1
 3581              	.LVL296:
 3582 0044 E7E7     		b	.L239
 3583              	.LVL297:
 3584              	.L257:
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3585              		.loc 1 801 0 discriminator 2
 3586 0046 0122     		movs	r2, #1
 3587 0048 6823     		movs	r3, #104
 3588 004a E254     		strb	r2, [r4, r3]
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 3589              		.loc 1 803 0 discriminator 2
 3590 004c 0023     		movs	r3, #0
 3591 004e E366     		str	r3, [r4, #108]
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3592              		.loc 1 804 0 discriminator 2
 3593 0050 2132     		adds	r2, r2, #33
 3594 0052 6A33     		adds	r3, r3, #106
 3595 0054 E254     		strb	r2, [r4, r3]
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3596              		.loc 1 807 0 discriminator 2
 3597 0056 FFF7FEFF 		bl	HAL_GetTick
 3598              	.LVL298:
 3599 005a 0390     		str	r0, [sp, #12]
 3600              	.LVL299:
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxXferCount = Size;
 3601              		.loc 1 809 0 discriminator 2
 3602 005c 5823     		movs	r3, #88
 3603 005e E652     		strh	r6, [r4, r3]
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3604              		.loc 1 810 0 discriminator 2
 3605 0060 0233     		adds	r3, r3, #2
 3606 0062 E652     		strh	r6, [r4, r3]
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3607              		.loc 1 813 0 discriminator 2
 3608 0064 A368     		ldr	r3, [r4, #8]
ARM GAS  /tmp/ccPtXKna.s 			page 118


 3609 0066 8022     		movs	r2, #128
 3610 0068 5201     		lsls	r2, r2, #5
 3611 006a 9342     		cmp	r3, r2
 3612 006c 0AD0     		beq	.L258
 3613 006e 002B     		cmp	r3, #0
 3614 0070 05D1     		bne	.L243
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3615              		.loc 1 813 0 is_stmt 0 discriminator 5
 3616 0072 2369     		ldr	r3, [r4, #16]
 3617 0074 002B     		cmp	r3, #0
 3618 0076 10D1     		bne	.L244
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3619              		.loc 1 813 0 discriminator 6
 3620 0078 FF22     		movs	r2, #255
 3621 007a 5C33     		adds	r3, r3, #92
 3622 007c E252     		strh	r2, [r4, r3]
 3623              	.L243:
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3624              		.loc 1 814 0 is_stmt 1
 3625 007e 5C23     		movs	r3, #92
 3626 0080 E65A     		ldrh	r6, [r4, r3]
 3627              	.LVL300:
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3628              		.loc 1 817 0
 3629 0082 14E0     		b	.L245
 3630              	.LVL301:
 3631              	.L258:
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3632              		.loc 1 813 0 discriminator 1
 3633 0084 2369     		ldr	r3, [r4, #16]
 3634 0086 002B     		cmp	r3, #0
 3635 0088 03D1     		bne	.L242
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3636              		.loc 1 813 0 is_stmt 0 discriminator 3
 3637 008a 204A     		ldr	r2, .L260
 3638 008c 5C33     		adds	r3, r3, #92
 3639 008e E252     		strh	r2, [r4, r3]
 3640 0090 F5E7     		b	.L243
 3641              	.L242:
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3642              		.loc 1 813 0 discriminator 4
 3643 0092 FF22     		movs	r2, #255
 3644 0094 5C23     		movs	r3, #92
 3645 0096 E252     		strh	r2, [r4, r3]
 3646 0098 F1E7     		b	.L243
 3647              	.L244:
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhMask = huart->Mask;
 3648              		.loc 1 813 0 discriminator 7
 3649 009a 7F22     		movs	r2, #127
 3650 009c 5C23     		movs	r3, #92
 3651 009e E252     		strh	r2, [r4, r3]
 3652 00a0 EDE7     		b	.L243
 3653              	.LVL302:
 3654              	.L246:
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3655              		.loc 1 832 0 is_stmt 1
 3656 00a2 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccPtXKna.s 			page 119


 3657 00a4 9B8C     		ldrh	r3, [r3, #36]
 3658 00a6 F2B2     		uxtb	r2, r6
 3659 00a8 1340     		ands	r3, r2
 3660 00aa 3B70     		strb	r3, [r7]
 3661 00ac 0137     		adds	r7, r7, #1
 3662              	.LVL303:
 3663              	.L245:
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3664              		.loc 1 817 0
 3665 00ae 5A23     		movs	r3, #90
 3666 00b0 E35A     		ldrh	r3, [r4, r3]
 3667 00b2 9BB2     		uxth	r3, r3
 3668 00b4 002B     		cmp	r3, #0
 3669 00b6 1BD0     		beq	.L259
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 3670              		.loc 1 819 0
 3671 00b8 5A22     		movs	r2, #90
 3672 00ba A35A     		ldrh	r3, [r4, r2]
 3673 00bc 013B     		subs	r3, r3, #1
 3674 00be 9BB2     		uxth	r3, r3
 3675 00c0 A352     		strh	r3, [r4, r2]
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3676              		.loc 1 820 0
 3677 00c2 0095     		str	r5, [sp]
 3678 00c4 039B     		ldr	r3, [sp, #12]
 3679 00c6 0022     		movs	r2, #0
 3680 00c8 2021     		movs	r1, #32
 3681 00ca 2000     		movs	r0, r4
 3682 00cc FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3683              	.LVL304:
 3684 00d0 0028     		cmp	r0, #0
 3685 00d2 19D1     		bne	.L254
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3686              		.loc 1 824 0
 3687 00d4 8023     		movs	r3, #128
 3688 00d6 5B01     		lsls	r3, r3, #5
 3689 00d8 A268     		ldr	r2, [r4, #8]
 3690 00da 9A42     		cmp	r2, r3
 3691 00dc E1D1     		bne	.L246
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3692              		.loc 1 824 0 is_stmt 0 discriminator 1
 3693 00de 2369     		ldr	r3, [r4, #16]
 3694 00e0 002B     		cmp	r3, #0
 3695 00e2 DED1     		bne	.L246
 3696              	.LVL305:
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         pData +=2U;
 3697              		.loc 1 827 0 is_stmt 1
 3698 00e4 2368     		ldr	r3, [r4]
 3699 00e6 9B8C     		ldrh	r3, [r3, #36]
 3700 00e8 3340     		ands	r3, r6
 3701 00ea 3B80     		strh	r3, [r7]
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3702              		.loc 1 828 0
 3703 00ec 0237     		adds	r7, r7, #2
 3704              	.LVL306:
 3705 00ee DEE7     		b	.L245
 3706              	.LVL307:
ARM GAS  /tmp/ccPtXKna.s 			page 120


 3707              	.L259:
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3708              		.loc 1 837 0
 3709 00f0 2022     		movs	r2, #32
 3710 00f2 6A33     		adds	r3, r3, #106
 3711 00f4 E254     		strb	r2, [r4, r3]
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3712              		.loc 1 840 0
 3713 00f6 0022     		movs	r2, #0
 3714 00f8 023B     		subs	r3, r3, #2
 3715 00fa E254     		strb	r2, [r4, r3]
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3716              		.loc 1 842 0
 3717 00fc 0020     		movs	r0, #0
 3718 00fe 8AE7     		b	.L239
 3719              	.LVL308:
 3720              	.L250:
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 3721              		.loc 1 786 0
 3722 0100 0120     		movs	r0, #1
 3723              	.LVL309:
 3724 0102 88E7     		b	.L239
 3725              	.LVL310:
 3726              	.L251:
 3727 0104 0120     		movs	r0, #1
 3728              	.LVL311:
 3729 0106 86E7     		b	.L239
 3730              	.LVL312:
 3731              	.L254:
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3732              		.loc 1 822 0
 3733 0108 0320     		movs	r0, #3
 3734 010a 84E7     		b	.L239
 3735              	.L261:
 3736              		.align	2
 3737              	.L260:
 3738 010c FF010000 		.word	511
 3739              		.cfi_endproc
 3740              	.LFE42:
 3742              		.section	.text.UART_CheckIdleState,"ax",%progbits
 3743              		.align	1
 3744              		.global	UART_CheckIdleState
 3745              		.syntax unified
 3746              		.code	16
 3747              		.thumb_func
 3748              		.fpu softvfp
 3750              	UART_CheckIdleState:
 3751              	.LFB74:
2289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&
 3752              		.loc 1 2289 0
 3753              		.cfi_startproc
 3754              		@ args = 0, pretend = 0, frame = 0
 3755              		@ frame_needed = 0, uses_anonymous_args = 0
 3756              	.LVL313:
 3757 0000 30B5     		push	{r4, r5, lr}
 3758              	.LCFI31:
 3759              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccPtXKna.s 			page 121


 3760              		.cfi_offset 4, -12
 3761              		.cfi_offset 5, -8
 3762              		.cfi_offset 14, -4
 3763 0002 83B0     		sub	sp, sp, #12
 3764              	.LCFI32:
 3765              		.cfi_def_cfa_offset 24
 3766 0004 0400     		movs	r4, r0
 3767              	.LVL314:
2295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3768              		.loc 1 2295 0
 3769 0006 0023     		movs	r3, #0
 3770 0008 C366     		str	r3, [r0, #108]
2299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3771              		.loc 1 2299 0
 3772 000a FFF7FEFF 		bl	HAL_GetTick
 3773              	.LVL315:
 3774 000e 0500     		movs	r5, r0
 3775              	.LVL316:
2304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3776              		.loc 1 2304 0
 3777 0010 2368     		ldr	r3, [r4]
 3778 0012 174A     		ldr	r2, .L270
 3779 0014 9342     		cmp	r3, r2
 3780 0016 0AD0     		beq	.L268
 3781              	.LVL317:
 3782              	.L263:
2331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3783              		.loc 1 2331 0
 3784 0018 2023     		movs	r3, #32
 3785 001a 6922     		movs	r2, #105
 3786 001c A354     		strb	r3, [r4, r2]
2332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3787              		.loc 1 2332 0
 3788 001e 0132     		adds	r2, r2, #1
 3789 0020 A354     		strb	r3, [r4, r2]
2335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3790              		.loc 1 2335 0
 3791 0022 0022     		movs	r2, #0
 3792 0024 4833     		adds	r3, r3, #72
 3793 0026 E254     		strb	r2, [r4, r3]
2337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3794              		.loc 1 2337 0
 3795 0028 0020     		movs	r0, #0
 3796              	.L265:
2338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3797              		.loc 1 2338 0
 3798 002a 03B0     		add	sp, sp, #12
 3799              		@ sp needed
 3800              	.LVL318:
 3801              	.LVL319:
 3802 002c 30BD     		pop	{r4, r5, pc}
 3803              	.LVL320:
 3804              	.L268:
2307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3805              		.loc 1 2307 0
 3806 002e 1B68     		ldr	r3, [r3]
 3807 0030 1B07     		lsls	r3, r3, #28
ARM GAS  /tmp/ccPtXKna.s 			page 122


 3808 0032 10D4     		bmi	.L269
 3809              	.LVL321:
 3810              	.L264:
2318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 3811              		.loc 1 2318 0
 3812 0034 2368     		ldr	r3, [r4]
 3813 0036 1B68     		ldr	r3, [r3]
 3814 0038 5B07     		lsls	r3, r3, #29
 3815 003a EDD5     		bpl	.L263
2321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3816              		.loc 1 2321 0
 3817 003c 0D4B     		ldr	r3, .L270+4
 3818 003e 0093     		str	r3, [sp]
 3819 0040 2B00     		movs	r3, r5
 3820 0042 0022     		movs	r2, #0
 3821 0044 8021     		movs	r1, #128
 3822 0046 C903     		lsls	r1, r1, #15
 3823 0048 2000     		movs	r0, r4
 3824 004a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3825              	.LVL322:
 3826 004e 0028     		cmp	r0, #0
 3827 0050 E2D0     		beq	.L263
2324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3828              		.loc 1 2324 0
 3829 0052 0320     		movs	r0, #3
 3830 0054 E9E7     		b	.L265
 3831              	.LVL323:
 3832              	.L269:
2310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 3833              		.loc 1 2310 0
 3834 0056 074B     		ldr	r3, .L270+4
 3835 0058 0093     		str	r3, [sp]
 3836 005a 0300     		movs	r3, r0
 3837 005c 0022     		movs	r2, #0
 3838 005e 8021     		movs	r1, #128
 3839 0060 8903     		lsls	r1, r1, #14
 3840 0062 2000     		movs	r0, r4
 3841              	.LVL324:
 3842 0064 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3843              	.LVL325:
 3844 0068 0028     		cmp	r0, #0
 3845 006a E3D0     		beq	.L264
2313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 3846              		.loc 1 2313 0
 3847 006c 0320     		movs	r0, #3
 3848 006e DCE7     		b	.L265
 3849              	.L271:
 3850              		.align	2
 3851              	.L270:
 3852 0070 00380140 		.word	1073821696
 3853 0074 FFFFFF01 		.word	33554431
 3854              		.cfi_endproc
 3855              	.LFE74:
 3857              		.section	.text.HAL_UART_Init,"ax",%progbits
 3858              		.align	1
 3859              		.global	HAL_UART_Init
 3860              		.syntax unified
ARM GAS  /tmp/ccPtXKna.s 			page 123


 3861              		.code	16
 3862              		.thumb_func
 3863              		.fpu softvfp
 3865              	HAL_UART_Init:
 3866              	.LFB35:
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 3867              		.loc 1 292 0
 3868              		.cfi_startproc
 3869              		@ args = 0, pretend = 0, frame = 0
 3870              		@ frame_needed = 0, uses_anonymous_args = 0
 3871              	.LVL326:
 3872 0000 10B5     		push	{r4, lr}
 3873              	.LCFI33:
 3874              		.cfi_def_cfa_offset 8
 3875              		.cfi_offset 4, -8
 3876              		.cfi_offset 14, -4
 3877 0002 041E     		subs	r4, r0, #0
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3878              		.loc 1 294 0
 3879 0004 30D0     		beq	.L276
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3880              		.loc 1 310 0
 3881 0006 6923     		movs	r3, #105
 3882 0008 C35C     		ldrb	r3, [r0, r3]
 3883 000a 002B     		cmp	r3, #0
 3884 000c 22D0     		beq	.L277
 3885              	.LVL327:
 3886              	.L274:
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3887              		.loc 1 319 0
 3888 000e 2422     		movs	r2, #36
 3889 0010 6923     		movs	r3, #105
 3890 0012 E254     		strb	r2, [r4, r3]
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3891              		.loc 1 322 0
 3892 0014 2268     		ldr	r2, [r4]
 3893 0016 1368     		ldr	r3, [r2]
 3894 0018 0121     		movs	r1, #1
 3895 001a 8B43     		bics	r3, r1
 3896 001c 1360     		str	r3, [r2]
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3897              		.loc 1 325 0
 3898 001e 2000     		movs	r0, r4
 3899 0020 FFF7FEFF 		bl	UART_SetConfig
 3900              	.LVL328:
 3901 0024 0128     		cmp	r0, #1
 3902 0026 14D0     		beq	.L273
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3903              		.loc 1 330 0
 3904 0028 636A     		ldr	r3, [r4, #36]
 3905 002a 002B     		cmp	r3, #0
 3906 002c 18D1     		bne	.L278
 3907              	.L275:
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 3908              		.loc 1 339 0
 3909 002e 2268     		ldr	r2, [r4]
 3910 0030 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccPtXKna.s 			page 124


 3911 0032 0E49     		ldr	r1, .L279
 3912 0034 0B40     		ands	r3, r1
 3913 0036 5360     		str	r3, [r2, #4]
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 3914              		.loc 1 345 0
 3915 0038 2268     		ldr	r2, [r4]
 3916 003a 9368     		ldr	r3, [r2, #8]
 3917 003c 2A21     		movs	r1, #42
 3918 003e 8B43     		bics	r3, r1
 3919 0040 9360     		str	r3, [r2, #8]
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3920              		.loc 1 358 0
 3921 0042 2268     		ldr	r2, [r4]
 3922 0044 1368     		ldr	r3, [r2]
 3923 0046 2939     		subs	r1, r1, #41
 3924 0048 0B43     		orrs	r3, r1
 3925 004a 1360     		str	r3, [r2]
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 3926              		.loc 1 361 0
 3927 004c 2000     		movs	r0, r4
 3928 004e FFF7FEFF 		bl	UART_CheckIdleState
 3929              	.LVL329:
 3930              	.L273:
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3931              		.loc 1 362 0
 3932              		@ sp needed
 3933              	.LVL330:
 3934 0052 10BD     		pop	{r4, pc}
 3935              	.LVL331:
 3936              	.L277:
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3937              		.loc 1 313 0
 3938 0054 0022     		movs	r2, #0
 3939 0056 6833     		adds	r3, r3, #104
 3940 0058 C254     		strb	r2, [r0, r3]
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3941              		.loc 1 316 0
 3942 005a FFF7FEFF 		bl	HAL_UART_MspInit
 3943              	.LVL332:
 3944 005e D6E7     		b	.L274
 3945              	.L278:
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3946              		.loc 1 332 0
 3947 0060 2000     		movs	r0, r4
 3948 0062 FFF7FEFF 		bl	UART_AdvFeatureConfig
 3949              	.LVL333:
 3950 0066 E2E7     		b	.L275
 3951              	.LVL334:
 3952              	.L276:
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 3953              		.loc 1 296 0
 3954 0068 0120     		movs	r0, #1
 3955              	.LVL335:
 3956 006a F2E7     		b	.L273
 3957              	.L280:
 3958              		.align	2
 3959              	.L279:
ARM GAS  /tmp/ccPtXKna.s 			page 125


 3960 006c FFB7FFFF 		.word	-18433
 3961              		.cfi_endproc
 3962              	.LFE35:
 3964              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 3965              		.align	1
 3966              		.global	HAL_HalfDuplex_Init
 3967              		.syntax unified
 3968              		.code	16
 3969              		.thumb_func
 3970              		.fpu softvfp
 3972              	HAL_HalfDuplex_Init:
 3973              	.LFB36:
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 3974              		.loc 1 371 0
 3975              		.cfi_startproc
 3976              		@ args = 0, pretend = 0, frame = 0
 3977              		@ frame_needed = 0, uses_anonymous_args = 0
 3978              	.LVL336:
 3979 0000 10B5     		push	{r4, lr}
 3980              	.LCFI34:
 3981              		.cfi_def_cfa_offset 8
 3982              		.cfi_offset 4, -8
 3983              		.cfi_offset 14, -4
 3984 0002 041E     		subs	r4, r0, #0
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3985              		.loc 1 373 0
 3986 0004 35D0     		beq	.L285
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 3987              		.loc 1 381 0
 3988 0006 6923     		movs	r3, #105
 3989 0008 C35C     		ldrb	r3, [r0, r3]
 3990 000a 002B     		cmp	r3, #0
 3991 000c 27D0     		beq	.L286
 3992              	.LVL337:
 3993              	.L283:
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3994              		.loc 1 390 0
 3995 000e 2422     		movs	r2, #36
 3996 0010 6923     		movs	r3, #105
 3997 0012 E254     		strb	r2, [r4, r3]
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 3998              		.loc 1 393 0
 3999 0014 2268     		ldr	r2, [r4]
 4000 0016 1368     		ldr	r3, [r2]
 4001 0018 0121     		movs	r1, #1
 4002 001a 8B43     		bics	r3, r1
 4003 001c 1360     		str	r3, [r2]
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4004              		.loc 1 396 0
 4005 001e 2000     		movs	r0, r4
 4006 0020 FFF7FEFF 		bl	UART_SetConfig
 4007              	.LVL338:
 4008 0024 0128     		cmp	r0, #1
 4009 0026 19D0     		beq	.L282
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4010              		.loc 1 401 0
 4011 0028 636A     		ldr	r3, [r4, #36]
ARM GAS  /tmp/ccPtXKna.s 			page 126


 4012 002a 002B     		cmp	r3, #0
 4013 002c 1DD1     		bne	.L287
 4014              	.L284:
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 4015              		.loc 1 410 0
 4016 002e 2268     		ldr	r2, [r4]
 4017 0030 5368     		ldr	r3, [r2, #4]
 4018 0032 1149     		ldr	r1, .L288
 4019 0034 0B40     		ands	r3, r1
 4020 0036 5360     		str	r3, [r2, #4]
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 4021              		.loc 1 416 0
 4022 0038 2268     		ldr	r2, [r4]
 4023 003a 9368     		ldr	r3, [r2, #8]
 4024 003c 2221     		movs	r1, #34
 4025 003e 8B43     		bics	r3, r1
 4026 0040 9360     		str	r3, [r2, #8]
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4027              		.loc 1 427 0
 4028 0042 2268     		ldr	r2, [r4]
 4029 0044 9368     		ldr	r3, [r2, #8]
 4030 0046 1A39     		subs	r1, r1, #26
 4031 0048 0B43     		orrs	r3, r1
 4032 004a 9360     		str	r3, [r2, #8]
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4033              		.loc 1 430 0
 4034 004c 2268     		ldr	r2, [r4]
 4035 004e 1368     		ldr	r3, [r2]
 4036 0050 0739     		subs	r1, r1, #7
 4037 0052 0B43     		orrs	r3, r1
 4038 0054 1360     		str	r3, [r2]
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4039              		.loc 1 433 0
 4040 0056 2000     		movs	r0, r4
 4041 0058 FFF7FEFF 		bl	UART_CheckIdleState
 4042              	.LVL339:
 4043              	.L282:
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4044              		.loc 1 434 0
 4045              		@ sp needed
 4046              	.LVL340:
 4047 005c 10BD     		pop	{r4, pc}
 4048              	.LVL341:
 4049              	.L286:
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4050              		.loc 1 384 0
 4051 005e 0022     		movs	r2, #0
 4052 0060 6833     		adds	r3, r3, #104
 4053 0062 C254     		strb	r2, [r0, r3]
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4054              		.loc 1 387 0
 4055 0064 FFF7FEFF 		bl	HAL_UART_MspInit
 4056              	.LVL342:
 4057 0068 D1E7     		b	.L283
 4058              	.L287:
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4059              		.loc 1 403 0
ARM GAS  /tmp/ccPtXKna.s 			page 127


 4060 006a 2000     		movs	r0, r4
 4061 006c FFF7FEFF 		bl	UART_AdvFeatureConfig
 4062              	.LVL343:
 4063 0070 DDE7     		b	.L284
 4064              	.LVL344:
 4065              	.L285:
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4066              		.loc 1 375 0
 4067 0072 0120     		movs	r0, #1
 4068              	.LVL345:
 4069 0074 F2E7     		b	.L282
 4070              	.L289:
 4071 0076 C046     		.align	2
 4072              	.L288:
 4073 0078 FFB7FFFF 		.word	-18433
 4074              		.cfi_endproc
 4075              	.LFE36:
 4077              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 4078              		.align	1
 4079              		.global	HAL_MultiProcessor_Init
 4080              		.syntax unified
 4081              		.code	16
 4082              		.thumb_func
 4083              		.fpu softvfp
 4085              	HAL_MultiProcessor_Init:
 4086              	.LFB37:
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check the UART handle allocation */
 4087              		.loc 1 456 0
 4088              		.cfi_startproc
 4089              		@ args = 0, pretend = 0, frame = 0
 4090              		@ frame_needed = 0, uses_anonymous_args = 0
 4091              	.LVL346:
 4092 0000 70B5     		push	{r4, r5, r6, lr}
 4093              	.LCFI35:
 4094              		.cfi_def_cfa_offset 16
 4095              		.cfi_offset 4, -16
 4096              		.cfi_offset 5, -12
 4097              		.cfi_offset 6, -8
 4098              		.cfi_offset 14, -4
 4099 0002 0400     		movs	r4, r0
 4100 0004 0D00     		movs	r5, r1
 4101 0006 1600     		movs	r6, r2
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4102              		.loc 1 458 0
 4103 0008 0028     		cmp	r0, #0
 4104 000a 42D0     		beq	.L295
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4105              		.loc 1 466 0
 4106 000c 6923     		movs	r3, #105
 4107 000e C35C     		ldrb	r3, [r0, r3]
 4108 0010 002B     		cmp	r3, #0
 4109 0012 2CD0     		beq	.L296
 4110              	.LVL347:
 4111              	.L292:
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4112              		.loc 1 475 0
 4113 0014 2422     		movs	r2, #36
ARM GAS  /tmp/ccPtXKna.s 			page 128


 4114 0016 6923     		movs	r3, #105
 4115 0018 E254     		strb	r2, [r4, r3]
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4116              		.loc 1 478 0
 4117 001a 2268     		ldr	r2, [r4]
 4118 001c 1368     		ldr	r3, [r2]
 4119 001e 0121     		movs	r1, #1
 4120 0020 8B43     		bics	r3, r1
 4121 0022 1360     		str	r3, [r2]
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4122              		.loc 1 481 0
 4123 0024 2000     		movs	r0, r4
 4124 0026 FFF7FEFF 		bl	UART_SetConfig
 4125              	.LVL348:
 4126 002a 0128     		cmp	r0, #1
 4127 002c 1ED0     		beq	.L291
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4128              		.loc 1 486 0
 4129 002e 636A     		ldr	r3, [r4, #36]
 4130 0030 002B     		cmp	r3, #0
 4131 0032 22D1     		bne	.L297
 4132              	.L293:
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 4133              		.loc 1 495 0
 4134 0034 2268     		ldr	r2, [r4]
 4135 0036 5368     		ldr	r3, [r2, #4]
 4136 0038 1749     		ldr	r1, .L299
 4137 003a 0B40     		ands	r3, r1
 4138 003c 5360     		str	r3, [r2, #4]
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** #else
 4139              		.loc 1 501 0
 4140 003e 2268     		ldr	r2, [r4]
 4141 0040 9368     		ldr	r3, [r2, #8]
 4142 0042 2A21     		movs	r1, #42
 4143 0044 8B43     		bics	r3, r1
 4144 0046 9360     		str	r3, [r2, #8]
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4145              		.loc 1 513 0
 4146 0048 8023     		movs	r3, #128
 4147 004a 1B01     		lsls	r3, r3, #4
 4148 004c 9E42     		cmp	r6, r3
 4149 004e 18D0     		beq	.L298
 4150              	.L294:
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4151              		.loc 1 520 0
 4152 0050 2268     		ldr	r2, [r4]
 4153 0052 1368     		ldr	r3, [r2]
 4154 0054 1149     		ldr	r1, .L299+4
 4155 0056 0B40     		ands	r3, r1
 4156 0058 1E43     		orrs	r6, r3
 4157              	.LVL349:
 4158 005a 1660     		str	r6, [r2]
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4159              		.loc 1 523 0
 4160 005c 2268     		ldr	r2, [r4]
 4161 005e 1368     		ldr	r3, [r2]
 4162 0060 0121     		movs	r1, #1
ARM GAS  /tmp/ccPtXKna.s 			page 129


 4163 0062 0B43     		orrs	r3, r1
 4164 0064 1360     		str	r3, [r2]
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4165              		.loc 1 526 0
 4166 0066 2000     		movs	r0, r4
 4167 0068 FFF7FEFF 		bl	UART_CheckIdleState
 4168              	.LVL350:
 4169              	.L291:
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4170              		.loc 1 527 0
 4171              		@ sp needed
 4172              	.LVL351:
 4173 006c 70BD     		pop	{r4, r5, r6, pc}
 4174              	.LVL352:
 4175              	.L296:
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4176              		.loc 1 469 0
 4177 006e 0022     		movs	r2, #0
 4178              	.LVL353:
 4179 0070 6833     		adds	r3, r3, #104
 4180 0072 C254     		strb	r2, [r0, r3]
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4181              		.loc 1 472 0
 4182 0074 FFF7FEFF 		bl	HAL_UART_MspInit
 4183              	.LVL354:
 4184 0078 CCE7     		b	.L292
 4185              	.L297:
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4186              		.loc 1 488 0
 4187 007a 2000     		movs	r0, r4
 4188 007c FFF7FEFF 		bl	UART_AdvFeatureConfig
 4189              	.LVL355:
 4190 0080 D8E7     		b	.L293
 4191              	.L298:
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4192              		.loc 1 516 0
 4193 0082 2268     		ldr	r2, [r4]
 4194 0084 5368     		ldr	r3, [r2, #4]
 4195 0086 1B02     		lsls	r3, r3, #8
 4196 0088 1B0A     		lsrs	r3, r3, #8
 4197 008a 2D06     		lsls	r5, r5, #24
 4198 008c 1D43     		orrs	r5, r3
 4199 008e 5560     		str	r5, [r2, #4]
 4200 0090 DEE7     		b	.L294
 4201              	.LVL356:
 4202              	.L295:
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4203              		.loc 1 460 0
 4204 0092 0120     		movs	r0, #1
 4205              	.LVL357:
 4206 0094 EAE7     		b	.L291
 4207              	.L300:
 4208 0096 C046     		.align	2
 4209              	.L299:
 4210 0098 FFB7FFFF 		.word	-18433
 4211 009c FFF7FFFF 		.word	-2049
 4212              		.cfi_endproc
ARM GAS  /tmp/ccPtXKna.s 			page 130


 4213              	.LFE37:
 4215              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 4216              		.align	1
 4217              		.global	HAL_MultiProcessor_EnableMuteMode
 4218              		.syntax unified
 4219              		.code	16
 4220              		.thumb_func
 4221              		.fpu softvfp
 4223              	HAL_MultiProcessor_EnableMuteMode:
 4224              	.LFB65:
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
 4225              		.loc 1 1954 0
 4226              		.cfi_startproc
 4227              		@ args = 0, pretend = 0, frame = 0
 4228              		@ frame_needed = 0, uses_anonymous_args = 0
 4229              	.LVL358:
 4230 0000 10B5     		push	{r4, lr}
 4231              	.LCFI36:
 4232              		.cfi_def_cfa_offset 8
 4233              		.cfi_offset 4, -8
 4234              		.cfi_offset 14, -4
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4235              		.loc 1 1956 0
 4236 0002 6823     		movs	r3, #104
 4237 0004 C35C     		ldrb	r3, [r0, r3]
 4238 0006 012B     		cmp	r3, #1
 4239 0008 01D1     		bne	.L304
 4240 000a 0220     		movs	r0, #2
 4241              	.LVL359:
 4242              	.L302:
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4243              		.loc 1 1966 0
 4244              		@ sp needed
 4245 000c 10BD     		pop	{r4, pc}
 4246              	.LVL360:
 4247              	.L304:
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4248              		.loc 1 1956 0 discriminator 2
 4249 000e 0122     		movs	r2, #1
 4250 0010 6823     		movs	r3, #104
 4251 0012 C254     		strb	r2, [r0, r3]
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4252              		.loc 1 1958 0 discriminator 2
 4253 0014 6832     		adds	r2, r2, #104
 4254 0016 443B     		subs	r3, r3, #68
 4255 0018 8354     		strb	r3, [r0, r2]
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4256              		.loc 1 1961 0 discriminator 2
 4257 001a 0168     		ldr	r1, [r0]
 4258 001c 0C68     		ldr	r4, [r1]
 4259 001e 8023     		movs	r3, #128
 4260 0020 9B01     		lsls	r3, r3, #6
 4261 0022 2343     		orrs	r3, r4
 4262 0024 0B60     		str	r3, [r1]
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4263              		.loc 1 1963 0 discriminator 2
 4264 0026 2023     		movs	r3, #32
ARM GAS  /tmp/ccPtXKna.s 			page 131


 4265 0028 8354     		strb	r3, [r0, r2]
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4266              		.loc 1 1965 0 discriminator 2
 4267 002a FFF7FEFF 		bl	UART_CheckIdleState
 4268              	.LVL361:
 4269 002e EDE7     		b	.L302
 4270              		.cfi_endproc
 4271              	.LFE65:
 4273              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 4274              		.align	1
 4275              		.global	HAL_MultiProcessor_DisableMuteMode
 4276              		.syntax unified
 4277              		.code	16
 4278              		.thumb_func
 4279              		.fpu softvfp
 4281              	HAL_MultiProcessor_DisableMuteMode:
 4282              	.LFB66:
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Process Locked */
 4283              		.loc 1 1975 0
 4284              		.cfi_startproc
 4285              		@ args = 0, pretend = 0, frame = 0
 4286              		@ frame_needed = 0, uses_anonymous_args = 0
 4287              	.LVL362:
 4288 0000 10B5     		push	{r4, lr}
 4289              	.LCFI37:
 4290              		.cfi_def_cfa_offset 8
 4291              		.cfi_offset 4, -8
 4292              		.cfi_offset 14, -4
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4293              		.loc 1 1977 0
 4294 0002 6823     		movs	r3, #104
 4295 0004 C35C     		ldrb	r3, [r0, r3]
 4296 0006 012B     		cmp	r3, #1
 4297 0008 01D1     		bne	.L308
 4298 000a 0220     		movs	r0, #2
 4299              	.LVL363:
 4300              	.L306:
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4301              		.loc 1 1987 0
 4302              		@ sp needed
 4303 000c 10BD     		pop	{r4, pc}
 4304              	.LVL364:
 4305              	.L308:
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4306              		.loc 1 1977 0 discriminator 2
 4307 000e 0122     		movs	r2, #1
 4308 0010 6823     		movs	r3, #104
 4309 0012 C254     		strb	r2, [r0, r3]
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4310              		.loc 1 1979 0 discriminator 2
 4311 0014 6832     		adds	r2, r2, #104
 4312 0016 443B     		subs	r3, r3, #68
 4313 0018 8354     		strb	r3, [r0, r2]
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4314              		.loc 1 1982 0 discriminator 2
 4315 001a 0168     		ldr	r1, [r0]
 4316 001c 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccPtXKna.s 			page 132


 4317 001e 044C     		ldr	r4, .L309
 4318 0020 2340     		ands	r3, r4
 4319 0022 0B60     		str	r3, [r1]
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4320              		.loc 1 1984 0 discriminator 2
 4321 0024 2023     		movs	r3, #32
 4322 0026 8354     		strb	r3, [r0, r2]
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4323              		.loc 1 1986 0 discriminator 2
 4324 0028 FFF7FEFF 		bl	UART_CheckIdleState
 4325              	.LVL365:
 4326 002c EEE7     		b	.L306
 4327              	.L310:
 4328 002e C046     		.align	2
 4329              	.L309:
 4330 0030 FFDFFFFF 		.word	-8193
 4331              		.cfi_endproc
 4332              	.LFE66:
 4334              		.section	.text.UART_Transmit_IT,"ax",%progbits
 4335              		.align	1
 4336              		.global	UART_Transmit_IT
 4337              		.syntax unified
 4338              		.code	16
 4339              		.thumb_func
 4340              		.fpu softvfp
 4342              	UART_Transmit_IT:
 4343              	.LFB88:
2661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Send an amount of data in interrupt mode.
2664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
2665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
2666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4344              		.loc 1 2670 0
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 0
 4347              		@ frame_needed = 0, uses_anonymous_args = 0
 4348              		@ link register save eliminated.
 4349              	.LVL366:
2671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
2672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 4350              		.loc 1 2674 0
 4351 0000 6923     		movs	r3, #105
 4352 0002 C35C     		ldrb	r3, [r0, r3]
 4353 0004 212B     		cmp	r3, #33
 4354 0006 01D0     		beq	.L317
2675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(huart->TxXferCount == 0U)
2677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
2679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
ARM GAS  /tmp/ccPtXKna.s 			page 133


2680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
2682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
2683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_OK;
2685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
2687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
2689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         tmp = (uint16_t*) huart->pTxBuffPtr;
2691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
2692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
2693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       else
2695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
2696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
2697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
2698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->TxXferCount--;
2699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_OK;
2701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 4355              		.loc 1 2705 0
 4356 0008 0220     		movs	r0, #2
 4357              	.LVL367:
 4358              	.L312:
2706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4359              		.loc 1 2707 0
 4360              		@ sp needed
 4361 000a 7047     		bx	lr
 4362              	.LVL368:
 4363              	.L317:
2676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4364              		.loc 1 2676 0
 4365 000c 3133     		adds	r3, r3, #49
 4366 000e C35A     		ldrh	r3, [r0, r3]
 4367 0010 9BB2     		uxth	r3, r3
 4368 0012 002B     		cmp	r3, #0
 4369 0014 11D0     		beq	.L318
2688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 4370              		.loc 1 2688 0
 4371 0016 8023     		movs	r3, #128
 4372 0018 5B01     		lsls	r3, r3, #5
 4373 001a 8268     		ldr	r2, [r0, #8]
 4374 001c 9A42     		cmp	r2, r3
 4375 001e 18D0     		beq	.L319
 4376              	.L314:
2696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 4377              		.loc 1 2696 0
 4378 0020 C36C     		ldr	r3, [r0, #76]
 4379 0022 5A1C     		adds	r2, r3, #1
 4380 0024 C264     		str	r2, [r0, #76]
ARM GAS  /tmp/ccPtXKna.s 			page 134


 4381 0026 1B78     		ldrb	r3, [r3]
 4382 0028 0268     		ldr	r2, [r0]
 4383 002a 1385     		strh	r3, [r2, #40]
 4384              	.L315:
2698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4385              		.loc 1 2698 0
 4386 002c 5222     		movs	r2, #82
 4387 002e 835A     		ldrh	r3, [r0, r2]
 4388 0030 013B     		subs	r3, r3, #1
 4389 0032 9BB2     		uxth	r3, r3
 4390 0034 8352     		strh	r3, [r0, r2]
2700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4391              		.loc 1 2700 0
 4392 0036 0020     		movs	r0, #0
 4393              	.LVL369:
 4394 0038 E7E7     		b	.L312
 4395              	.LVL370:
 4396              	.L318:
2679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4397              		.loc 1 2679 0
 4398 003a 0268     		ldr	r2, [r0]
 4399 003c 1368     		ldr	r3, [r2]
 4400 003e 8021     		movs	r1, #128
 4401 0040 8B43     		bics	r3, r1
 4402 0042 1360     		str	r3, [r2]
2682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4403              		.loc 1 2682 0
 4404 0044 0268     		ldr	r2, [r0]
 4405 0046 1368     		ldr	r3, [r2]
 4406 0048 4039     		subs	r1, r1, #64
 4407 004a 0B43     		orrs	r3, r1
 4408 004c 1360     		str	r3, [r2]
2684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4409              		.loc 1 2684 0
 4410 004e 0020     		movs	r0, #0
 4411              	.LVL371:
 4412 0050 DBE7     		b	.L312
 4413              	.LVL372:
 4414              	.L319:
2688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 4415              		.loc 1 2688 0 discriminator 1
 4416 0052 0369     		ldr	r3, [r0, #16]
 4417 0054 002B     		cmp	r3, #0
 4418 0056 E3D1     		bne	.L314
 4419              	.LVL373:
2691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
 4420              		.loc 1 2691 0
 4421 0058 C36C     		ldr	r3, [r0, #76]
 4422 005a 1B88     		ldrh	r3, [r3]
 4423 005c DB05     		lsls	r3, r3, #23
 4424 005e DB0D     		lsrs	r3, r3, #23
 4425 0060 0268     		ldr	r2, [r0]
 4426 0062 1385     		strh	r3, [r2, #40]
 4427              	.LVL374:
2692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 4428              		.loc 1 2692 0
 4429 0064 C36C     		ldr	r3, [r0, #76]
ARM GAS  /tmp/ccPtXKna.s 			page 135


 4430 0066 0233     		adds	r3, r3, #2
 4431 0068 C364     		str	r3, [r0, #76]
 4432 006a DFE7     		b	.L315
 4433              		.cfi_endproc
 4434              	.LFE88:
 4436              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 4437              		.align	1
 4438              		.global	UART_EndTransmit_IT
 4439              		.syntax unified
 4440              		.code	16
 4441              		.thumb_func
 4442              		.fpu softvfp
 4444              	UART_EndTransmit_IT:
 4445              	.LFB89:
2708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
2711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *               the configuration information for the specified UART module.
2713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4446              		.loc 1 2716 0
 4447              		.cfi_startproc
 4448              		@ args = 0, pretend = 0, frame = 0
 4449              		@ frame_needed = 0, uses_anonymous_args = 0
 4450              	.LVL375:
 4451 0000 10B5     		push	{r4, lr}
 4452              	.LCFI38:
 4453              		.cfi_def_cfa_offset 8
 4454              		.cfi_offset 4, -8
 4455              		.cfi_offset 14, -4
2717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
2718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 4456              		.loc 1 2718 0
 4457 0002 0268     		ldr	r2, [r0]
 4458 0004 1368     		ldr	r3, [r2]
 4459 0006 4021     		movs	r1, #64
 4460 0008 8B43     		bics	r3, r1
 4461 000a 1360     		str	r3, [r2]
2719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4462              		.loc 1 2721 0
 4463 000c 2022     		movs	r2, #32
 4464 000e 6923     		movs	r3, #105
 4465 0010 C254     		strb	r2, [r0, r3]
2722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 4466              		.loc 1 2723 0
 4467 0012 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 4468              	.LVL376:
2724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   return HAL_OK;
2726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4469              		.loc 1 2726 0
ARM GAS  /tmp/ccPtXKna.s 			page 136


 4470 0016 0020     		movs	r0, #0
 4471              		@ sp needed
 4472 0018 10BD     		pop	{r4, pc}
 4473              		.cfi_endproc
 4474              	.LFE89:
 4476              		.section	.text.UART_Receive_IT,"ax",%progbits
 4477              		.align	1
 4478              		.global	UART_Receive_IT
 4479              		.syntax unified
 4480              		.code	16
 4481              		.thumb_func
 4482              		.fpu softvfp
 4484              	UART_Receive_IT:
 4485              	.LFB90:
2727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** /**
2729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @brief  Receive an amount of data in interrupt mode.
2730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @note   Function is called under interruption only, once
2731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
2732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @param  huart UART handle.
2733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   * @retval HAL status
2734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   */
2735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** {
 4486              		.loc 1 2736 0
 4487              		.cfi_startproc
 4488              		@ args = 0, pretend = 0, frame = 0
 4489              		@ frame_needed = 0, uses_anonymous_args = 0
 4490              	.LVL377:
 4491 0000 10B5     		push	{r4, lr}
 4492              	.LCFI39:
 4493              		.cfi_def_cfa_offset 8
 4494              		.cfi_offset 4, -8
 4495              		.cfi_offset 14, -4
2737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t* tmp;
2738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t  uhMask = huart->Mask;
 4496              		.loc 1 2738 0
 4497 0002 5C23     		movs	r3, #92
 4498 0004 C25A     		ldrh	r2, [r0, r3]
 4499              	.LVL378:
2739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint16_t  uhdata;
2740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 4500              		.loc 1 2742 0
 4501 0006 0E33     		adds	r3, r3, #14
 4502 0008 C35C     		ldrb	r3, [r0, r3]
 4503 000a 222B     		cmp	r3, #34
 4504 000c 06D0     		beq	.L327
2743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
2745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
2746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr ;
2748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       *tmp = (uint16_t)(uhdata & uhMask);
2749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pRxBuffPtr +=2U;
2750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
ARM GAS  /tmp/ccPtXKna.s 			page 137


2751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     else
2752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
2754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if(--huart->RxXferCount == 0U)
2757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
2758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
2759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
2760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
2765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
2766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
2768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return HAL_OK;
2770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
2771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_OK;
2773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   else
2775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
2776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
2777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 4505              		.loc 1 2777 0
 4506 000e 0268     		ldr	r2, [r0]
 4507              	.LVL379:
 4508 0010 9369     		ldr	r3, [r2, #24]
 4509 0012 0821     		movs	r1, #8
 4510 0014 0B43     		orrs	r3, r1
 4511 0016 9361     		str	r3, [r2, #24]
 4512              	.LVL380:
2778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
2779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return HAL_BUSY;
 4513              		.loc 1 2779 0
 4514 0018 0220     		movs	r0, #2
 4515              	.LVL381:
 4516              	.L325:
2780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
2781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** }
 4517              		.loc 1 2781 0
 4518              		@ sp needed
 4519 001a 10BD     		pop	{r4, pc}
 4520              	.LVL382:
 4521              	.L327:
2744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 4522              		.loc 1 2744 0
 4523 001c 0368     		ldr	r3, [r0]
 4524 001e 9B8C     		ldrh	r3, [r3, #36]
 4525 0020 9BB2     		uxth	r3, r3
 4526              	.LVL383:
2745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4527              		.loc 1 2745 0
 4528 0022 8021     		movs	r1, #128
ARM GAS  /tmp/ccPtXKna.s 			page 138


 4529 0024 4901     		lsls	r1, r1, #5
 4530 0026 8468     		ldr	r4, [r0, #8]
 4531 0028 8C42     		cmp	r4, r1
 4532 002a 0ED0     		beq	.L328
 4533              	.L323:
2753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4534              		.loc 1 2753 0
 4535 002c 416D     		ldr	r1, [r0, #84]
 4536 002e 4C1C     		adds	r4, r1, #1
 4537 0030 4465     		str	r4, [r0, #84]
 4538 0032 D2B2     		uxtb	r2, r2
 4539              	.LVL384:
 4540 0034 1A40     		ands	r2, r3
 4541 0036 0A70     		strb	r2, [r1]
 4542              	.LVL385:
 4543              	.L324:
2756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4544              		.loc 1 2756 0
 4545 0038 5A22     		movs	r2, #90
 4546 003a 835A     		ldrh	r3, [r0, r2]
 4547 003c 013B     		subs	r3, r3, #1
 4548 003e 9BB2     		uxth	r3, r3
 4549 0040 8352     		strh	r3, [r0, r2]
 4550 0042 002B     		cmp	r3, #0
 4551 0044 0BD0     		beq	.L329
2772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4552              		.loc 1 2772 0
 4553 0046 0020     		movs	r0, #0
 4554              	.LVL386:
 4555 0048 E7E7     		b	.L325
 4556              	.LVL387:
 4557              	.L328:
2745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4558              		.loc 1 2745 0 discriminator 1
 4559 004a 0169     		ldr	r1, [r0, #16]
 4560 004c 0029     		cmp	r1, #0
 4561 004e EDD1     		bne	.L323
 4562              	.LVL388:
2748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       huart->pRxBuffPtr +=2U;
 4563              		.loc 1 2748 0
 4564 0050 1A40     		ands	r2, r3
 4565              	.LVL389:
 4566 0052 436D     		ldr	r3, [r0, #84]
 4567              	.LVL390:
 4568 0054 1A80     		strh	r2, [r3]
 4569              	.LVL391:
2749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4570              		.loc 1 2749 0
 4571 0056 436D     		ldr	r3, [r0, #84]
 4572              	.LVL392:
 4573 0058 0233     		adds	r3, r3, #2
 4574 005a 4365     		str	r3, [r0, #84]
 4575 005c ECE7     		b	.L324
 4576              	.L329:
2759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4577              		.loc 1 2759 0
 4578 005e 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccPtXKna.s 			page 139


 4579 0060 1368     		ldr	r3, [r2]
 4580 0062 0849     		ldr	r1, .L330
 4581 0064 0B40     		ands	r3, r1
 4582 0066 1360     		str	r3, [r2]
2762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4583              		.loc 1 2762 0
 4584 0068 0268     		ldr	r2, [r0]
 4585 006a 9368     		ldr	r3, [r2, #8]
 4586 006c 2331     		adds	r1, r1, #35
 4587 006e FF31     		adds	r1, r1, #255
 4588 0070 8B43     		bics	r3, r1
 4589 0072 9360     		str	r3, [r2, #8]
2765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4590              		.loc 1 2765 0
 4591 0074 2022     		movs	r2, #32
 4592 0076 6A23     		movs	r3, #106
 4593 0078 C254     		strb	r2, [r0, r3]
2767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4594              		.loc 1 2767 0
 4595 007a FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 4596              	.LVL393:
2769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4597              		.loc 1 2769 0
 4598 007e 0020     		movs	r0, #0
 4599 0080 CBE7     		b	.L325
 4600              	.L331:
 4601 0082 C046     		.align	2
 4602              	.L330:
 4603 0084 DFFEFFFF 		.word	-289
 4604              		.cfi_endproc
 4605              	.LFE90:
 4607              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 4608              		.align	1
 4609              		.global	HAL_UART_IRQHandler
 4610              		.syntax unified
 4611              		.code	16
 4612              		.thumb_func
 4613              		.fpu softvfp
 4615              	HAL_UART_IRQHandler:
 4616              	.LFB56:
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 4617              		.loc 1 1657 0
 4618              		.cfi_startproc
 4619              		@ args = 0, pretend = 0, frame = 0
 4620              		@ frame_needed = 0, uses_anonymous_args = 0
 4621              	.LVL394:
 4622 0000 70B5     		push	{r4, r5, r6, lr}
 4623              	.LCFI40:
 4624              		.cfi_def_cfa_offset 16
 4625              		.cfi_offset 4, -16
 4626              		.cfi_offset 5, -12
 4627              		.cfi_offset 6, -8
 4628              		.cfi_offset 14, -4
 4629 0002 0400     		movs	r4, r0
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 4630              		.loc 1 1658 0
 4631 0004 0168     		ldr	r1, [r0]
ARM GAS  /tmp/ccPtXKna.s 			page 140


 4632 0006 CB69     		ldr	r3, [r1, #28]
 4633              	.LVL395:
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   uint32_t cr3its;
 4634              		.loc 1 1659 0
 4635 0008 0868     		ldr	r0, [r1]
 4636              	.LVL396:
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if (errorflags == RESET)
 4637              		.loc 1 1664 0
 4638 000a 0F22     		movs	r2, #15
 4639 000c 1A40     		ands	r2, r3
 4640              	.LVL397:
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4641              		.loc 1 1665 0
 4642 000e 03D1     		bne	.L333
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4643              		.loc 1 1668 0
 4644 0010 9D06     		lsls	r5, r3, #26
 4645 0012 01D5     		bpl	.L333
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4646              		.loc 1 1668 0 is_stmt 0 discriminator 1
 4647 0014 8506     		lsls	r5, r0, #26
 4648 0016 5BD4     		bmi	.L349
 4649              	.L333:
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   if(   (errorflags != RESET)
 4650              		.loc 1 1676 0 is_stmt 1
 4651 0018 8D68     		ldr	r5, [r1, #8]
 4652              	.LVL398:
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****      && (   ((cr3its & USART_CR3_EIE) != RESET)
 4653              		.loc 1 1677 0
 4654 001a 002A     		cmp	r2, #0
 4655 001c 6ED0     		beq	.L335
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 4656              		.loc 1 1678 0
 4657 001e 0122     		movs	r2, #1
 4658              	.LVL399:
 4659 0020 2A40     		ands	r2, r5
 4660 0022 03D1     		bne	.L336
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4661              		.loc 1 1679 0
 4662 0024 9026     		movs	r6, #144
 4663 0026 7600     		lsls	r6, r6, #1
 4664 0028 3042     		tst	r0, r6
 4665 002a 67D0     		beq	.L335
 4666              	.L336:
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4667              		.loc 1 1682 0
 4668 002c DD07     		lsls	r5, r3, #31
 4669 002e 06D5     		bpl	.L337
 4670              	.LVL400:
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4671              		.loc 1 1682 0 is_stmt 0 discriminator 1
 4672 0030 C505     		lsls	r5, r0, #23
 4673 0032 04D5     		bpl	.L337
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4674              		.loc 1 1684 0 is_stmt 1
 4675 0034 0125     		movs	r5, #1
 4676 0036 0D62     		str	r5, [r1, #32]
ARM GAS  /tmp/ccPtXKna.s 			page 141


1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4677              		.loc 1 1686 0
 4678 0038 E16E     		ldr	r1, [r4, #108]
 4679 003a 2943     		orrs	r1, r5
 4680 003c E166     		str	r1, [r4, #108]
 4681              	.L337:
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4682              		.loc 1 1690 0
 4683 003e 9907     		lsls	r1, r3, #30
 4684 0040 08D5     		bpl	.L338
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4685              		.loc 1 1690 0 is_stmt 0 discriminator 1
 4686 0042 002A     		cmp	r2, #0
 4687 0044 06D0     		beq	.L338
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4688              		.loc 1 1692 0 is_stmt 1
 4689 0046 2168     		ldr	r1, [r4]
 4690 0048 0225     		movs	r5, #2
 4691 004a 0D62     		str	r5, [r1, #32]
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4692              		.loc 1 1694 0
 4693 004c E16E     		ldr	r1, [r4, #108]
 4694 004e 0235     		adds	r5, r5, #2
 4695 0050 2943     		orrs	r1, r5
 4696 0052 E166     		str	r1, [r4, #108]
 4697              	.L338:
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4698              		.loc 1 1698 0
 4699 0054 5907     		lsls	r1, r3, #29
 4700 0056 08D5     		bpl	.L339
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4701              		.loc 1 1698 0 is_stmt 0 discriminator 1
 4702 0058 002A     		cmp	r2, #0
 4703 005a 06D0     		beq	.L339
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4704              		.loc 1 1700 0 is_stmt 1
 4705 005c 2168     		ldr	r1, [r4]
 4706 005e 0425     		movs	r5, #4
 4707 0060 0D62     		str	r5, [r1, #32]
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4708              		.loc 1 1702 0
 4709 0062 E16E     		ldr	r1, [r4, #108]
 4710 0064 023D     		subs	r5, r5, #2
 4711 0066 2943     		orrs	r1, r5
 4712 0068 E166     		str	r1, [r4, #108]
 4713              	.L339:
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 4714              		.loc 1 1706 0
 4715 006a 1907     		lsls	r1, r3, #28
 4716 006c 09D5     		bpl	.L340
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****        (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 4717              		.loc 1 1706 0 is_stmt 0 discriminator 1
 4718 006e 8106     		lsls	r1, r0, #26
 4719 0070 01D4     		bmi	.L341
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4720              		.loc 1 1707 0 is_stmt 1
 4721 0072 002A     		cmp	r2, #0
ARM GAS  /tmp/ccPtXKna.s 			page 142


 4722 0074 05D0     		beq	.L340
 4723              	.L341:
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4724              		.loc 1 1709 0
 4725 0076 2268     		ldr	r2, [r4]
 4726 0078 0821     		movs	r1, #8
 4727 007a 1162     		str	r1, [r2, #32]
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4728              		.loc 1 1711 0
 4729 007c E26E     		ldr	r2, [r4, #108]
 4730 007e 0A43     		orrs	r2, r1
 4731 0080 E266     		str	r2, [r4, #108]
 4732              	.L340:
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     {
 4733              		.loc 1 1715 0
 4734 0082 E26E     		ldr	r2, [r4, #108]
 4735 0084 002A     		cmp	r2, #0
 4736 0086 45D0     		beq	.L332
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 4737              		.loc 1 1718 0
 4738 0088 9B06     		lsls	r3, r3, #26
 4739 008a 01D5     		bpl	.L342
 4740              	.LVL401:
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {
 4741              		.loc 1 1718 0 is_stmt 0 discriminator 1
 4742 008c 8306     		lsls	r3, r0, #26
 4743 008e 23D4     		bmi	.L350
 4744              	.LVL402:
 4745              	.L342:
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 4746              		.loc 1 1725 0 is_stmt 1
 4747 0090 E36E     		ldr	r3, [r4, #108]
 4748 0092 1B07     		lsls	r3, r3, #28
 4749 0094 03D4     		bmi	.L343
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       {  
 4750              		.loc 1 1726 0 discriminator 1
 4751 0096 2368     		ldr	r3, [r4]
 4752 0098 9B68     		ldr	r3, [r3, #8]
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 4753              		.loc 1 1725 0 discriminator 1
 4754 009a 5B06     		lsls	r3, r3, #25
 4755 009c 28D5     		bpl	.L344
 4756              	.L343:
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4757              		.loc 1 1731 0
 4758 009e 2000     		movs	r0, r4
 4759 00a0 FFF7FEFF 		bl	UART_EndRxTransfer
 4760              	.LVL403:
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         {
 4761              		.loc 1 1734 0
 4762 00a4 2368     		ldr	r3, [r4]
 4763 00a6 9A68     		ldr	r2, [r3, #8]
 4764 00a8 5206     		lsls	r2, r2, #25
 4765 00aa 1DD5     		bpl	.L345
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4766              		.loc 1 1736 0
 4767 00ac 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccPtXKna.s 			page 143


 4768 00ae 4021     		movs	r1, #64
 4769 00b0 8A43     		bics	r2, r1
 4770 00b2 9A60     		str	r2, [r3, #8]
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           {
 4771              		.loc 1 1739 0
 4772 00b4 636E     		ldr	r3, [r4, #100]
 4773 00b6 002B     		cmp	r3, #0
 4774 00b8 12D0     		beq	.L346
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4775              		.loc 1 1743 0
 4776 00ba 214A     		ldr	r2, .L354
 4777 00bc 5A63     		str	r2, [r3, #52]
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             {
 4778              		.loc 1 1746 0
 4779 00be 606E     		ldr	r0, [r4, #100]
 4780 00c0 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 4781              	.LVL404:
 4782 00c4 0028     		cmp	r0, #0
 4783 00c6 25D0     		beq	.L332
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****             }
 4784              		.loc 1 1749 0
 4785 00c8 606E     		ldr	r0, [r4, #100]
 4786 00ca 436B     		ldr	r3, [r0, #52]
 4787 00cc 9847     		blx	r3
 4788              	.LVL405:
 4789 00ce 21E0     		b	.L332
 4790              	.LVL406:
 4791              	.L349:
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       return;
 4792              		.loc 1 1670 0
 4793 00d0 2000     		movs	r0, r4
 4794              	.LVL407:
 4795 00d2 FFF7FEFF 		bl	UART_Receive_IT
 4796              	.LVL408:
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     }
 4797              		.loc 1 1671 0
 4798 00d6 1DE0     		b	.L332
 4799              	.LVL409:
 4800              	.L350:
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 4801              		.loc 1 1720 0
 4802 00d8 2000     		movs	r0, r4
 4803              	.LVL410:
 4804 00da FFF7FEFF 		bl	UART_Receive_IT
 4805              	.LVL411:
 4806 00de D7E7     		b	.L342
 4807              	.L346:
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****           }
 4808              		.loc 1 1755 0
 4809 00e0 2000     		movs	r0, r4
 4810 00e2 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 4811              	.LVL412:
 4812 00e6 15E0     		b	.L332
 4813              	.L345:
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         }
 4814              		.loc 1 1761 0
 4815 00e8 2000     		movs	r0, r4
ARM GAS  /tmp/ccPtXKna.s 			page 144


 4816 00ea FFF7FEFF 		bl	HAL_UART_ErrorCallback
 4817              	.LVL413:
 4818 00ee 11E0     		b	.L332
 4819              	.L344:
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 4820              		.loc 1 1768 0
 4821 00f0 2000     		movs	r0, r4
 4822 00f2 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 4823              	.LVL414:
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****       }
 4824              		.loc 1 1769 0
 4825 00f6 0023     		movs	r3, #0
 4826 00f8 E366     		str	r3, [r4, #108]
 4827 00fa 0BE0     		b	.L332
 4828              	.LVL415:
 4829              	.L335:
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4830              		.loc 1 1778 0
 4831 00fc DA02     		lsls	r2, r3, #11
 4832 00fe 01D5     		bpl	.L347
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4833              		.loc 1 1778 0 is_stmt 0 discriminator 1
 4834 0100 6A02     		lsls	r2, r5, #9
 4835 0102 08D4     		bmi	.L351
 4836              	.L347:
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4837              		.loc 1 1790 0 is_stmt 1
 4838 0104 1A06     		lsls	r2, r3, #24
 4839 0106 01D5     		bpl	.L348
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4840              		.loc 1 1790 0 is_stmt 0 discriminator 1
 4841 0108 0206     		lsls	r2, r0, #24
 4842 010a 10D4     		bmi	.L352
 4843              	.L348:
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4844              		.loc 1 1797 0 is_stmt 1
 4845 010c 5B06     		lsls	r3, r3, #25
 4846 010e 01D5     		bpl	.L332
 4847              	.LVL416:
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   {
 4848              		.loc 1 1797 0 is_stmt 0 discriminator 1
 4849 0110 4306     		lsls	r3, r0, #25
 4850 0112 10D4     		bmi	.L353
 4851              	.LVL417:
 4852              	.L332:
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c **** 
 4853              		.loc 1 1803 0 is_stmt 1
 4854              		@ sp needed
 4855              	.LVL418:
 4856 0114 70BD     		pop	{r4, r5, r6, pc}
 4857              	.LVL419:
 4858              	.L351:
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     /* Set the UART state ready to be able to start again the process */
 4859              		.loc 1 1780 0
 4860 0116 8023     		movs	r3, #128
 4861              	.LVL420:
 4862 0118 5B03     		lsls	r3, r3, #13
ARM GAS  /tmp/ccPtXKna.s 			page 145


 4863 011a 0B62     		str	r3, [r1, #32]
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4864              		.loc 1 1782 0
 4865 011c 2023     		movs	r3, #32
 4866 011e 6922     		movs	r2, #105
 4867 0120 A354     		strb	r3, [r4, r2]
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
 4868              		.loc 1 1783 0
 4869 0122 0132     		adds	r2, r2, #1
 4870 0124 A354     		strb	r3, [r4, r2]
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
 4871              		.loc 1 1784 0
 4872 0126 2000     		movs	r0, r4
 4873              	.LVL421:
 4874 0128 FFF7FEFF 		bl	HAL_UARTEx_WakeupCallback
 4875              	.LVL422:
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4876              		.loc 1 1785 0
 4877 012c F2E7     		b	.L332
 4878              	.LVL423:
 4879              	.L352:
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
 4880              		.loc 1 1792 0
 4881 012e 2000     		movs	r0, r4
 4882              	.LVL424:
 4883 0130 FFF7FEFF 		bl	UART_Transmit_IT
 4884              	.LVL425:
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4885              		.loc 1 1793 0
 4886 0134 EEE7     		b	.L332
 4887              	.LVL426:
 4888              	.L353:
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****     return;
 4889              		.loc 1 1799 0
 4890 0136 2000     		movs	r0, r4
 4891              	.LVL427:
 4892 0138 FFF7FEFF 		bl	UART_EndTransmit_IT
 4893              	.LVL428:
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_uart.c ****   }
 4894              		.loc 1 1800 0
 4895 013c EAE7     		b	.L332
 4896              	.L355:
 4897 013e C046     		.align	2
 4898              	.L354:
 4899 0140 00000000 		.word	UART_DMAAbortOnError
 4900              		.cfi_endproc
 4901              	.LFE56:
 4903              		.text
 4904              	.Letext0:
 4905              		.file 2 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machin
 4906              		.file 3 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_s
 4907              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 4908              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 4909              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 4910              		.file 7 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lo
 4911              		.file 8 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_t
 4912              		.file 9 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/
ARM GAS  /tmp/ccPtXKna.s 			page 146


 4913              		.file 10 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/r
 4914              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 4915              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 4916              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 4917              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 4918              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 4919              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart_ex.h"
ARM GAS  /tmp/ccPtXKna.s 			page 147


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_uart.c
     /tmp/ccPtXKna.s:16     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccPtXKna.s:22     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccPtXKna.s:48     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccPtXKna.s:54     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccPtXKna.s:85     .text.UART_EndRxTransfer:0000000000000020 $d
     /tmp/ccPtXKna.s:90     .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccPtXKna.s:97     .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccPtXKna.s:112    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccPtXKna.s:119    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccPtXKna.s:134    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccPtXKna.s:141    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccPtXKna.s:208    .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:215    .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccPtXKna.s:323    .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:330    .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccPtXKna.s:495    .text.HAL_UART_Receive_IT:00000000000000b0 $d
     /tmp/ccPtXKna.s:500    .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccPtXKna.s:507    .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccPtXKna.s:641    .text.HAL_UART_Transmit_DMA:000000000000009c $d
     /tmp/ccPtXKna.s:1372   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccPtXKna.s:1455   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccPtXKna.s:1653   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccPtXKna.s:648    .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccPtXKna.s:655    .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccPtXKna.s:795    .text.HAL_UART_Receive_DMA:00000000000000a4 $d
     /tmp/ccPtXKna.s:1508   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccPtXKna.s:1600   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccPtXKna.s:802    .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccPtXKna.s:809    .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccPtXKna.s:897    .text.HAL_UART_DMAPause:0000000000000068 $d
     /tmp/ccPtXKna.s:902    .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccPtXKna.s:909    .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccPtXKna.s:992    .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccPtXKna.s:999    .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccPtXKna.s:1086   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccPtXKna.s:1093   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccPtXKna.s:1192   .text.HAL_UART_Abort:000000000000007c $d
     /tmp/ccPtXKna.s:1197   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccPtXKna.s:1204   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccPtXKna.s:1263   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccPtXKna.s:1270   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccPtXKna.s:1339   .text.HAL_UART_AbortReceive:0000000000000050 $d
     /tmp/ccPtXKna.s:1344   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:1351   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccPtXKna.s:1366   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccPtXKna.s:1427   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:1434   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccPtXKna.s:1449   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccPtXKna.s:1480   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:1487   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccPtXKna.s:1502   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccPtXKna.s:1567   .text.UART_DMAReceiveCplt:0000000000000040 $d
     /tmp/ccPtXKna.s:1572   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:1579   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccPtXKna.s:1594   .text.UART_DMARxHalfCplt:0000000000000000 $t
ARM GAS  /tmp/ccPtXKna.s 			page 148


     /tmp/ccPtXKna.s:1625   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:1632   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccPtXKna.s:1647   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccPtXKna.s:1730   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccPtXKna.s:1736   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccPtXKna.s:1768   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:1775   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccPtXKna.s:1790   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:1797   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccPtXKna.s:1980   .text.HAL_UART_Abort_IT:00000000000000d4 $d
     /tmp/ccPtXKna.s:2061   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccPtXKna.s:1993   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccPtXKna.s:1987   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:2055   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:2123   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:2130   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccPtXKna.s:2145   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:2152   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccPtXKna.s:2240   .text.HAL_UART_AbortTransmit_IT:0000000000000064 $d
     /tmp/ccPtXKna.s:2251   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccPtXKna.s:2245   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:2284   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:2291   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccPtXKna.s:2306   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:2313   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccPtXKna.s:2415   .text.HAL_UART_AbortReceive_IT:0000000000000078 $d
     /tmp/ccPtXKna.s:2427   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccPtXKna.s:2421   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccPtXKna.s:2464   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccPtXKna.s:2471   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccPtXKna.s:2492   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccPtXKna.s:2499   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccPtXKna.s:2560   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccPtXKna.s:2567   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccPtXKna.s:2628   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccPtXKna.s:2635   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccPtXKna.s:2661   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccPtXKna.s:2668   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccPtXKna.s:2687   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccPtXKna.s:2694   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccPtXKna.s:3020   .text.UART_SetConfig:0000000000000194 $d
     /tmp/ccPtXKna.s:3032   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/ccPtXKna.s:3039   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/ccPtXKna.s:3173   .text.UART_AdvFeatureConfig:00000000000000bc $d
     /tmp/ccPtXKna.s:3186   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccPtXKna.s:3193   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccPtXKna.s:3286   .text.UART_WaitOnFlagUntilTimeout:0000000000000068 $d
     /tmp/ccPtXKna.s:3291   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccPtXKna.s:3298   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccPtXKna.s:3499   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccPtXKna.s:3506   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccPtXKna.s:3738   .text.HAL_UART_Receive:000000000000010c $d
     /tmp/ccPtXKna.s:3743   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccPtXKna.s:3750   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccPtXKna.s:3852   .text.UART_CheckIdleState:0000000000000070 $d
     /tmp/ccPtXKna.s:3858   .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccPtXKna.s:3865   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
ARM GAS  /tmp/ccPtXKna.s 			page 149


     /tmp/ccPtXKna.s:3960   .text.HAL_UART_Init:000000000000006c $d
     /tmp/ccPtXKna.s:3965   .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccPtXKna.s:3972   .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccPtXKna.s:4073   .text.HAL_HalfDuplex_Init:0000000000000078 $d
     /tmp/ccPtXKna.s:4078   .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccPtXKna.s:4085   .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccPtXKna.s:4210   .text.HAL_MultiProcessor_Init:0000000000000098 $d
     /tmp/ccPtXKna.s:4216   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/ccPtXKna.s:4223   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccPtXKna.s:4274   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/ccPtXKna.s:4281   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/ccPtXKna.s:4330   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000030 $d
     /tmp/ccPtXKna.s:4335   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:4342   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccPtXKna.s:4437   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:4444   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccPtXKna.s:4477   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccPtXKna.s:4484   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccPtXKna.s:4603   .text.UART_Receive_IT:0000000000000084 $d
     /tmp/ccPtXKna.s:4608   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccPtXKna.s:4615   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccPtXKna.s:4899   .text.HAL_UART_IRQHandler:0000000000000140 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
__aeabi_uidiv
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetSysClockFreq
HAL_GetTick
HAL_UARTEx_WakeupCallback
