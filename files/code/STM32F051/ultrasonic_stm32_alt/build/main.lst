ARM GAS  /tmp/cc3mDgG2.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB62:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/cc3mDgG2.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f0xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** /* USER CODE END Includes */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  47:Src/main.c    **** ADC_HandleTypeDef hadc;
  48:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  49:Src/main.c    **** 
  50:Src/main.c    **** TIM_HandleTypeDef htim1;
  51:Src/main.c    **** TIM_HandleTypeDef htim16;
  52:Src/main.c    **** TIM_HandleTypeDef htim17;
  53:Src/main.c    **** 
  54:Src/main.c    **** UART_HandleTypeDef huart1;
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** #ifdef __GNUC__
  59:Src/main.c    **** #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  60:Src/main.c    **** #else
  61:Src/main.c    **** #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  62:Src/main.c    **** #endif /* __GNUC__ */
  63:Src/main.c    **** 
  64:Src/main.c    **** 
  65:Src/main.c    **** PUTCHAR_PROTOTYPE
  66:Src/main.c    **** {
  67:Src/main.c    **** HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
  68:Src/main.c    **** 
  69:Src/main.c    **** return ch;
  70:Src/main.c    **** }
  71:Src/main.c    **** 
  72:Src/main.c    **** 
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  75:Src/main.c    **** 
  76:Src/main.c    **** 
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PV */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  81:Src/main.c    **** void SystemClock_Config(void);
  82:Src/main.c    **** static void MX_GPIO_Init(void);
  83:Src/main.c    **** static void MX_DMA_Init(void);
  84:Src/main.c    **** static void MX_USART1_UART_Init(void);
  85:Src/main.c    **** static void MX_TIM1_Init(void);
  86:Src/main.c    **** static void MX_ADC_Init(void);
  87:Src/main.c    **** static void MX_TIM16_Init(void);
  88:Src/main.c    **** static void MX_TIM17_Init(void);
  89:Src/main.c    **** 
  90:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  91:Src/main.c    **** 
ARM GAS  /tmp/cc3mDgG2.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE BEGIN PFP */
  94:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  95:Src/main.c    **** 
  96:Src/main.c    **** /* USER CODE END PFP */
  97:Src/main.c    **** 
  98:Src/main.c    **** /* USER CODE BEGIN 0 */
  99:Src/main.c    **** 
 100:Src/main.c    **** #define ADC_SAMPLE_WIDTH 1024
 101:Src/main.c    **** #define POT_DELAY 100
 102:Src/main.c    **** #define MAX_PULSE_COUNT 70
 103:Src/main.c    **** 
 104:Src/main.c    **** #define PULSE_START 0
 105:Src/main.c    **** #define PULSE_END 1
 106:Src/main.c    **** #define PULSE_AMPLITUDE 2
 107:Src/main.c    **** 
 108:Src/main.c    **** static uint16_t adc_samples[ADC_SAMPLE_WIDTH];
 109:Src/main.c    **** static uint16_t pulses[MAX_PULSE_COUNT][3]; //[[pulse start, pulse end, pulse amplitude],...]
 110:Src/main.c    **** int pulse_number = 0;
 111:Src/main.c    **** 
 112:Src/main.c    **** static uint16_t digital_pulses[MAX_PULSE_COUNT][2]; //[[pulse start, pulse end],...]
 113:Src/main.c    **** int digital_pulse_number = 0;
 114:Src/main.c    **** 
 115:Src/main.c    **** 
 116:Src/main.c    **** volatile int adc_done = 0;
 117:Src/main.c    **** volatile int piezo_state = 0;
 118:Src/main.c    **** volatile int piezo_pulses = 0;
 119:Src/main.c    **** 
 120:Src/main.c    **** /////////////////////TIMERS////////////////////
 121:Src/main.c    **** 
 122:Src/main.c    **** void boost_pwm(uint16_t value)
 123:Src/main.c    **** {
 124:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 125:Src/main.c    **** 
 126:Src/main.c    ****     sConfigOC.OCMode = TIM_OCMODE_PWM1;
 127:Src/main.c    ****     sConfigOC.Pulse = value;
 128:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 129:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 130:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 131:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 132:Src/main.c    **** }
 133:Src/main.c    **** 
 134:Src/main.c    **** void wait_cycles(uint32_t cycles){ //0.19 us per cycle
 135:Src/main.c    ****   volatile int cycle_counter = 0;
 136:Src/main.c    ****   for(cycle_counter = 0;cycle_counter<cycles;cycle_counter++){
 137:Src/main.c    ****   }
 138:Src/main.c    **** }
 139:Src/main.c    **** 
 140:Src/main.c    **** void break_before(){
 141:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,0);
 142:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,0);
 143:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,0);
 144:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,0);
 145:Src/main.c    **** }
 146:Src/main.c    **** 
 147:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 148:Src/main.c    **** {
ARM GAS  /tmp/cc3mDgG2.s 			page 4


 149:Src/main.c    ****   if(piezo_pulses){
 150:Src/main.c    ****     if(piezo_state){
 151:Src/main.c    ****       break_before(); //break before make.
 152:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,1);
 153:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,0);
 154:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,0);
 155:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,1);
 156:Src/main.c    ****     }
 157:Src/main.c    ****     else{
 158:Src/main.c    ****       break_before();
 159:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,0);
 160:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,1);
 161:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,1);
 162:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,0);
 163:Src/main.c    ****     }
 164:Src/main.c    ****     piezo_state = !piezo_state;
 165:Src/main.c    ****     piezo_pulses--;
 166:Src/main.c    ****   }
 167:Src/main.c    ****   else{
 168:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,0);
 169:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,0);
 170:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,0);
 171:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,0); //monitor boost voltage.
 172:Src/main.c    ****   }
 173:Src/main.c    **** }
 174:Src/main.c    **** 
 175:Src/main.c    **** void set_tx_frequency(uint32_t freq){
 176:Src/main.c    ****   htim16.Instance = TIM16;
 177:Src/main.c    ****   htim16.Init.Prescaler = 0;
 178:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 179:Src/main.c    ****   htim16.Init.Period = (24000000UL/freq);
 180:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 181:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 182:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 183:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 184:Src/main.c    ****   {
 185:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 186:Src/main.c    ****   }
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** /////////////////////RESISTORS///////////////////////
 190:Src/main.c    **** 
 191:Src/main.c    **** //CS_GAIN_Pin
 192:Src/main.c    **** //CS_HP_Pin
 193:Src/main.c    **** //CS_LP_Pin
 194:Src/main.c    **** void reset_resistor(GPIO_TypeDef* CS_Port, uint16_t CS_Pin){
 195:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 1);
 196:Src/main.c    ****   wait_cycles(POT_DELAY);
 197:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);
 198:Src/main.c    ****   wait_cycles(POT_DELAY);
 199:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);
 200:Src/main.c    **** 
 201:Src/main.c    ****   for(int i = 0; i<100; i++){ //overrun the 64 positions to make sure we're all the way up.
 202:Src/main.c    ****     wait_cycles(POT_DELAY);
 203:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 204:Src/main.c    ****     wait_cycles(POT_DELAY);
 205:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 1);
ARM GAS  /tmp/cc3mDgG2.s 			page 5


 206:Src/main.c    ****   }
 207:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);
 208:Src/main.c    ****   wait_cycles(POT_DELAY);
 209:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 210:Src/main.c    **** }
 211:Src/main.c    **** 
 212:Src/main.c    **** void set_resistor(int value, GPIO_TypeDef* CS_Port, uint16_t CS_Pin){
 213:Src/main.c    ****   reset_resistor(CS_Port,CS_Pin);
 214:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 215:Src/main.c    ****   wait_cycles(POT_DELAY);
 216:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);
 217:Src/main.c    ****   wait_cycles(POT_DELAY);
 218:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);
 219:Src/main.c    **** 
 220:Src/main.c    ****   for(int i = 0; i<(64-value); i++){ //overrun the 64 positions to make sure we're all the way up.
 221:Src/main.c    ****     wait_cycles(POT_DELAY);
 222:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 1);
 223:Src/main.c    ****     wait_cycles(POT_DELAY);
 224:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 225:Src/main.c    ****   }
 226:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);
 227:Src/main.c    ****   wait_cycles(POT_DELAY);
 228:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 229:Src/main.c    **** }
 230:Src/main.c    **** 
 231:Src/main.c    **** ////////////////////ADC////////////////////////
 232:Src/main.c    **** 
 233:Src/main.c    **** void switch_adc_channel(uint32_t channel){
 234:Src/main.c    ****   HAL_ADC_DeInit(&hadc);
 235:Src/main.c    ****   MX_ADC_Init();
 236:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 237:Src/main.c    ****   sConfig.Channel = channel;
 238:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 239:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 240:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 241:Src/main.c    ****   {
 242:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 243:Src/main.c    ****   }
 244:Src/main.c    **** }
 245:Src/main.c    **** 
 246:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 247:Src/main.c    ****   adc_done = 1;
 248:Src/main.c    **** }
 249:Src/main.c    **** 
 250:Src/main.c    **** void read_adc_channel(uint32_t channel,uint32_t len){
 251:Src/main.c    ****   HAL_ADC_Stop_DMA(&hadc);
 252:Src/main.c    ****   switch_adc_channel(channel);
 253:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_samples, len);
 254:Src/main.c    ****   while(!adc_done);
 255:Src/main.c    ****   HAL_ADC_Stop_DMA(&hadc);
 256:Src/main.c    **** }
 257:Src/main.c    **** 
 258:Src/main.c    **** float get_boost_voltage(){
 259:Src/main.c    ****   read_adc_channel(ADC_CHANNEL_3,128);
 260:Src/main.c    ****   return (((adc_samples[0]/4096.0)*3.3)/0.0909);
 261:Src/main.c    **** }
 262:Src/main.c    **** 
ARM GAS  /tmp/cc3mDgG2.s 			page 6


 263:Src/main.c    **** void dump_raw_samples(){
 264:Src/main.c    ****   for(int i = 0;i<ADC_SAMPLE_WIDTH;i++){
 265:Src/main.c    ****     printf("%i,%i\r\n",i,adc_samples[i]);
 266:Src/main.c    ****   }
 267:Src/main.c    **** }
 268:Src/main.c    **** 
 269:Src/main.c    **** ////////////////////PROCESSING////////////////////////
 270:Src/main.c    **** uint16_t peak_detect(uint16_t start, uint16_t end){
 271:Src/main.c    ****   uint16_t peak = 0;
 272:Src/main.c    ****   for(start;start<end;start++){
 273:Src/main.c    ****     if(adc_samples[start] > peak){
 274:Src/main.c    ****       peak = adc_samples[start];
 275:Src/main.c    ****     }
 276:Src/main.c    ****   }
 277:Src/main.c    ****   return peak;
 278:Src/main.c    **** }
 279:Src/main.c    **** 
 280:Src/main.c    **** uint16_t peak_sample(){
 281:Src/main.c    ****   uint16_t peak = 0;
 282:Src/main.c    ****   uint16_t peak_sample = 0;
 283:Src/main.c    **** 
 284:Src/main.c    ****   for(uint16_t i = 0;i<ADC_SAMPLE_WIDTH;i++){
 285:Src/main.c    ****     if(adc_samples[i] > peak){
 286:Src/main.c    ****       peak = adc_samples[i];
 287:Src/main.c    ****       peak_sample = i;
 288:Src/main.c    ****     }
 289:Src/main.c    ****   }
 290:Src/main.c    ****   return peak_sample;
 291:Src/main.c    **** }
 292:Src/main.c    **** 
 293:Src/main.c    **** // int reject_pulses(){
 294:Src/main.c    **** //
 295:Src/main.c    **** // }
 296:Src/main.c    **** 
 297:Src/main.c    **** ///////////////////////////PULSES///////////////////////
 298:Src/main.c    **** 
 299:Src/main.c    **** void set_pulse_amplitudes(){
 300:Src/main.c    ****   for(int i = 0;i<pulse_number;i++){
 301:Src/main.c    ****     pulses[i][PULSE_AMPLITUDE] = peak_detect(pulses[i][PULSE_START],pulses[i][PULSE_END]);
 302:Src/main.c    ****   }
 303:Src/main.c    **** }
 304:Src/main.c    **** 
 305:Src/main.c    **** void split_into_pulses(){
 306:Src/main.c    ****   uint16_t threshold = 3;
 307:Src/main.c    ****   pulse_number = 0;
 308:Src/main.c    ****   int pulse_found = 0;
 309:Src/main.c    ****   for(uint16_t i = 0;i<ADC_SAMPLE_WIDTH;i++){
 310:Src/main.c    ****     if(pulse_number > MAX_PULSE_COUNT-2){
 311:Src/main.c    ****       break;
 312:Src/main.c    ****     }
 313:Src/main.c    ****     if(adc_samples[i] > threshold){
 314:Src/main.c    ****       if(!pulse_found){
 315:Src/main.c    ****         pulses[pulse_number][PULSE_START] = i;
 316:Src/main.c    ****       }
 317:Src/main.c    ****       pulse_found = 1;
 318:Src/main.c    ****     }
 319:Src/main.c    ****     else{
ARM GAS  /tmp/cc3mDgG2.s 			page 7


 320:Src/main.c    ****       if(pulse_found){
 321:Src/main.c    ****         pulses[pulse_number][PULSE_END] = i;
 322:Src/main.c    ****         pulse_number++;
 323:Src/main.c    ****       }
 324:Src/main.c    ****       pulse_found = 0;
 325:Src/main.c    ****     }
 326:Src/main.c    ****   }
 327:Src/main.c    ****   set_pulse_amplitudes();
 328:Src/main.c    **** }
 329:Src/main.c    **** 
 330:Src/main.c    **** void dump_pulses(){
 331:Src/main.c    ****   for(int i = 0;i<pulse_number;i++){
 332:Src/main.c    ****     printf("%i,%i,%i\r\n",pulses[i][PULSE_START],pulses[i][PULSE_END],pulses[i][PULSE_AMPLITUDE]);
 333:Src/main.c    ****   }
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** void transmit_pulse_train(int power){ //10,20,35,50
 337:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim16);
 338:Src/main.c    ****   piezo_pulses = power;
 339:Src/main.c    ****   while(piezo_pulses);
 340:Src/main.c    ****   break_before();
 341:Src/main.c    ****   HAL_TIM_Base_Stop_IT(&htim16);
 342:Src/main.c    **** }
 343:Src/main.c    **** /* USER CODE END 4 */
 344:Src/main.c    **** 
 345:Src/main.c    **** /* USER CODE END 0 */
 346:Src/main.c    **** 
 347:Src/main.c    **** /**
 348:Src/main.c    ****   * @brief  The application entry point.
 349:Src/main.c    ****   *
 350:Src/main.c    ****   * @retval None
 351:Src/main.c    ****   */
 352:Src/main.c    **** int main(void)
 353:Src/main.c    **** {
 354:Src/main.c    ****   /* USER CODE BEGIN 1 */
 355:Src/main.c    **** 
 356:Src/main.c    ****   /* USER CODE END 1 */
 357:Src/main.c    **** 
 358:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 359:Src/main.c    **** 
 360:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 361:Src/main.c    ****   HAL_Init();
 362:Src/main.c    **** 
 363:Src/main.c    ****   /* USER CODE BEGIN Init */
 364:Src/main.c    **** 
 365:Src/main.c    ****   /* USER CODE END Init */
 366:Src/main.c    **** 
 367:Src/main.c    ****   /* Configure the system clock */
 368:Src/main.c    ****   SystemClock_Config();
 369:Src/main.c    **** 
 370:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE END SysInit */
 373:Src/main.c    **** 
 374:Src/main.c    ****   /* Initialize all configured peripherals */
 375:Src/main.c    ****   MX_GPIO_Init();
 376:Src/main.c    ****   MX_DMA_Init();
ARM GAS  /tmp/cc3mDgG2.s 			page 8


 377:Src/main.c    ****   MX_USART1_UART_Init();
 378:Src/main.c    ****   MX_TIM1_Init();
 379:Src/main.c    ****   MX_ADC_Init();
 380:Src/main.c    ****   MX_TIM16_Init();
 381:Src/main.c    ****   MX_TIM17_Init();
 382:Src/main.c    ****   /* USER CODE BEGIN 2 */
 383:Src/main.c    **** 
 384:Src/main.c    ****   // set_resistor(35,CS_LP_GPIO_Port,CS_LP_Pin);
 385:Src/main.c    ****   // set_resistor(64,CS_HP_GPIO_Port,CS_HP_Pin);
 386:Src/main.c    ****   // set_resistor(0,CS_GAIN_GPIO_Port,CS_GAIN_Pin);
 387:Src/main.c    **** 
 388:Src/main.c    ****   HAL_TIM_Base_Start(&htim17); // Trying to start the base counter
 389:Src/main.c    **** 
 390:Src/main.c    **** 
 391:Src/main.c    ****   /* USER CODE END 2 */
 392:Src/main.c    **** 
 393:Src/main.c    ****   /* Infinite loop */
 394:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 395:Src/main.c    ****   HAL_ADC_Stop_DMA(&hadc);
 396:Src/main.c    ****   switch_adc_channel(ADC_CHANNEL_1);
 397:Src/main.c    ****   while (1){
 398:Src/main.c    ****     // printf("Preparing\r\n");
 399:Src/main.c    ****     // HAL_ADC_Stop_DMA(&hadc);
 400:Src/main.c    ****     // HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_samples, ADC_SAMPLE_WIDTH);
 401:Src/main.c    ****     uint16_t peak_freq = 0;
 402:Src/main.c    ****     uint16_t peak_value = 0;
 403:Src/main.c    ****     uint16_t peak_sample_ = 0;
 404:Src/main.c    ****     uint32_t freq=41000;
 405:Src/main.c    ****     for(uint32_t freq=20000;freq<40000;freq+=50){
 406:Src/main.c    ****       set_tx_frequency(freq);
 407:Src/main.c    ****       boost_pwm(0);
 408:Src/main.c    ****       transmit_pulse_train(5);
 409:Src/main.c    ****       // wait_cycles(500);
 410:Src/main.c    ****       // sample
 411:Src/main.c    ****       // adc_done = 0;
 412:Src/main.c    ****       // HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_samples, ADC_SAMPLE_WIDTH);
 413:Src/main.c    ****       // HAL_GPIO_TogglePin(SAL_ENABLE_GPIO_Port, SAL_ENABLE_Pin);
 414:Src/main.c    ****       //
 415:Src/main.c    ****       digital_pulse_number = 0;
 416:Src/main.c    ****       int pulse_found = 0;
 417:Src/main.c    ****       htim17.Instance->CNT = 0;
 418:Src/main.c    ****       while(digital_pulse_number < MAX_PULSE_COUNT && htim17.Instance->CNT < 60000){
 419:Src/main.c    ****         if(HAL_GPIO_ReadPin(COMPARATOR_GPIO_Port,COMPARATOR_Pin)){
 420:Src/main.c    ****           if(!pulse_found){
 421:Src/main.c    ****             digital_pulses[digital_pulse_number][PULSE_START] = htim17.Instance->CNT;
 422:Src/main.c    ****           }
 423:Src/main.c    ****           pulse_found = 1;
 424:Src/main.c    ****         }
 425:Src/main.c    ****         else{
 426:Src/main.c    ****           if(pulse_found){
 427:Src/main.c    ****             digital_pulses[digital_pulse_number][PULSE_END] = htim17.Instance->CNT;
 428:Src/main.c    ****             digital_pulse_number++;
 429:Src/main.c    ****           }
 430:Src/main.c    ****           pulse_found = 0;
 431:Src/main.c    ****         }
 432:Src/main.c    ****       }
 433:Src/main.c    ****       // while(!(COMPARATOR_GPIO_Port->IDR & COMPARATOR_Pin) && !adc_done){
ARM GAS  /tmp/cc3mDgG2.s 			page 9


 434:Src/main.c    ****       //   count++;
 435:Src/main.c    ****       // }
 436:Src/main.c    ****       // while(!adc_done);
 437:Src/main.c    ****       //
 438:Src/main.c    ****       // HAL_GPIO_TogglePin(SAL_ENABLE_GPIO_Port, SAL_ENABLE_Pin);
 439:Src/main.c    ****       // HAL_ADC_Stop_DMA(&hadc);
 440:Src/main.c    **** 
 441:Src/main.c    ****       boost_pwm(10);
 442:Src/main.c    ****       HAL_Delay(3);
 443:Src/main.c    **** 
 444:Src/main.c    ****       // split_into_pulses();
 445:Src/main.c    **** 
 446:Src/main.c    ****       // for(int i = 0;i<pulse_number;i++){
 447:Src/main.c    ****       //   printf("%i,%i,%i,%i\r\n",freq,i,pulses[i][PULSE_START],pulses[i][PULSE_AMPLITUDE]);
 448:Src/main.c    ****       // }
 449:Src/main.c    ****       // printf("%i\r\n",pulses[0][PULSE_START]);
 450:Src/main.c    ****       // }
 451:Src/main.c    ****       // for(int i = 0;i<pulse_number;i++){
 452:Src/main.c    ****       // if(pulse_number > 4){
 453:Src/main.c    ****       //   printf("%i,%i\r\n",freq,digital_pulses[i][PULSE_START],digital_pulses[i][PULSE_END]);
 454:Src/main.c    ****       // }
 455:Src/main.c    **** 
 456:Src/main.c    ****       // printf("%i\r\n",count);
 457:Src/main.c    ****       //
 458:Src/main.c    ****       for(int i = 0;i<digital_pulse_number;i++){
 459:Src/main.c    ****         printf("%i,%i,%i\r\n",freq,i,digital_pulses[i][PULSE_START]);
 460:Src/main.c    ****       }
 461:Src/main.c    ****       // for(int i = 0;i<pulse_number;i++){
 462:Src/main.c    ****       //   printf("%i,%i,%i,%i,%i,%i\r\n",freq,i,pulses[i][PULSE_START],pulses[i][PULSE_END],pulses
 463:Src/main.c    ****       // }
 464:Src/main.c    ****       // process
 465:Src/main.c    ****       // printf("%i,%i,%i\r\n",freq,peak_detect(),);
 466:Src/main.c    ****       // int current_peak = peak_detect();
 467:Src/main.c    ****       // if(current_peak > peak_value){
 468:Src/main.c    ****       //   peak_value = current_peak;
 469:Src/main.c    ****       //   peak_freq = freq;
 470:Src/main.c    ****       //   peak_sample_ = peak_sample();
 471:Src/main.c    ****       // }
 472:Src/main.c    ****       // for(int i = 0;i<ADC_SAMPLE_WIDTH;i++){
 473:Src/main.c    ****       //   printf("%i,%i,%i\r\n",freq,i,adc_samples[i]);
 474:Src/main.c    ****       // }
 475:Src/main.c    ****       // HAL_GPIO_TogglePin(SAL_ENABLE_GPIO_Port, SAL_ENABLE_Pin);
 476:Src/main.c    ****       // HAL_Delay(1);
 477:Src/main.c    **** 
 478:Src/main.c    ****     }
 479:Src/main.c    ****     printf("done\n");
 480:Src/main.c    **** 
 481:Src/main.c    ****   /* USER CODE END WHILE */
 482:Src/main.c    **** 
 483:Src/main.c    ****   /* USER CODE BEGIN 3 */
 484:Src/main.c    **** 
 485:Src/main.c    ****   }
 486:Src/main.c    ****   /* USER CODE END 3 */
 487:Src/main.c    **** 
 488:Src/main.c    **** }
 489:Src/main.c    **** 
 490:Src/main.c    **** /**
ARM GAS  /tmp/cc3mDgG2.s 			page 10


 491:Src/main.c    ****   * @brief System Clock Configuration
 492:Src/main.c    ****   * @retval None
 493:Src/main.c    ****   */
 494:Src/main.c    **** void SystemClock_Config(void)
 495:Src/main.c    **** {
 496:Src/main.c    **** 
 497:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 498:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 499:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 500:Src/main.c    **** 
 501:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 502:Src/main.c    ****     */
 503:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 504:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 505:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 506:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 507:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 508:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 509:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 510:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 511:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 512:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 513:Src/main.c    ****   {
 514:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 515:Src/main.c    ****   }
 516:Src/main.c    **** 
 517:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 518:Src/main.c    ****     */
 519:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 520:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 521:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 522:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 523:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 524:Src/main.c    **** 
 525:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 526:Src/main.c    ****   {
 527:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 528:Src/main.c    ****   }
 529:Src/main.c    **** 
 530:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 531:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 532:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 533:Src/main.c    ****   {
 534:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 535:Src/main.c    ****   }
 536:Src/main.c    **** 
 537:Src/main.c    ****     /**Configure the Systick interrupt time
 538:Src/main.c    ****     */
 539:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 540:Src/main.c    **** 
 541:Src/main.c    ****     /**Configure the Systick
 542:Src/main.c    ****     */
 543:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 544:Src/main.c    **** 
 545:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 546:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 547:Src/main.c    **** }
ARM GAS  /tmp/cc3mDgG2.s 			page 11


 548:Src/main.c    **** 
 549:Src/main.c    **** /* ADC init function */
 550:Src/main.c    **** static void MX_ADC_Init(void)
 551:Src/main.c    **** {
 552:Src/main.c    **** 
 553:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 554:Src/main.c    **** 
 555:Src/main.c    ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
 556:Src/main.c    ****     */
 557:Src/main.c    ****   hadc.Instance = ADC1;
 558:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 559:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 560:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 561:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 562:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 563:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 564:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 565:Src/main.c    ****   hadc.Init.ContinuousConvMode = ENABLE;
 566:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 567:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 568:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 569:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 570:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 571:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 572:Src/main.c    ****   {
 573:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 574:Src/main.c    ****   }
 575:Src/main.c    **** 
 576:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 577:Src/main.c    ****     */
 578:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 579:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 580:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 581:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 582:Src/main.c    ****   {
 583:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 584:Src/main.c    ****   }
 585:Src/main.c    **** 
 586:Src/main.c    **** }
 587:Src/main.c    **** 
 588:Src/main.c    **** /* TIM1 init function */
 589:Src/main.c    **** static void MX_TIM1_Init(void)
 590:Src/main.c    **** {
 591:Src/main.c    **** 
 592:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 593:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 594:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 595:Src/main.c    **** 
 596:Src/main.c    ****   htim1.Instance = TIM1;
 597:Src/main.c    ****   htim1.Init.Prescaler = 1;
 598:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 599:Src/main.c    ****   htim1.Init.Period = 100;
 600:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 601:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 602:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 603:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 604:Src/main.c    ****   {
ARM GAS  /tmp/cc3mDgG2.s 			page 12


 605:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 606:Src/main.c    ****   }
 607:Src/main.c    **** 
 608:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 609:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 610:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 611:Src/main.c    ****   {
 612:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 613:Src/main.c    ****   }
 614:Src/main.c    **** 
 615:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 616:Src/main.c    ****   sConfigOC.Pulse = 0;
 617:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 618:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 619:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 620:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 621:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 622:Src/main.c    ****   {
 623:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 624:Src/main.c    ****   }
 625:Src/main.c    **** 
 626:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 627:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 628:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 629:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 630:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 631:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 632:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 633:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 634:Src/main.c    ****   {
 635:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 636:Src/main.c    ****   }
 637:Src/main.c    **** 
 638:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 639:Src/main.c    **** 
 640:Src/main.c    **** }
 641:Src/main.c    **** 
 642:Src/main.c    **** /* TIM16 init function */
 643:Src/main.c    **** static void MX_TIM16_Init(void)
 644:Src/main.c    **** {
 645:Src/main.c    **** 
 646:Src/main.c    ****   htim16.Instance = TIM16;
 647:Src/main.c    ****   htim16.Init.Prescaler = 0;
 648:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 649:Src/main.c    ****   htim16.Init.Period = 1000;
 650:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 651:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 652:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 653:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 654:Src/main.c    ****   {
 655:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 656:Src/main.c    ****   }
 657:Src/main.c    **** 
 658:Src/main.c    **** }
 659:Src/main.c    **** 
 660:Src/main.c    **** /* TIM17 init function */
 661:Src/main.c    **** static void MX_TIM17_Init(void)
ARM GAS  /tmp/cc3mDgG2.s 			page 13


 662:Src/main.c    **** {
 663:Src/main.c    **** 
 664:Src/main.c    ****   htim17.Instance = TIM17;
 665:Src/main.c    ****   htim17.Init.Prescaler = 8;
 666:Src/main.c    ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 667:Src/main.c    ****   htim17.Init.Period = 65000;
 668:Src/main.c    ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 669:Src/main.c    ****   htim17.Init.RepetitionCounter = 0;
 670:Src/main.c    ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 671:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 672:Src/main.c    ****   {
 673:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 674:Src/main.c    ****   }
 675:Src/main.c    **** 
 676:Src/main.c    **** }
 677:Src/main.c    **** 
 678:Src/main.c    **** /* USART1 init function */
 679:Src/main.c    **** static void MX_USART1_UART_Init(void)
 680:Src/main.c    **** {
 681:Src/main.c    **** 
 682:Src/main.c    ****   huart1.Instance = USART1;
 683:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 684:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 685:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 686:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 687:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX;
 688:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 689:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 690:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 691:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 692:Src/main.c    ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 693:Src/main.c    ****   {
 694:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 695:Src/main.c    ****   }
 696:Src/main.c    **** 
 697:Src/main.c    **** }
 698:Src/main.c    **** 
 699:Src/main.c    **** /**
 700:Src/main.c    ****   * Enable DMA controller clock
 701:Src/main.c    ****   */
 702:Src/main.c    **** static void MX_DMA_Init(void)
 703:Src/main.c    **** {
 704:Src/main.c    ****   /* DMA controller clock enable */
 705:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 706:Src/main.c    **** 
 707:Src/main.c    ****   /* DMA interrupt init */
 708:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 709:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 710:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 711:Src/main.c    **** 
 712:Src/main.c    **** }
 713:Src/main.c    **** 
 714:Src/main.c    **** /** Configure pins as
 715:Src/main.c    ****         * Analog
 716:Src/main.c    ****         * Input
 717:Src/main.c    ****         * Output
 718:Src/main.c    ****         * EVENT_OUT
ARM GAS  /tmp/cc3mDgG2.s 			page 14


 719:Src/main.c    ****         * EXTI
 720:Src/main.c    **** */
 721:Src/main.c    **** static void MX_GPIO_Init(void)
 722:Src/main.c    **** {
  25              		.loc 1 722 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
  40              	.LBB2:
 723:Src/main.c    **** 
 724:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 725:Src/main.c    **** 
 726:Src/main.c    ****   /* GPIO Ports Clock Enable */
 727:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  41              		.loc 1 727 0
  42 0004 1E4B     		ldr	r3, .L2
  43 0006 5969     		ldr	r1, [r3, #20]
  44 0008 8020     		movs	r0, #128
  45 000a 8002     		lsls	r0, r0, #10
  46 000c 0143     		orrs	r1, r0
  47 000e 5961     		str	r1, [r3, #20]
  48 0010 5A69     		ldr	r2, [r3, #20]
  49 0012 0240     		ands	r2, r0
  50 0014 0192     		str	r2, [sp, #4]
  51 0016 019A     		ldr	r2, [sp, #4]
  52              	.LBE2:
  53              	.LBB3:
 728:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  54              		.loc 1 728 0
  55 0018 5A69     		ldr	r2, [r3, #20]
  56 001a 8021     		movs	r1, #128
  57 001c C902     		lsls	r1, r1, #11
  58 001e 0A43     		orrs	r2, r1
  59 0020 5A61     		str	r2, [r3, #20]
  60 0022 5B69     		ldr	r3, [r3, #20]
  61 0024 0B40     		ands	r3, r1
  62 0026 0293     		str	r3, [sp, #8]
  63 0028 029B     		ldr	r3, [sp, #8]
  64              	.LBE3:
 729:Src/main.c    **** 
 730:Src/main.c    ****   /*Configure GPIO pin Output Level */
 731:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, PHASE_1_L_Pin|PHASE_2_L_Pin|SAL_ENABLE_Pin|PHASE_1_H_Pin
  65              		.loc 1 731 0
  66 002a 0022     		movs	r2, #0
  67 002c BB21     		movs	r1, #187
  68 002e 1548     		ldr	r0, .L2+4
ARM GAS  /tmp/cc3mDgG2.s 			page 15


  69 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
  70              	.LVL0:
 732:Src/main.c    ****                           |PHASE_2_H_Pin|CS_LP_Pin, GPIO_PIN_RESET);
 733:Src/main.c    **** 
 734:Src/main.c    ****   /*Configure GPIO pin Output Level */
 735:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, CS_GAIN_Pin|UD_STATE_Pin|CS_HP_Pin, GPIO_PIN_RESET);
  71              		.loc 1 735 0
  72 0034 9127     		movs	r7, #145
  73 0036 3F02     		lsls	r7, r7, #8
  74 0038 9025     		movs	r5, #144
  75 003a ED05     		lsls	r5, r5, #23
  76 003c 0022     		movs	r2, #0
  77 003e 3900     		movs	r1, r7
  78 0040 2800     		movs	r0, r5
  79 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  80              	.LVL1:
 736:Src/main.c    **** 
 737:Src/main.c    ****   /*Configure GPIO pins : COMPARATOR_Pin PA4 */
 738:Src/main.c    ****   GPIO_InitStruct.Pin = COMPARATOR_Pin|GPIO_PIN_4;
  81              		.loc 1 738 0
  82 0046 1123     		movs	r3, #17
  83 0048 0393     		str	r3, [sp, #12]
 739:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  84              		.loc 1 739 0
  85 004a 0024     		movs	r4, #0
  86 004c 0494     		str	r4, [sp, #16]
 740:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  87              		.loc 1 740 0
  88 004e 0594     		str	r4, [sp, #20]
 741:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  89              		.loc 1 741 0
  90 0050 03A9     		add	r1, sp, #12
  91 0052 2800     		movs	r0, r5
  92 0054 FFF7FEFF 		bl	HAL_GPIO_Init
  93              	.LVL2:
 742:Src/main.c    **** 
 743:Src/main.c    ****   /*Configure GPIO pins : PHASE_1_L_Pin PHASE_2_L_Pin SAL_ENABLE_Pin PHASE_1_H_Pin
 744:Src/main.c    ****                            PHASE_2_H_Pin CS_LP_Pin */
 745:Src/main.c    ****   GPIO_InitStruct.Pin = PHASE_1_L_Pin|PHASE_2_L_Pin|SAL_ENABLE_Pin|PHASE_1_H_Pin
  94              		.loc 1 745 0
  95 0058 BB23     		movs	r3, #187
  96 005a 0393     		str	r3, [sp, #12]
 746:Src/main.c    ****                           |PHASE_2_H_Pin|CS_LP_Pin;
 747:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 747 0
  98 005c 0126     		movs	r6, #1
  99 005e 0496     		str	r6, [sp, #16]
 748:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 100              		.loc 1 748 0
 101 0060 0594     		str	r4, [sp, #20]
 749:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 102              		.loc 1 749 0
 103 0062 0694     		str	r4, [sp, #24]
 750:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 104              		.loc 1 750 0
 105 0064 03A9     		add	r1, sp, #12
 106 0066 0748     		ldr	r0, .L2+4
ARM GAS  /tmp/cc3mDgG2.s 			page 16


 107 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 108              	.LVL3:
 751:Src/main.c    **** 
 752:Src/main.c    ****   /*Configure GPIO pins : CS_GAIN_Pin UD_STATE_Pin CS_HP_Pin */
 753:Src/main.c    ****   GPIO_InitStruct.Pin = CS_GAIN_Pin|UD_STATE_Pin|CS_HP_Pin;
 109              		.loc 1 753 0
 110 006c 0397     		str	r7, [sp, #12]
 754:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 754 0
 112 006e 0496     		str	r6, [sp, #16]
 755:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 755 0
 114 0070 0594     		str	r4, [sp, #20]
 756:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 115              		.loc 1 756 0
 116 0072 0694     		str	r4, [sp, #24]
 757:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 117              		.loc 1 757 0
 118 0074 03A9     		add	r1, sp, #12
 119 0076 2800     		movs	r0, r5
 120 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 121              	.LVL4:
 758:Src/main.c    **** 
 759:Src/main.c    **** }
 122              		.loc 1 759 0
 123 007c 09B0     		add	sp, sp, #36
 124              		@ sp needed
 125 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 126              	.L3:
 127              		.align	2
 128              	.L2:
 129 0080 00100240 		.word	1073876992
 130 0084 00040048 		.word	1207960576
 131              		.cfi_endproc
 132              	.LFE62:
 134              		.section	.text.MX_DMA_Init,"ax",%progbits
 135              		.align	1
 136              		.syntax unified
 137              		.code	16
 138              		.thumb_func
 139              		.fpu softvfp
 141              	MX_DMA_Init:
 142              	.LFB61:
 703:Src/main.c    ****   /* DMA controller clock enable */
 143              		.loc 1 703 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 8
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147 0000 00B5     		push	{lr}
 148              	.LCFI2:
 149              		.cfi_def_cfa_offset 4
 150              		.cfi_offset 14, -4
 151 0002 83B0     		sub	sp, sp, #12
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 16
 154              	.LBB4:
 705:Src/main.c    **** 
ARM GAS  /tmp/cc3mDgG2.s 			page 17


 155              		.loc 1 705 0
 156 0004 094A     		ldr	r2, .L5
 157 0006 5169     		ldr	r1, [r2, #20]
 158 0008 0123     		movs	r3, #1
 159 000a 1943     		orrs	r1, r3
 160 000c 5161     		str	r1, [r2, #20]
 161 000e 5269     		ldr	r2, [r2, #20]
 162 0010 1340     		ands	r3, r2
 163 0012 0193     		str	r3, [sp, #4]
 164 0014 019B     		ldr	r3, [sp, #4]
 165              	.LBE4:
 709:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 166              		.loc 1 709 0
 167 0016 0022     		movs	r2, #0
 168 0018 0021     		movs	r1, #0
 169 001a 0920     		movs	r0, #9
 170 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 171              	.LVL5:
 710:Src/main.c    **** 
 172              		.loc 1 710 0
 173 0020 0920     		movs	r0, #9
 174 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 175              	.LVL6:
 712:Src/main.c    **** 
 176              		.loc 1 712 0
 177 0026 03B0     		add	sp, sp, #12
 178              		@ sp needed
 179 0028 00BD     		pop	{pc}
 180              	.L6:
 181 002a C046     		.align	2
 182              	.L5:
 183 002c 00100240 		.word	1073876992
 184              		.cfi_endproc
 185              	.LFE61:
 187              		.section	.text.__io_putchar,"ax",%progbits
 188              		.align	1
 189              		.global	__io_putchar
 190              		.syntax unified
 191              		.code	16
 192              		.thumb_func
 193              		.fpu softvfp
 195              	__io_putchar:
 196              	.LFB35:
  66:Src/main.c    **** HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 197              		.loc 1 66 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              	.LVL7:
 202 0000 00B5     		push	{lr}
 203              	.LCFI4:
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 14, -4
 206 0002 83B0     		sub	sp, sp, #12
 207              	.LCFI5:
 208              		.cfi_def_cfa_offset 16
 209 0004 0190     		str	r0, [sp, #4]
ARM GAS  /tmp/cc3mDgG2.s 			page 18


  67:Src/main.c    **** 
 210              		.loc 1 67 0
 211 0006 044B     		ldr	r3, .L8
 212 0008 0122     		movs	r2, #1
 213 000a 01A9     		add	r1, sp, #4
 214 000c 0348     		ldr	r0, .L8+4
 215              	.LVL8:
 216 000e FFF7FEFF 		bl	HAL_UART_Transmit
 217              	.LVL9:
  70:Src/main.c    **** 
 218              		.loc 1 70 0
 219 0012 0198     		ldr	r0, [sp, #4]
 220 0014 03B0     		add	sp, sp, #12
 221              		@ sp needed
 222 0016 00BD     		pop	{pc}
 223              	.L9:
 224              		.align	2
 225              	.L8:
 226 0018 FFFF0000 		.word	65535
 227 001c 00000000 		.word	huart1
 228              		.cfi_endproc
 229              	.LFE35:
 231              		.section	.text.boost_pwm,"ax",%progbits
 232              		.align	1
 233              		.global	boost_pwm
 234              		.syntax unified
 235              		.code	16
 236              		.thumb_func
 237              		.fpu softvfp
 239              	boost_pwm:
 240              	.LFB36:
 123:Src/main.c    ****     TIM_OC_InitTypeDef sConfigOC;
 241              		.loc 1 123 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 32
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              	.LVL10:
 246 0000 10B5     		push	{r4, lr}
 247              	.LCFI6:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 4, -8
 250              		.cfi_offset 14, -4
 251 0002 88B0     		sub	sp, sp, #32
 252              	.LCFI7:
 253              		.cfi_def_cfa_offset 40
 126:Src/main.c    ****     sConfigOC.Pulse = value;
 254              		.loc 1 126 0
 255 0004 6023     		movs	r3, #96
 256 0006 0193     		str	r3, [sp, #4]
 127:Src/main.c    ****     sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 257              		.loc 1 127 0
 258 0008 0290     		str	r0, [sp, #8]
 128:Src/main.c    ****     sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 259              		.loc 1 128 0
 260 000a 0023     		movs	r3, #0
 261 000c 0393     		str	r3, [sp, #12]
 129:Src/main.c    ****     HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
ARM GAS  /tmp/cc3mDgG2.s 			page 19


 262              		.loc 1 129 0
 263 000e 0593     		str	r3, [sp, #20]
 130:Src/main.c    ****     HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 264              		.loc 1 130 0
 265 0010 054C     		ldr	r4, .L11
 266 0012 0C22     		movs	r2, #12
 267 0014 01A9     		add	r1, sp, #4
 268 0016 2000     		movs	r0, r4
 269              	.LVL11:
 270 0018 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 271              	.LVL12:
 131:Src/main.c    **** }
 272              		.loc 1 131 0
 273 001c 0C21     		movs	r1, #12
 274 001e 2000     		movs	r0, r4
 275 0020 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 276              	.LVL13:
 132:Src/main.c    **** 
 277              		.loc 1 132 0
 278 0024 08B0     		add	sp, sp, #32
 279              		@ sp needed
 280 0026 10BD     		pop	{r4, pc}
 281              	.L12:
 282              		.align	2
 283              	.L11:
 284 0028 00000000 		.word	htim1
 285              		.cfi_endproc
 286              	.LFE36:
 288              		.section	.text.wait_cycles,"ax",%progbits
 289              		.align	1
 290              		.global	wait_cycles
 291              		.syntax unified
 292              		.code	16
 293              		.thumb_func
 294              		.fpu softvfp
 296              	wait_cycles:
 297              	.LFB37:
 134:Src/main.c    ****   volatile int cycle_counter = 0;
 298              		.loc 1 134 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 8
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303              	.LVL14:
 304 0000 82B0     		sub	sp, sp, #8
 305              	.LCFI8:
 306              		.cfi_def_cfa_offset 8
 135:Src/main.c    ****   for(cycle_counter = 0;cycle_counter<cycles;cycle_counter++){
 307              		.loc 1 135 0
 308 0002 0023     		movs	r3, #0
 309 0004 0193     		str	r3, [sp, #4]
 136:Src/main.c    ****   }
 310              		.loc 1 136 0
 311 0006 0193     		str	r3, [sp, #4]
 312 0008 02E0     		b	.L14
 313              	.L15:
 136:Src/main.c    ****   }
ARM GAS  /tmp/cc3mDgG2.s 			page 20


 314              		.loc 1 136 0 is_stmt 0 discriminator 3
 315 000a 019B     		ldr	r3, [sp, #4]
 316 000c 0133     		adds	r3, r3, #1
 317 000e 0193     		str	r3, [sp, #4]
 318              	.L14:
 136:Src/main.c    ****   }
 319              		.loc 1 136 0 discriminator 1
 320 0010 019B     		ldr	r3, [sp, #4]
 321 0012 8342     		cmp	r3, r0
 322 0014 F9D3     		bcc	.L15
 138:Src/main.c    **** 
 323              		.loc 1 138 0 is_stmt 1
 324 0016 02B0     		add	sp, sp, #8
 325              		@ sp needed
 326 0018 7047     		bx	lr
 327              		.cfi_endproc
 328              	.LFE37:
 330              		.section	.text.break_before,"ax",%progbits
 331              		.align	1
 332              		.global	break_before
 333              		.syntax unified
 334              		.code	16
 335              		.thumb_func
 336              		.fpu softvfp
 338              	break_before:
 339              	.LFB38:
 140:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,0);
 340              		.loc 1 140 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344 0000 10B5     		push	{r4, lr}
 345              	.LCFI9:
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 4, -8
 348              		.cfi_offset 14, -4
 141:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,0);
 349              		.loc 1 141 0
 350 0002 0B4C     		ldr	r4, .L17
 351 0004 0022     		movs	r2, #0
 352 0006 0121     		movs	r1, #1
 353 0008 2000     		movs	r0, r4
 354 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 355              	.LVL15:
 142:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,0);
 356              		.loc 1 142 0
 357 000e 0022     		movs	r2, #0
 358 0010 0221     		movs	r1, #2
 359 0012 2000     		movs	r0, r4
 360 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 361              	.LVL16:
 143:Src/main.c    ****   HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,0);
 362              		.loc 1 143 0
 363 0018 0022     		movs	r2, #0
 364 001a 1021     		movs	r1, #16
 365 001c 2000     		movs	r0, r4
 366 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cc3mDgG2.s 			page 21


 367              	.LVL17:
 144:Src/main.c    **** }
 368              		.loc 1 144 0
 369 0022 0022     		movs	r2, #0
 370 0024 2021     		movs	r1, #32
 371 0026 2000     		movs	r0, r4
 372 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 373              	.LVL18:
 145:Src/main.c    **** 
 374              		.loc 1 145 0
 375              		@ sp needed
 376 002c 10BD     		pop	{r4, pc}
 377              	.L18:
 378 002e C046     		.align	2
 379              	.L17:
 380 0030 00040048 		.word	1207960576
 381              		.cfi_endproc
 382              	.LFE38:
 384              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_TIM_PeriodElapsedCallback
 387              		.syntax unified
 388              		.code	16
 389              		.thumb_func
 390              		.fpu softvfp
 392              	HAL_TIM_PeriodElapsedCallback:
 393              	.LFB39:
 148:Src/main.c    ****   if(piezo_pulses){
 394              		.loc 1 148 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              	.LVL19:
 399 0000 10B5     		push	{r4, lr}
 400              	.LCFI10:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 4, -8
 403              		.cfi_offset 14, -4
 149:Src/main.c    ****     if(piezo_state){
 404              		.loc 1 149 0
 405 0002 2B4B     		ldr	r3, .L24
 406 0004 1B68     		ldr	r3, [r3]
 407 0006 002B     		cmp	r3, #0
 408 0008 3CD0     		beq	.L20
 150:Src/main.c    ****       break_before(); //break before make.
 409              		.loc 1 150 0
 410 000a 2A4B     		ldr	r3, .L24+4
 411 000c 1B68     		ldr	r3, [r3]
 412 000e 002B     		cmp	r3, #0
 413 0010 20D0     		beq	.L21
 151:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,1);
 414              		.loc 1 151 0
 415 0012 FFF7FEFF 		bl	break_before
 416              	.LVL20:
 152:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,0);
 417              		.loc 1 152 0
 418 0016 284C     		ldr	r4, .L24+8
ARM GAS  /tmp/cc3mDgG2.s 			page 22


 419 0018 0122     		movs	r2, #1
 420 001a 0121     		movs	r1, #1
 421 001c 2000     		movs	r0, r4
 422 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 423              	.LVL21:
 153:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,0);
 424              		.loc 1 153 0
 425 0022 0022     		movs	r2, #0
 426 0024 0221     		movs	r1, #2
 427 0026 2000     		movs	r0, r4
 428 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 429              	.LVL22:
 154:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,1);
 430              		.loc 1 154 0
 431 002c 0022     		movs	r2, #0
 432 002e 1021     		movs	r1, #16
 433 0030 2000     		movs	r0, r4
 434 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 435              	.LVL23:
 155:Src/main.c    ****     }
 436              		.loc 1 155 0
 437 0036 0122     		movs	r2, #1
 438 0038 2021     		movs	r1, #32
 439 003a 2000     		movs	r0, r4
 440 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 441              	.LVL24:
 442              	.L22:
 164:Src/main.c    ****     piezo_pulses--;
 443              		.loc 1 164 0
 444 0040 1C4A     		ldr	r2, .L24+4
 445 0042 1368     		ldr	r3, [r2]
 446 0044 5942     		rsbs	r1, r3, #0
 447 0046 4B41     		adcs	r3, r3, r1
 448 0048 1360     		str	r3, [r2]
 165:Src/main.c    ****   }
 449              		.loc 1 165 0
 450 004a 194A     		ldr	r2, .L24
 451 004c 1368     		ldr	r3, [r2]
 452 004e 013B     		subs	r3, r3, #1
 453 0050 1360     		str	r3, [r2]
 454              	.L19:
 173:Src/main.c    **** 
 455              		.loc 1 173 0
 456              		@ sp needed
 457 0052 10BD     		pop	{r4, pc}
 458              	.LVL25:
 459              	.L21:
 158:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_L_GPIO_Port, PHASE_1_L_Pin,0);
 460              		.loc 1 158 0
 461 0054 FFF7FEFF 		bl	break_before
 462              	.LVL26:
 159:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,1);
 463              		.loc 1 159 0
 464 0058 174C     		ldr	r4, .L24+8
 465 005a 0022     		movs	r2, #0
 466 005c 0121     		movs	r1, #1
 467 005e 2000     		movs	r0, r4
ARM GAS  /tmp/cc3mDgG2.s 			page 23


 468 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
 469              	.LVL27:
 160:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,1);
 470              		.loc 1 160 0
 471 0064 0122     		movs	r2, #1
 472 0066 0221     		movs	r1, #2
 473 0068 2000     		movs	r0, r4
 474 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 475              	.LVL28:
 161:Src/main.c    ****       HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,0);
 476              		.loc 1 161 0
 477 006e 0122     		movs	r2, #1
 478 0070 1021     		movs	r1, #16
 479 0072 2000     		movs	r0, r4
 480 0074 FFF7FEFF 		bl	HAL_GPIO_WritePin
 481              	.LVL29:
 162:Src/main.c    ****     }
 482              		.loc 1 162 0
 483 0078 0022     		movs	r2, #0
 484 007a 2021     		movs	r1, #32
 485 007c 2000     		movs	r0, r4
 486 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 487              	.LVL30:
 488 0082 DDE7     		b	.L22
 489              	.LVL31:
 490              	.L20:
 168:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_2_L_GPIO_Port, PHASE_2_L_Pin,0);
 491              		.loc 1 168 0
 492 0084 0C4C     		ldr	r4, .L24+8
 493 0086 0022     		movs	r2, #0
 494 0088 0121     		movs	r1, #1
 495 008a 2000     		movs	r0, r4
 496              	.LVL32:
 497 008c FFF7FEFF 		bl	HAL_GPIO_WritePin
 498              	.LVL33:
 169:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_1_H_GPIO_Port, PHASE_1_H_Pin,0);
 499              		.loc 1 169 0
 500 0090 0022     		movs	r2, #0
 501 0092 0221     		movs	r1, #2
 502 0094 2000     		movs	r0, r4
 503 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 504              	.LVL34:
 170:Src/main.c    ****     HAL_GPIO_WritePin(PHASE_2_H_GPIO_Port, PHASE_2_H_Pin,0); //monitor boost voltage.
 505              		.loc 1 170 0
 506 009a 0022     		movs	r2, #0
 507 009c 1021     		movs	r1, #16
 508 009e 2000     		movs	r0, r4
 509 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 510              	.LVL35:
 171:Src/main.c    ****   }
 511              		.loc 1 171 0
 512 00a4 0022     		movs	r2, #0
 513 00a6 2021     		movs	r1, #32
 514 00a8 2000     		movs	r0, r4
 515 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 516              	.LVL36:
 173:Src/main.c    **** 
ARM GAS  /tmp/cc3mDgG2.s 			page 24


 517              		.loc 1 173 0
 518 00ae D0E7     		b	.L19
 519              	.L25:
 520              		.align	2
 521              	.L24:
 522 00b0 00000000 		.word	.LANCHOR0
 523 00b4 00000000 		.word	.LANCHOR1
 524 00b8 00040048 		.word	1207960576
 525              		.cfi_endproc
 526              	.LFE39:
 528              		.section	.text.reset_resistor,"ax",%progbits
 529              		.align	1
 530              		.global	reset_resistor
 531              		.syntax unified
 532              		.code	16
 533              		.thumb_func
 534              		.fpu softvfp
 536              	reset_resistor:
 537              	.LFB41:
 194:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 1);
 538              		.loc 1 194 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 8
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL37:
 543 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 544              	.LCFI11:
 545              		.cfi_def_cfa_offset 20
 546              		.cfi_offset 4, -20
 547              		.cfi_offset 5, -16
 548              		.cfi_offset 6, -12
 549              		.cfi_offset 7, -8
 550              		.cfi_offset 14, -4
 551 0002 83B0     		sub	sp, sp, #12
 552              	.LCFI12:
 553              		.cfi_def_cfa_offset 32
 554 0004 0190     		str	r0, [sp, #4]
 555 0006 0F00     		movs	r7, r1
 195:Src/main.c    ****   wait_cycles(POT_DELAY);
 556              		.loc 1 195 0
 557 0008 0122     		movs	r2, #1
 558 000a 8021     		movs	r1, #128
 559              	.LVL38:
 560 000c 4901     		lsls	r1, r1, #5
 561 000e 9020     		movs	r0, #144
 562              	.LVL39:
 563 0010 C005     		lsls	r0, r0, #23
 564 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 565              	.LVL40:
 196:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);
 566              		.loc 1 196 0
 567 0016 6420     		movs	r0, #100
 568 0018 FFF7FEFF 		bl	wait_cycles
 569              	.LVL41:
 197:Src/main.c    ****   wait_cycles(POT_DELAY);
 570              		.loc 1 197 0
 571 001c 0122     		movs	r2, #1
ARM GAS  /tmp/cc3mDgG2.s 			page 25


 572 001e 3900     		movs	r1, r7
 573 0020 0198     		ldr	r0, [sp, #4]
 574 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 575              	.LVL42:
 198:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);
 576              		.loc 1 198 0
 577 0026 6420     		movs	r0, #100
 578 0028 FFF7FEFF 		bl	wait_cycles
 579              	.LVL43:
 199:Src/main.c    **** 
 580              		.loc 1 199 0
 581 002c 0022     		movs	r2, #0
 582 002e 3900     		movs	r1, r7
 583 0030 0198     		ldr	r0, [sp, #4]
 584 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 585              	.LVL44:
 586              	.LBB5:
 201:Src/main.c    ****     wait_cycles(POT_DELAY);
 587              		.loc 1 201 0
 588 0036 0026     		movs	r6, #0
 589 0038 14E0     		b	.L27
 590              	.LVL45:
 591              	.L28:
 202:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 592              		.loc 1 202 0 discriminator 3
 593 003a 6420     		movs	r0, #100
 594 003c FFF7FEFF 		bl	wait_cycles
 595              	.LVL46:
 203:Src/main.c    ****     wait_cycles(POT_DELAY);
 596              		.loc 1 203 0 discriminator 3
 597 0040 8025     		movs	r5, #128
 598 0042 6D01     		lsls	r5, r5, #5
 599 0044 9024     		movs	r4, #144
 600 0046 E405     		lsls	r4, r4, #23
 601 0048 0022     		movs	r2, #0
 602 004a 2900     		movs	r1, r5
 603 004c 2000     		movs	r0, r4
 604 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 605              	.LVL47:
 204:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 1);
 606              		.loc 1 204 0 discriminator 3
 607 0052 6420     		movs	r0, #100
 608 0054 FFF7FEFF 		bl	wait_cycles
 609              	.LVL48:
 205:Src/main.c    ****   }
 610              		.loc 1 205 0 discriminator 3
 611 0058 0122     		movs	r2, #1
 612 005a 2900     		movs	r1, r5
 613 005c 2000     		movs	r0, r4
 614 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 615              	.LVL49:
 201:Src/main.c    ****     wait_cycles(POT_DELAY);
 616              		.loc 1 201 0 discriminator 3
 617 0062 0136     		adds	r6, r6, #1
 618              	.LVL50:
 619              	.L27:
 201:Src/main.c    ****     wait_cycles(POT_DELAY);
ARM GAS  /tmp/cc3mDgG2.s 			page 26


 620              		.loc 1 201 0 is_stmt 0 discriminator 1
 621 0064 632E     		cmp	r6, #99
 622 0066 E8DD     		ble	.L28
 623              	.LBE5:
 207:Src/main.c    ****   wait_cycles(POT_DELAY);
 624              		.loc 1 207 0 is_stmt 1
 625 0068 0122     		movs	r2, #1
 626 006a 3900     		movs	r1, r7
 627 006c 0198     		ldr	r0, [sp, #4]
 628 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 629              	.LVL51:
 208:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 630              		.loc 1 208 0
 631 0072 6420     		movs	r0, #100
 632 0074 FFF7FEFF 		bl	wait_cycles
 633              	.LVL52:
 209:Src/main.c    **** }
 634              		.loc 1 209 0
 635 0078 0022     		movs	r2, #0
 636 007a 8021     		movs	r1, #128
 637 007c 4901     		lsls	r1, r1, #5
 638 007e 9020     		movs	r0, #144
 639 0080 C005     		lsls	r0, r0, #23
 640 0082 FFF7FEFF 		bl	HAL_GPIO_WritePin
 641              	.LVL53:
 210:Src/main.c    **** 
 642              		.loc 1 210 0
 643 0086 03B0     		add	sp, sp, #12
 644              		@ sp needed
 645              	.LVL54:
 646 0088 F0BD     		pop	{r4, r5, r6, r7, pc}
 647              		.cfi_endproc
 648              	.LFE41:
 650              		.section	.text.set_resistor,"ax",%progbits
 651              		.align	1
 652              		.global	set_resistor
 653              		.syntax unified
 654              		.code	16
 655              		.thumb_func
 656              		.fpu softvfp
 658              	set_resistor:
 659              	.LFB42:
 212:Src/main.c    ****   reset_resistor(CS_Port,CS_Pin);
 660              		.loc 1 212 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 8
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              	.LVL55:
 665 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 666              	.LCFI13:
 667              		.cfi_def_cfa_offset 20
 668              		.cfi_offset 4, -20
 669              		.cfi_offset 5, -16
 670              		.cfi_offset 6, -12
 671              		.cfi_offset 7, -8
 672              		.cfi_offset 14, -4
 673 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cc3mDgG2.s 			page 27


 674              	.LCFI14:
 675              		.cfi_def_cfa_offset 32
 676 0004 0500     		movs	r5, r0
 677 0006 0091     		str	r1, [sp]
 678 0008 0192     		str	r2, [sp, #4]
 213:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 679              		.loc 1 213 0
 680 000a 1100     		movs	r1, r2
 681              	.LVL56:
 682 000c 0098     		ldr	r0, [sp]
 683              	.LVL57:
 684 000e FFF7FEFF 		bl	reset_resistor
 685              	.LVL58:
 214:Src/main.c    ****   wait_cycles(POT_DELAY);
 686              		.loc 1 214 0
 687 0012 0022     		movs	r2, #0
 688 0014 8021     		movs	r1, #128
 689 0016 4901     		lsls	r1, r1, #5
 690 0018 9020     		movs	r0, #144
 691 001a C005     		lsls	r0, r0, #23
 692 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 693              	.LVL59:
 215:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);
 694              		.loc 1 215 0
 695 0020 6420     		movs	r0, #100
 696 0022 FFF7FEFF 		bl	wait_cycles
 697              	.LVL60:
 216:Src/main.c    ****   wait_cycles(POT_DELAY);
 698              		.loc 1 216 0
 699 0026 0122     		movs	r2, #1
 700 0028 0199     		ldr	r1, [sp, #4]
 701 002a 0098     		ldr	r0, [sp]
 702 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 703              	.LVL61:
 217:Src/main.c    ****   HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);
 704              		.loc 1 217 0
 705 0030 6420     		movs	r0, #100
 706 0032 FFF7FEFF 		bl	wait_cycles
 707              	.LVL62:
 218:Src/main.c    **** 
 708              		.loc 1 218 0
 709 0036 0022     		movs	r2, #0
 710 0038 0199     		ldr	r1, [sp, #4]
 711 003a 0098     		ldr	r0, [sp]
 712 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 713              	.LVL63:
 714              	.LBB6:
 220:Src/main.c    ****     wait_cycles(POT_DELAY);
 715              		.loc 1 220 0
 716 0040 0024     		movs	r4, #0
 717 0042 14E0     		b	.L30
 718              	.LVL64:
 719              	.L31:
 221:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 1);
 720              		.loc 1 221 0 discriminator 3
 721 0044 6420     		movs	r0, #100
 722 0046 FFF7FEFF 		bl	wait_cycles
ARM GAS  /tmp/cc3mDgG2.s 			page 28


 723              	.LVL65:
 222:Src/main.c    ****     wait_cycles(POT_DELAY);
 724              		.loc 1 222 0 discriminator 3
 725 004a 8027     		movs	r7, #128
 726 004c 7F01     		lsls	r7, r7, #5
 727 004e 9026     		movs	r6, #144
 728 0050 F605     		lsls	r6, r6, #23
 729 0052 0122     		movs	r2, #1
 730 0054 3900     		movs	r1, r7
 731 0056 3000     		movs	r0, r6
 732 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 733              	.LVL66:
 223:Src/main.c    ****     HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 734              		.loc 1 223 0 discriminator 3
 735 005c 6420     		movs	r0, #100
 736 005e FFF7FEFF 		bl	wait_cycles
 737              	.LVL67:
 224:Src/main.c    ****   }
 738              		.loc 1 224 0 discriminator 3
 739 0062 0022     		movs	r2, #0
 740 0064 3900     		movs	r1, r7
 741 0066 3000     		movs	r0, r6
 742 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 743              	.LVL68:
 220:Src/main.c    ****     wait_cycles(POT_DELAY);
 744              		.loc 1 220 0 discriminator 3
 745 006c 0134     		adds	r4, r4, #1
 746              	.LVL69:
 747              	.L30:
 220:Src/main.c    ****     wait_cycles(POT_DELAY);
 748              		.loc 1 220 0 is_stmt 0 discriminator 1
 749 006e 4023     		movs	r3, #64
 750 0070 5B1B     		subs	r3, r3, r5
 751 0072 9C42     		cmp	r4, r3
 752 0074 E6DB     		blt	.L31
 753              	.LBE6:
 226:Src/main.c    ****   wait_cycles(POT_DELAY);
 754              		.loc 1 226 0 is_stmt 1
 755 0076 0122     		movs	r2, #1
 756 0078 0199     		ldr	r1, [sp, #4]
 757 007a 0098     		ldr	r0, [sp]
 758 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 759              	.LVL70:
 227:Src/main.c    ****   HAL_GPIO_WritePin(UD_STATE_GPIO_Port, UD_STATE_Pin, 0);
 760              		.loc 1 227 0
 761 0080 6420     		movs	r0, #100
 762 0082 FFF7FEFF 		bl	wait_cycles
 763              	.LVL71:
 228:Src/main.c    **** }
 764              		.loc 1 228 0
 765 0086 0022     		movs	r2, #0
 766 0088 8021     		movs	r1, #128
 767 008a 4901     		lsls	r1, r1, #5
 768 008c 9020     		movs	r0, #144
 769 008e C005     		lsls	r0, r0, #23
 770 0090 FFF7FEFF 		bl	HAL_GPIO_WritePin
 771              	.LVL72:
ARM GAS  /tmp/cc3mDgG2.s 			page 29


 229:Src/main.c    **** 
 772              		.loc 1 229 0
 773 0094 03B0     		add	sp, sp, #12
 774              	.LVL73:
 775              		@ sp needed
 776              	.LVL74:
 777              	.LVL75:
 778 0096 F0BD     		pop	{r4, r5, r6, r7, pc}
 779              		.cfi_endproc
 780              	.LFE42:
 782              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 783              		.align	1
 784              		.global	HAL_ADC_ConvCpltCallback
 785              		.syntax unified
 786              		.code	16
 787              		.thumb_func
 788              		.fpu softvfp
 790              	HAL_ADC_ConvCpltCallback:
 791              	.LFB44:
 246:Src/main.c    ****   adc_done = 1;
 792              		.loc 1 246 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797              	.LVL76:
 247:Src/main.c    **** }
 798              		.loc 1 247 0
 799 0000 0122     		movs	r2, #1
 800 0002 014B     		ldr	r3, .L33
 801 0004 1A60     		str	r2, [r3]
 248:Src/main.c    **** 
 802              		.loc 1 248 0
 803              		@ sp needed
 804 0006 7047     		bx	lr
 805              	.L34:
 806              		.align	2
 807              	.L33:
 808 0008 00000000 		.word	.LANCHOR2
 809              		.cfi_endproc
 810              	.LFE44:
 812              		.section	.text.dump_raw_samples,"ax",%progbits
 813              		.align	1
 814              		.global	dump_raw_samples
 815              		.syntax unified
 816              		.code	16
 817              		.thumb_func
 818              		.fpu softvfp
 820              	dump_raw_samples:
 821              	.LFB47:
 263:Src/main.c    ****   for(int i = 0;i<ADC_SAMPLE_WIDTH;i++){
 822              		.loc 1 263 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826 0000 10B5     		push	{r4, lr}
 827              	.LCFI15:
ARM GAS  /tmp/cc3mDgG2.s 			page 30


 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 4, -8
 830              		.cfi_offset 14, -4
 831              	.LVL77:
 832              	.LBB7:
 264:Src/main.c    ****     printf("%i,%i\r\n",i,adc_samples[i]);
 833              		.loc 1 264 0
 834 0002 0024     		movs	r4, #0
 835 0004 07E0     		b	.L36
 836              	.LVL78:
 837              	.L37:
 265:Src/main.c    ****   }
 838              		.loc 1 265 0 discriminator 3
 839 0006 6200     		lsls	r2, r4, #1
 840 0008 054B     		ldr	r3, .L38
 841 000a D25A     		ldrh	r2, [r2, r3]
 842 000c 2100     		movs	r1, r4
 843 000e 0548     		ldr	r0, .L38+4
 844 0010 FFF7FEFF 		bl	printf
 845              	.LVL79:
 264:Src/main.c    ****     printf("%i,%i\r\n",i,adc_samples[i]);
 846              		.loc 1 264 0 discriminator 3
 847 0014 0134     		adds	r4, r4, #1
 848              	.LVL80:
 849              	.L36:
 264:Src/main.c    ****     printf("%i,%i\r\n",i,adc_samples[i]);
 850              		.loc 1 264 0 is_stmt 0 discriminator 1
 851 0016 044B     		ldr	r3, .L38+8
 852 0018 9C42     		cmp	r4, r3
 853 001a F4DD     		ble	.L37
 854              	.LBE7:
 267:Src/main.c    **** 
 855              		.loc 1 267 0 is_stmt 1
 856              		@ sp needed
 857              	.LVL81:
 858 001c 10BD     		pop	{r4, pc}
 859              	.L39:
 860 001e C046     		.align	2
 861              	.L38:
 862 0020 00000000 		.word	.LANCHOR3
 863 0024 00000000 		.word	.LC6
 864 0028 FF030000 		.word	1023
 865              		.cfi_endproc
 866              	.LFE47:
 868              		.section	.text.peak_detect,"ax",%progbits
 869              		.align	1
 870              		.global	peak_detect
 871              		.syntax unified
 872              		.code	16
 873              		.thumb_func
 874              		.fpu softvfp
 876              	peak_detect:
 877              	.LFB48:
 270:Src/main.c    ****   uint16_t peak = 0;
 878              		.loc 1 270 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc3mDgG2.s 			page 31


 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL82:
 883 0000 10B5     		push	{r4, lr}
 884              	.LCFI16:
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 4, -8
 887              		.cfi_offset 14, -4
 888              	.LVL83:
 271:Src/main.c    ****   for(start;start<end;start++){
 889              		.loc 1 271 0
 890 0002 0024     		movs	r4, #0
 272:Src/main.c    ****     if(adc_samples[start] > peak){
 891              		.loc 1 272 0
 892 0004 01E0     		b	.L41
 893              	.LVL84:
 894              	.L42:
 895 0006 0130     		adds	r0, r0, #1
 896              	.LVL85:
 897 0008 80B2     		uxth	r0, r0
 898              	.LVL86:
 899              	.L41:
 272:Src/main.c    ****     if(adc_samples[start] > peak){
 900              		.loc 1 272 0 is_stmt 0 discriminator 1
 901 000a 8842     		cmp	r0, r1
 902 000c 06D2     		bcs	.L45
 273:Src/main.c    ****       peak = adc_samples[start];
 903              		.loc 1 273 0 is_stmt 1
 904 000e 4300     		lsls	r3, r0, #1
 905 0010 034A     		ldr	r2, .L46
 906 0012 9B5A     		ldrh	r3, [r3, r2]
 907 0014 9C42     		cmp	r4, r3
 908 0016 F6D2     		bcs	.L42
 274:Src/main.c    ****     }
 909              		.loc 1 274 0
 910 0018 1C00     		movs	r4, r3
 911              	.LVL87:
 912 001a F4E7     		b	.L42
 913              	.LVL88:
 914              	.L45:
 278:Src/main.c    **** 
 915              		.loc 1 278 0
 916 001c 2000     		movs	r0, r4
 917              	.LVL89:
 918              		@ sp needed
 919              	.LVL90:
 920 001e 10BD     		pop	{r4, pc}
 921              	.L47:
 922              		.align	2
 923              	.L46:
 924 0020 00000000 		.word	.LANCHOR3
 925              		.cfi_endproc
 926              	.LFE48:
 928              		.section	.text.peak_sample,"ax",%progbits
 929              		.align	1
 930              		.global	peak_sample
 931              		.syntax unified
 932              		.code	16
ARM GAS  /tmp/cc3mDgG2.s 			page 32


 933              		.thumb_func
 934              		.fpu softvfp
 936              	peak_sample:
 937              	.LFB49:
 280:Src/main.c    ****   uint16_t peak = 0;
 938              		.loc 1 280 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942 0000 10B5     		push	{r4, lr}
 943              	.LCFI17:
 944              		.cfi_def_cfa_offset 8
 945              		.cfi_offset 4, -8
 946              		.cfi_offset 14, -4
 947              	.LVL91:
 948              	.LBB8:
 284:Src/main.c    ****     if(adc_samples[i] > peak){
 949              		.loc 1 284 0
 950 0002 0023     		movs	r3, #0
 951              	.LBE8:
 282:Src/main.c    **** 
 952              		.loc 1 282 0
 953 0004 0020     		movs	r0, #0
 281:Src/main.c    ****   uint16_t peak_sample = 0;
 954              		.loc 1 281 0
 955 0006 0024     		movs	r4, #0
 956              	.LBB9:
 284:Src/main.c    ****     if(adc_samples[i] > peak){
 957              		.loc 1 284 0
 958 0008 01E0     		b	.L49
 959              	.LVL92:
 960              	.L50:
 284:Src/main.c    ****     if(adc_samples[i] > peak){
 961              		.loc 1 284 0 is_stmt 0 discriminator 2
 962 000a 0133     		adds	r3, r3, #1
 963              	.LVL93:
 964 000c 9BB2     		uxth	r3, r3
 965              	.LVL94:
 966              	.L49:
 284:Src/main.c    ****     if(adc_samples[i] > peak){
 967              		.loc 1 284 0 discriminator 1
 968 000e 064A     		ldr	r2, .L54
 969 0010 9342     		cmp	r3, r2
 970 0012 07D8     		bhi	.L53
 285:Src/main.c    ****       peak = adc_samples[i];
 971              		.loc 1 285 0 is_stmt 1
 972 0014 5A00     		lsls	r2, r3, #1
 973 0016 0549     		ldr	r1, .L54+4
 974 0018 525A     		ldrh	r2, [r2, r1]
 975 001a 9442     		cmp	r4, r2
 976 001c F5D2     		bcs	.L50
 287:Src/main.c    ****     }
 977              		.loc 1 287 0
 978 001e 1800     		movs	r0, r3
 979              	.LVL95:
 286:Src/main.c    ****       peak_sample = i;
 980              		.loc 1 286 0
ARM GAS  /tmp/cc3mDgG2.s 			page 33


 981 0020 1400     		movs	r4, r2
 982              	.LVL96:
 983 0022 F2E7     		b	.L50
 984              	.LVL97:
 985              	.L53:
 986              	.LBE9:
 291:Src/main.c    **** 
 987              		.loc 1 291 0
 988              		@ sp needed
 989              	.LVL98:
 990 0024 10BD     		pop	{r4, pc}
 991              	.L55:
 992 0026 C046     		.align	2
 993              	.L54:
 994 0028 FF030000 		.word	1023
 995 002c 00000000 		.word	.LANCHOR3
 996              		.cfi_endproc
 997              	.LFE49:
 999              		.section	.text.set_pulse_amplitudes,"ax",%progbits
 1000              		.align	1
 1001              		.global	set_pulse_amplitudes
 1002              		.syntax unified
 1003              		.code	16
 1004              		.thumb_func
 1005              		.fpu softvfp
 1007              	set_pulse_amplitudes:
 1008              	.LFB50:
 299:Src/main.c    ****   for(int i = 0;i<pulse_number;i++){
 1009              		.loc 1 299 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 1013 0000 70B5     		push	{r4, r5, r6, lr}
 1014              	.LCFI18:
 1015              		.cfi_def_cfa_offset 16
 1016              		.cfi_offset 4, -16
 1017              		.cfi_offset 5, -12
 1018              		.cfi_offset 6, -8
 1019              		.cfi_offset 14, -4
 1020              	.LVL99:
 1021              	.LBB10:
 300:Src/main.c    ****     pulses[i][PULSE_AMPLITUDE] = peak_detect(pulses[i][PULSE_START],pulses[i][PULSE_END]);
 1022              		.loc 1 300 0
 1023 0002 0024     		movs	r4, #0
 1024 0004 0CE0     		b	.L57
 1025              	.LVL100:
 1026              	.L58:
 301:Src/main.c    ****   }
 1027              		.loc 1 301 0 discriminator 3
 1028 0006 094A     		ldr	r2, .L59
 1029 0008 6300     		lsls	r3, r4, #1
 1030 000a 1919     		adds	r1, r3, r4
 1031 000c 4D00     		lsls	r5, r1, #1
 1032 000e 5519     		adds	r5, r2, r5
 1033 0010 6988     		ldrh	r1, [r5, #2]
 1034 0012 1B19     		adds	r3, r3, r4
 1035 0014 5800     		lsls	r0, r3, #1
ARM GAS  /tmp/cc3mDgG2.s 			page 34


 1036 0016 805A     		ldrh	r0, [r0, r2]
 1037 0018 FFF7FEFF 		bl	peak_detect
 1038              	.LVL101:
 1039 001c A880     		strh	r0, [r5, #4]
 300:Src/main.c    ****     pulses[i][PULSE_AMPLITUDE] = peak_detect(pulses[i][PULSE_START],pulses[i][PULSE_END]);
 1040              		.loc 1 300 0 discriminator 3
 1041 001e 0134     		adds	r4, r4, #1
 1042              	.LVL102:
 1043              	.L57:
 300:Src/main.c    ****     pulses[i][PULSE_AMPLITUDE] = peak_detect(pulses[i][PULSE_START],pulses[i][PULSE_END]);
 1044              		.loc 1 300 0 is_stmt 0 discriminator 1
 1045 0020 034B     		ldr	r3, .L59+4
 1046 0022 1B68     		ldr	r3, [r3]
 1047 0024 9C42     		cmp	r4, r3
 1048 0026 EEDB     		blt	.L58
 1049              	.LBE10:
 303:Src/main.c    **** 
 1050              		.loc 1 303 0 is_stmt 1
 1051              		@ sp needed
 1052              	.LVL103:
 1053 0028 70BD     		pop	{r4, r5, r6, pc}
 1054              	.L60:
 1055 002a C046     		.align	2
 1056              	.L59:
 1057 002c 00000000 		.word	.LANCHOR4
 1058 0030 00000000 		.word	.LANCHOR5
 1059              		.cfi_endproc
 1060              	.LFE50:
 1062              		.section	.text.split_into_pulses,"ax",%progbits
 1063              		.align	1
 1064              		.global	split_into_pulses
 1065              		.syntax unified
 1066              		.code	16
 1067              		.thumb_func
 1068              		.fpu softvfp
 1070              	split_into_pulses:
 1071              	.LFB51:
 305:Src/main.c    ****   uint16_t threshold = 3;
 1072              		.loc 1 305 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 0
 1075              		@ frame_needed = 0, uses_anonymous_args = 0
 1076 0000 10B5     		push	{r4, lr}
 1077              	.LCFI19:
 1078              		.cfi_def_cfa_offset 8
 1079              		.cfi_offset 4, -8
 1080              		.cfi_offset 14, -4
 1081              	.LVL104:
 307:Src/main.c    ****   int pulse_found = 0;
 1082              		.loc 1 307 0
 1083 0002 0022     		movs	r2, #0
 1084 0004 154B     		ldr	r3, .L67
 1085 0006 1A60     		str	r2, [r3]
 1086              	.LVL105:
 1087              	.LBB11:
 309:Src/main.c    ****     if(pulse_number > MAX_PULSE_COUNT-2){
 1088              		.loc 1 309 0
ARM GAS  /tmp/cc3mDgG2.s 			page 35


 1089 0008 0023     		movs	r3, #0
 1090              	.LBE11:
 308:Src/main.c    ****   for(uint16_t i = 0;i<ADC_SAMPLE_WIDTH;i++){
 1091              		.loc 1 308 0
 1092 000a 0024     		movs	r4, #0
 1093              	.LBB12:
 309:Src/main.c    ****     if(pulse_number > MAX_PULSE_COUNT-2){
 1094              		.loc 1 309 0
 1095 000c 0DE0     		b	.L62
 1096              	.LVL106:
 1097              	.L64:
 320:Src/main.c    ****         pulses[pulse_number][PULSE_END] = i;
 1098              		.loc 1 320 0
 1099 000e 002C     		cmp	r4, #0
 1100 0010 09D0     		beq	.L65
 321:Src/main.c    ****         pulse_number++;
 1101              		.loc 1 321 0
 1102 0012 4A00     		lsls	r2, r1, #1
 1103 0014 5218     		adds	r2, r2, r1
 1104 0016 5000     		lsls	r0, r2, #1
 1105 0018 114A     		ldr	r2, .L67+4
 1106 001a 1218     		adds	r2, r2, r0
 1107 001c 5380     		strh	r3, [r2, #2]
 322:Src/main.c    ****       }
 1108              		.loc 1 322 0
 1109 001e 0131     		adds	r1, r1, #1
 1110 0020 0E4A     		ldr	r2, .L67
 1111 0022 1160     		str	r1, [r2]
 324:Src/main.c    ****     }
 1112              		.loc 1 324 0
 1113 0024 0024     		movs	r4, #0
 1114              	.LVL107:
 1115              	.L65:
 309:Src/main.c    ****     if(pulse_number > MAX_PULSE_COUNT-2){
 1116              		.loc 1 309 0 discriminator 2
 1117 0026 0133     		adds	r3, r3, #1
 1118              	.LVL108:
 1119 0028 9BB2     		uxth	r3, r3
 1120              	.LVL109:
 1121              	.L62:
 309:Src/main.c    ****     if(pulse_number > MAX_PULSE_COUNT-2){
 1122              		.loc 1 309 0 is_stmt 0 discriminator 1
 1123 002a 0E4A     		ldr	r2, .L67+8
 1124 002c 9342     		cmp	r3, r2
 1125 002e 11D8     		bhi	.L63
 310:Src/main.c    ****       break;
 1126              		.loc 1 310 0 is_stmt 1
 1127 0030 0A4A     		ldr	r2, .L67
 1128 0032 1168     		ldr	r1, [r2]
 1129 0034 4429     		cmp	r1, #68
 1130 0036 0DDC     		bgt	.L63
 313:Src/main.c    ****       if(!pulse_found){
 1131              		.loc 1 313 0
 1132 0038 5A00     		lsls	r2, r3, #1
 1133 003a 0B48     		ldr	r0, .L67+12
 1134 003c 125A     		ldrh	r2, [r2, r0]
 1135 003e 032A     		cmp	r2, #3
ARM GAS  /tmp/cc3mDgG2.s 			page 36


 1136 0040 E5D9     		bls	.L64
 314:Src/main.c    ****         pulses[pulse_number][PULSE_START] = i;
 1137              		.loc 1 314 0
 1138 0042 002C     		cmp	r4, #0
 1139 0044 EFD1     		bne	.L65
 315:Src/main.c    ****       }
 1140              		.loc 1 315 0
 1141 0046 4A00     		lsls	r2, r1, #1
 1142 0048 5118     		adds	r1, r2, r1
 1143 004a 4A00     		lsls	r2, r1, #1
 1144 004c 0449     		ldr	r1, .L67+4
 1145 004e 5352     		strh	r3, [r2, r1]
 317:Src/main.c    ****     }
 1146              		.loc 1 317 0
 1147 0050 0134     		adds	r4, r4, #1
 1148              	.LVL110:
 1149 0052 E8E7     		b	.L65
 1150              	.LVL111:
 1151              	.L63:
 1152              	.LBE12:
 327:Src/main.c    **** }
 1153              		.loc 1 327 0
 1154 0054 FFF7FEFF 		bl	set_pulse_amplitudes
 1155              	.LVL112:
 328:Src/main.c    **** 
 1156              		.loc 1 328 0
 1157              		@ sp needed
 1158              	.LVL113:
 1159 0058 10BD     		pop	{r4, pc}
 1160              	.L68:
 1161 005a C046     		.align	2
 1162              	.L67:
 1163 005c 00000000 		.word	.LANCHOR5
 1164 0060 00000000 		.word	.LANCHOR4
 1165 0064 FF030000 		.word	1023
 1166 0068 00000000 		.word	.LANCHOR3
 1167              		.cfi_endproc
 1168              	.LFE51:
 1170              		.section	.text.dump_pulses,"ax",%progbits
 1171              		.align	1
 1172              		.global	dump_pulses
 1173              		.syntax unified
 1174              		.code	16
 1175              		.thumb_func
 1176              		.fpu softvfp
 1178              	dump_pulses:
 1179              	.LFB52:
 330:Src/main.c    ****   for(int i = 0;i<pulse_number;i++){
 1180              		.loc 1 330 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184 0000 10B5     		push	{r4, lr}
 1185              	.LCFI20:
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 4, -8
 1188              		.cfi_offset 14, -4
ARM GAS  /tmp/cc3mDgG2.s 			page 37


 1189              	.LVL114:
 1190              	.LBB13:
 331:Src/main.c    ****     printf("%i,%i,%i\r\n",pulses[i][PULSE_START],pulses[i][PULSE_END],pulses[i][PULSE_AMPLITUDE]);
 1191              		.loc 1 331 0
 1192 0002 0024     		movs	r4, #0
 1193 0004 0CE0     		b	.L70
 1194              	.LVL115:
 1195              	.L71:
 332:Src/main.c    ****   }
 1196              		.loc 1 332 0 discriminator 3
 1197 0006 094B     		ldr	r3, .L72
 1198 0008 6200     		lsls	r2, r4, #1
 1199 000a 1019     		adds	r0, r2, r4
 1200 000c 4100     		lsls	r1, r0, #1
 1201 000e C95A     		ldrh	r1, [r1, r3]
 1202 0010 4000     		lsls	r0, r0, #1
 1203 0012 1B18     		adds	r3, r3, r0
 1204 0014 5A88     		ldrh	r2, [r3, #2]
 1205 0016 9B88     		ldrh	r3, [r3, #4]
 1206 0018 0548     		ldr	r0, .L72+4
 1207 001a FFF7FEFF 		bl	printf
 1208              	.LVL116:
 331:Src/main.c    ****     printf("%i,%i,%i\r\n",pulses[i][PULSE_START],pulses[i][PULSE_END],pulses[i][PULSE_AMPLITUDE]);
 1209              		.loc 1 331 0 discriminator 3
 1210 001e 0134     		adds	r4, r4, #1
 1211              	.LVL117:
 1212              	.L70:
 331:Src/main.c    ****     printf("%i,%i,%i\r\n",pulses[i][PULSE_START],pulses[i][PULSE_END],pulses[i][PULSE_AMPLITUDE]);
 1213              		.loc 1 331 0 is_stmt 0 discriminator 1
 1214 0020 044B     		ldr	r3, .L72+8
 1215 0022 1B68     		ldr	r3, [r3]
 1216 0024 9C42     		cmp	r4, r3
 1217 0026 EEDB     		blt	.L71
 1218              	.LBE13:
 334:Src/main.c    **** 
 1219              		.loc 1 334 0 is_stmt 1
 1220              		@ sp needed
 1221              	.LVL118:
 1222 0028 10BD     		pop	{r4, pc}
 1223              	.L73:
 1224 002a C046     		.align	2
 1225              	.L72:
 1226 002c 00000000 		.word	.LANCHOR4
 1227 0030 00000000 		.word	.LC16
 1228 0034 00000000 		.word	.LANCHOR5
 1229              		.cfi_endproc
 1230              	.LFE52:
 1232              		.section	.text.transmit_pulse_train,"ax",%progbits
 1233              		.align	1
 1234              		.global	transmit_pulse_train
 1235              		.syntax unified
 1236              		.code	16
 1237              		.thumb_func
 1238              		.fpu softvfp
 1240              	transmit_pulse_train:
 1241              	.LFB53:
 336:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim16);
ARM GAS  /tmp/cc3mDgG2.s 			page 38


 1242              		.loc 1 336 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 0
 1245              		@ frame_needed = 0, uses_anonymous_args = 0
 1246              	.LVL119:
 1247 0000 10B5     		push	{r4, lr}
 1248              	.LCFI21:
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 4, -8
 1251              		.cfi_offset 14, -4
 1252 0002 0400     		movs	r4, r0
 337:Src/main.c    ****   piezo_pulses = power;
 1253              		.loc 1 337 0
 1254 0004 0748     		ldr	r0, .L76
 1255              	.LVL120:
 1256 0006 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1257              	.LVL121:
 338:Src/main.c    ****   while(piezo_pulses);
 1258              		.loc 1 338 0
 1259 000a 074B     		ldr	r3, .L76+4
 1260 000c 1C60     		str	r4, [r3]
 1261              	.L75:
 339:Src/main.c    ****   break_before();
 1262              		.loc 1 339 0 discriminator 1
 1263 000e 064B     		ldr	r3, .L76+4
 1264 0010 1B68     		ldr	r3, [r3]
 1265 0012 002B     		cmp	r3, #0
 1266 0014 FBD1     		bne	.L75
 340:Src/main.c    ****   HAL_TIM_Base_Stop_IT(&htim16);
 1267              		.loc 1 340 0
 1268 0016 FFF7FEFF 		bl	break_before
 1269              	.LVL122:
 341:Src/main.c    **** }
 1270              		.loc 1 341 0
 1271 001a 0248     		ldr	r0, .L76
 1272 001c FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1273              	.LVL123:
 342:Src/main.c    **** /* USER CODE END 4 */
 1274              		.loc 1 342 0
 1275              		@ sp needed
 1276              	.LVL124:
 1277 0020 10BD     		pop	{r4, pc}
 1278              	.L77:
 1279 0022 C046     		.align	2
 1280              	.L76:
 1281 0024 00000000 		.word	htim16
 1282 0028 00000000 		.word	.LANCHOR0
 1283              		.cfi_endproc
 1284              	.LFE53:
 1286              		.section	.text._Error_Handler,"ax",%progbits
 1287              		.align	1
 1288              		.global	_Error_Handler
 1289              		.syntax unified
 1290              		.code	16
 1291              		.thumb_func
 1292              		.fpu softvfp
 1294              	_Error_Handler:
ARM GAS  /tmp/cc3mDgG2.s 			page 39


 1295              	.LFB63:
 760:Src/main.c    **** 
 761:Src/main.c    **** /* USER CODE BEGIN 4 */
 762:Src/main.c    **** /* USER CODE END 4 */
 763:Src/main.c    **** 
 764:Src/main.c    **** /**
 765:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 766:Src/main.c    ****   * @param  file: The file name as string.
 767:Src/main.c    ****   * @param  line: The line in file as a number.
 768:Src/main.c    ****   * @retval None
 769:Src/main.c    ****   */
 770:Src/main.c    **** void _Error_Handler(char *file, int line)
 771:Src/main.c    **** {
 1296              		.loc 1 771 0
 1297              		.cfi_startproc
 1298              		@ Volatile: function does not return.
 1299              		@ args = 0, pretend = 0, frame = 0
 1300              		@ frame_needed = 0, uses_anonymous_args = 0
 1301              	.LVL125:
 1302 0000 70B5     		push	{r4, r5, r6, lr}
 1303              	.LCFI22:
 1304              		.cfi_def_cfa_offset 16
 1305              		.cfi_offset 4, -16
 1306              		.cfi_offset 5, -12
 1307              		.cfi_offset 6, -8
 1308              		.cfi_offset 14, -4
 1309 0002 0500     		movs	r5, r0
 1310 0004 0C00     		movs	r4, r1
 1311              	.LVL126:
 1312              	.L79:
 772:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 773:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 774:Src/main.c    ****   while(1)
 775:Src/main.c    ****   {
 776:Src/main.c    ****     printf("File: %s Line: %i",file,line);
 1313              		.loc 1 776 0 discriminator 1
 1314 0006 2200     		movs	r2, r4
 1315 0008 2900     		movs	r1, r5
 1316 000a 0248     		ldr	r0, .L80
 1317 000c FFF7FEFF 		bl	printf
 1318              	.LVL127:
 1319 0010 F9E7     		b	.L79
 1320              	.L81:
 1321 0012 C046     		.align	2
 1322              	.L80:
 1323 0014 00000000 		.word	.LC21
 1324              		.cfi_endproc
 1325              	.LFE63:
 1327              		.global	__aeabi_uidiv
 1328              		.section	.text.set_tx_frequency,"ax",%progbits
 1329              		.align	1
 1330              		.global	set_tx_frequency
 1331              		.syntax unified
 1332              		.code	16
 1333              		.thumb_func
 1334              		.fpu softvfp
 1336              	set_tx_frequency:
ARM GAS  /tmp/cc3mDgG2.s 			page 40


 1337              	.LFB40:
 175:Src/main.c    ****   htim16.Instance = TIM16;
 1338              		.loc 1 175 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 0
 1341              		@ frame_needed = 0, uses_anonymous_args = 0
 1342              	.LVL128:
 1343 0000 70B5     		push	{r4, r5, r6, lr}
 1344              	.LCFI23:
 1345              		.cfi_def_cfa_offset 16
 1346              		.cfi_offset 4, -16
 1347              		.cfi_offset 5, -12
 1348              		.cfi_offset 6, -8
 1349              		.cfi_offset 14, -4
 1350 0002 0100     		movs	r1, r0
 176:Src/main.c    ****   htim16.Init.Prescaler = 0;
 1351              		.loc 1 176 0
 1352 0004 0B4C     		ldr	r4, .L85
 1353 0006 0C4B     		ldr	r3, .L85+4
 1354 0008 2360     		str	r3, [r4]
 177:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 1355              		.loc 1 177 0
 1356 000a 0025     		movs	r5, #0
 1357 000c 6560     		str	r5, [r4, #4]
 178:Src/main.c    ****   htim16.Init.Period = (24000000UL/freq);
 1358              		.loc 1 178 0
 1359 000e A560     		str	r5, [r4, #8]
 179:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1360              		.loc 1 179 0
 1361 0010 0A48     		ldr	r0, .L85+8
 1362              	.LVL129:
 1363 0012 FFF7FEFF 		bl	__aeabi_uidiv
 1364              	.LVL130:
 1365 0016 E060     		str	r0, [r4, #12]
 180:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 1366              		.loc 1 180 0
 1367 0018 2561     		str	r5, [r4, #16]
 181:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1368              		.loc 1 181 0
 1369 001a 6561     		str	r5, [r4, #20]
 182:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 1370              		.loc 1 182 0
 1371 001c A561     		str	r5, [r4, #24]
 183:Src/main.c    ****   {
 1372              		.loc 1 183 0
 1373 001e 2000     		movs	r0, r4
 1374 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1375              	.LVL131:
 1376 0024 0028     		cmp	r0, #0
 1377 0026 00D1     		bne	.L84
 187:Src/main.c    **** 
 1378              		.loc 1 187 0
 1379              		@ sp needed
 1380 0028 70BD     		pop	{r4, r5, r6, pc}
 1381              	.L84:
 185:Src/main.c    ****   }
 1382              		.loc 1 185 0
ARM GAS  /tmp/cc3mDgG2.s 			page 41


 1383 002a B921     		movs	r1, #185
 1384 002c 0448     		ldr	r0, .L85+12
 1385 002e FFF7FEFF 		bl	_Error_Handler
 1386              	.LVL132:
 1387              	.L86:
 1388 0032 C046     		.align	2
 1389              	.L85:
 1390 0034 00000000 		.word	htim16
 1391 0038 00440140 		.word	1073824768
 1392 003c 00366E01 		.word	24000000
 1393 0040 00000000 		.word	.LC24
 1394              		.cfi_endproc
 1395              	.LFE40:
 1397              		.section	.text.MX_ADC_Init,"ax",%progbits
 1398              		.align	1
 1399              		.syntax unified
 1400              		.code	16
 1401              		.thumb_func
 1402              		.fpu softvfp
 1404              	MX_ADC_Init:
 1405              	.LFB56:
 551:Src/main.c    **** 
 1406              		.loc 1 551 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 16
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 1410 0000 00B5     		push	{lr}
 1411              	.LCFI24:
 1412              		.cfi_def_cfa_offset 4
 1413              		.cfi_offset 14, -4
 1414 0002 85B0     		sub	sp, sp, #20
 1415              	.LCFI25:
 1416              		.cfi_def_cfa_offset 24
 557:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 1417              		.loc 1 557 0
 1418 0004 1848     		ldr	r0, .L92
 1419 0006 194B     		ldr	r3, .L92+4
 1420 0008 0360     		str	r3, [r0]
 558:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 1421              		.loc 1 558 0
 1422 000a 0023     		movs	r3, #0
 1423 000c 4360     		str	r3, [r0, #4]
 559:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1424              		.loc 1 559 0
 1425 000e 8360     		str	r3, [r0, #8]
 560:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 1426              		.loc 1 560 0
 1427 0010 C360     		str	r3, [r0, #12]
 561:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1428              		.loc 1 561 0
 1429 0012 0122     		movs	r2, #1
 1430 0014 0261     		str	r2, [r0, #16]
 562:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 1431              		.loc 1 562 0
 1432 0016 0421     		movs	r1, #4
 1433 0018 4161     		str	r1, [r0, #20]
 563:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
ARM GAS  /tmp/cc3mDgG2.s 			page 42


 1434              		.loc 1 563 0
 1435 001a 8361     		str	r3, [r0, #24]
 564:Src/main.c    ****   hadc.Init.ContinuousConvMode = ENABLE;
 1436              		.loc 1 564 0
 1437 001c C361     		str	r3, [r0, #28]
 565:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 1438              		.loc 1 565 0
 1439 001e 0262     		str	r2, [r0, #32]
 566:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1440              		.loc 1 566 0
 1441 0020 4362     		str	r3, [r0, #36]
 567:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1442              		.loc 1 567 0
 1443 0022 C221     		movs	r1, #194
 1444 0024 FF31     		adds	r1, r1, #255
 1445 0026 8162     		str	r1, [r0, #40]
 568:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 1446              		.loc 1 568 0
 1447 0028 C362     		str	r3, [r0, #44]
 569:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 1448              		.loc 1 569 0
 1449 002a 0263     		str	r2, [r0, #48]
 570:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 1450              		.loc 1 570 0
 1451 002c 4263     		str	r2, [r0, #52]
 571:Src/main.c    ****   {
 1452              		.loc 1 571 0
 1453 002e FFF7FEFF 		bl	HAL_ADC_Init
 1454              	.LVL133:
 1455 0032 0028     		cmp	r0, #0
 1456 0034 0FD1     		bne	.L90
 578:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 1457              		.loc 1 578 0
 1458 0036 0323     		movs	r3, #3
 1459 0038 0193     		str	r3, [sp, #4]
 579:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 1460              		.loc 1 579 0
 1461 003a 8023     		movs	r3, #128
 1462 003c 5B01     		lsls	r3, r3, #5
 1463 003e 0293     		str	r3, [sp, #8]
 580:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1464              		.loc 1 580 0
 1465 0040 8023     		movs	r3, #128
 1466 0042 5B05     		lsls	r3, r3, #21
 1467 0044 0393     		str	r3, [sp, #12]
 581:Src/main.c    ****   {
 1468              		.loc 1 581 0
 1469 0046 01A9     		add	r1, sp, #4
 1470 0048 0748     		ldr	r0, .L92
 1471 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1472              	.LVL134:
 1473 004e 0028     		cmp	r0, #0
 1474 0050 05D1     		bne	.L91
 586:Src/main.c    **** 
 1475              		.loc 1 586 0
 1476 0052 05B0     		add	sp, sp, #20
 1477              		@ sp needed
ARM GAS  /tmp/cc3mDgG2.s 			page 43


 1478 0054 00BD     		pop	{pc}
 1479              	.L90:
 573:Src/main.c    ****   }
 1480              		.loc 1 573 0
 1481 0056 0649     		ldr	r1, .L92+8
 1482 0058 0648     		ldr	r0, .L92+12
 1483 005a FFF7FEFF 		bl	_Error_Handler
 1484              	.LVL135:
 1485              	.L91:
 583:Src/main.c    ****   }
 1486              		.loc 1 583 0
 1487 005e 0649     		ldr	r1, .L92+16
 1488 0060 0448     		ldr	r0, .L92+12
 1489 0062 FFF7FEFF 		bl	_Error_Handler
 1490              	.LVL136:
 1491              	.L93:
 1492 0066 C046     		.align	2
 1493              	.L92:
 1494 0068 00000000 		.word	hadc
 1495 006c 00240140 		.word	1073816576
 1496 0070 3D020000 		.word	573
 1497 0074 00000000 		.word	.LC24
 1498 0078 47020000 		.word	583
 1499              		.cfi_endproc
 1500              	.LFE56:
 1502              		.section	.text.switch_adc_channel,"ax",%progbits
 1503              		.align	1
 1504              		.global	switch_adc_channel
 1505              		.syntax unified
 1506              		.code	16
 1507              		.thumb_func
 1508              		.fpu softvfp
 1510              	switch_adc_channel:
 1511              	.LFB43:
 233:Src/main.c    ****   HAL_ADC_DeInit(&hadc);
 1512              		.loc 1 233 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 16
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              	.LVL137:
 1517 0000 30B5     		push	{r4, r5, lr}
 1518              	.LCFI26:
 1519              		.cfi_def_cfa_offset 12
 1520              		.cfi_offset 4, -12
 1521              		.cfi_offset 5, -8
 1522              		.cfi_offset 14, -4
 1523 0002 85B0     		sub	sp, sp, #20
 1524              	.LCFI27:
 1525              		.cfi_def_cfa_offset 32
 1526 0004 0500     		movs	r5, r0
 234:Src/main.c    ****   MX_ADC_Init();
 1527              		.loc 1 234 0
 1528 0006 0C4C     		ldr	r4, .L97
 1529 0008 2000     		movs	r0, r4
 1530              	.LVL138:
 1531 000a FFF7FEFF 		bl	HAL_ADC_DeInit
 1532              	.LVL139:
ARM GAS  /tmp/cc3mDgG2.s 			page 44


 235:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 1533              		.loc 1 235 0
 1534 000e FFF7FEFF 		bl	MX_ADC_Init
 1535              	.LVL140:
 237:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 1536              		.loc 1 237 0
 1537 0012 0195     		str	r5, [sp, #4]
 238:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 1538              		.loc 1 238 0
 1539 0014 8023     		movs	r3, #128
 1540 0016 5B01     		lsls	r3, r3, #5
 1541 0018 0293     		str	r3, [sp, #8]
 239:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 1542              		.loc 1 239 0
 1543 001a 8023     		movs	r3, #128
 1544 001c 5B05     		lsls	r3, r3, #21
 1545 001e 0393     		str	r3, [sp, #12]
 240:Src/main.c    ****   {
 1546              		.loc 1 240 0
 1547 0020 01A9     		add	r1, sp, #4
 1548 0022 2000     		movs	r0, r4
 1549 0024 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1550              	.LVL141:
 1551 0028 0028     		cmp	r0, #0
 1552 002a 01D1     		bne	.L96
 244:Src/main.c    **** 
 1553              		.loc 1 244 0
 1554 002c 05B0     		add	sp, sp, #20
 1555              		@ sp needed
 1556              	.LVL142:
 1557 002e 30BD     		pop	{r4, r5, pc}
 1558              	.LVL143:
 1559              	.L96:
 242:Src/main.c    ****   }
 1560              		.loc 1 242 0
 1561 0030 F221     		movs	r1, #242
 1562 0032 0248     		ldr	r0, .L97+4
 1563 0034 FFF7FEFF 		bl	_Error_Handler
 1564              	.LVL144:
 1565              	.L98:
 1566              		.align	2
 1567              	.L97:
 1568 0038 00000000 		.word	hadc
 1569 003c 00000000 		.word	.LC24
 1570              		.cfi_endproc
 1571              	.LFE43:
 1573              		.section	.text.read_adc_channel,"ax",%progbits
 1574              		.align	1
 1575              		.global	read_adc_channel
 1576              		.syntax unified
 1577              		.code	16
 1578              		.thumb_func
 1579              		.fpu softvfp
 1581              	read_adc_channel:
 1582              	.LFB45:
 250:Src/main.c    ****   HAL_ADC_Stop_DMA(&hadc);
 1583              		.loc 1 250 0
ARM GAS  /tmp/cc3mDgG2.s 			page 45


 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              	.LVL145:
 1588 0000 70B5     		push	{r4, r5, r6, lr}
 1589              	.LCFI28:
 1590              		.cfi_def_cfa_offset 16
 1591              		.cfi_offset 4, -16
 1592              		.cfi_offset 5, -12
 1593              		.cfi_offset 6, -8
 1594              		.cfi_offset 14, -4
 1595 0002 0600     		movs	r6, r0
 1596 0004 0D00     		movs	r5, r1
 251:Src/main.c    ****   switch_adc_channel(channel);
 1597              		.loc 1 251 0
 1598 0006 0A4C     		ldr	r4, .L101
 1599 0008 2000     		movs	r0, r4
 1600              	.LVL146:
 1601 000a FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1602              	.LVL147:
 252:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_samples, len);
 1603              		.loc 1 252 0
 1604 000e 3000     		movs	r0, r6
 1605 0010 FFF7FEFF 		bl	switch_adc_channel
 1606              	.LVL148:
 253:Src/main.c    ****   while(!adc_done);
 1607              		.loc 1 253 0
 1608 0014 2A00     		movs	r2, r5
 1609 0016 0749     		ldr	r1, .L101+4
 1610 0018 2000     		movs	r0, r4
 1611 001a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1612              	.LVL149:
 1613              	.L100:
 254:Src/main.c    ****   HAL_ADC_Stop_DMA(&hadc);
 1614              		.loc 1 254 0 discriminator 1
 1615 001e 064B     		ldr	r3, .L101+8
 1616 0020 1B68     		ldr	r3, [r3]
 1617 0022 002B     		cmp	r3, #0
 1618 0024 FBD0     		beq	.L100
 255:Src/main.c    **** }
 1619              		.loc 1 255 0
 1620 0026 0248     		ldr	r0, .L101
 1621 0028 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 1622              	.LVL150:
 256:Src/main.c    **** 
 1623              		.loc 1 256 0
 1624              		@ sp needed
 1625              	.LVL151:
 1626              	.LVL152:
 1627 002c 70BD     		pop	{r4, r5, r6, pc}
 1628              	.L102:
 1629 002e C046     		.align	2
 1630              	.L101:
 1631 0030 00000000 		.word	hadc
 1632 0034 00000000 		.word	.LANCHOR3
 1633 0038 00000000 		.word	.LANCHOR2
 1634              		.cfi_endproc
ARM GAS  /tmp/cc3mDgG2.s 			page 46


 1635              	.LFE45:
 1637              		.global	__aeabi_i2d
 1638              		.global	__aeabi_dmul
 1639              		.global	__aeabi_ddiv
 1640              		.global	__aeabi_d2f
 1641              		.section	.text.get_boost_voltage,"ax",%progbits
 1642              		.align	1
 1643              		.global	get_boost_voltage
 1644              		.syntax unified
 1645              		.code	16
 1646              		.thumb_func
 1647              		.fpu softvfp
 1649              	get_boost_voltage:
 1650              	.LFB46:
 258:Src/main.c    ****   read_adc_channel(ADC_CHANNEL_3,128);
 1651              		.loc 1 258 0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 0
 1654              		@ frame_needed = 0, uses_anonymous_args = 0
 1655 0000 10B5     		push	{r4, lr}
 1656              	.LCFI29:
 1657              		.cfi_def_cfa_offset 8
 1658              		.cfi_offset 4, -8
 1659              		.cfi_offset 14, -4
 259:Src/main.c    ****   return (((adc_samples[0]/4096.0)*3.3)/0.0909);
 1660              		.loc 1 259 0
 1661 0002 8021     		movs	r1, #128
 1662 0004 0320     		movs	r0, #3
 1663 0006 FFF7FEFF 		bl	read_adc_channel
 1664              	.LVL153:
 260:Src/main.c    **** }
 1665              		.loc 1 260 0
 1666 000a 094B     		ldr	r3, .L104
 1667 000c 1888     		ldrh	r0, [r3]
 1668 000e FFF7FEFF 		bl	__aeabi_i2d
 1669              	.LVL154:
 1670 0012 0022     		movs	r2, #0
 1671 0014 074B     		ldr	r3, .L104+4
 1672 0016 FFF7FEFF 		bl	__aeabi_dmul
 1673              	.LVL155:
 1674 001a 074A     		ldr	r2, .L104+8
 1675 001c 074B     		ldr	r3, .L104+12
 1676 001e FFF7FEFF 		bl	__aeabi_dmul
 1677              	.LVL156:
 1678 0022 074A     		ldr	r2, .L104+16
 1679 0024 074B     		ldr	r3, .L104+20
 1680 0026 FFF7FEFF 		bl	__aeabi_ddiv
 1681              	.LVL157:
 1682 002a FFF7FEFF 		bl	__aeabi_d2f
 1683              	.LVL158:
 261:Src/main.c    **** 
 1684              		.loc 1 261 0
 1685              		@ sp needed
 1686 002e 10BD     		pop	{r4, pc}
 1687              	.L105:
 1688              		.align	2
 1689              	.L104:
ARM GAS  /tmp/cc3mDgG2.s 			page 47


 1690 0030 00000000 		.word	.LANCHOR3
 1691 0034 0000303F 		.word	1060110336
 1692 0038 66666666 		.word	1717986918
 1693 003c 66660A40 		.word	1074423398
 1694 0040 A1D634EF 		.word	-281749855
 1695 0044 3845B73F 		.word	1068975416
 1696              		.cfi_endproc
 1697              	.LFE46:
 1699              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1700              		.align	1
 1701              		.syntax unified
 1702              		.code	16
 1703              		.thumb_func
 1704              		.fpu softvfp
 1706              	MX_USART1_UART_Init:
 1707              	.LFB60:
 680:Src/main.c    **** 
 1708              		.loc 1 680 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 0, uses_anonymous_args = 0
 1712 0000 10B5     		push	{r4, lr}
 1713              	.LCFI30:
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 4, -8
 1716              		.cfi_offset 14, -4
 682:Src/main.c    ****   huart1.Init.BaudRate = 460800;
 1717              		.loc 1 682 0
 1718 0002 0C48     		ldr	r0, .L109
 1719 0004 0C4B     		ldr	r3, .L109+4
 1720 0006 0360     		str	r3, [r0]
 683:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1721              		.loc 1 683 0
 1722 0008 E123     		movs	r3, #225
 1723 000a DB02     		lsls	r3, r3, #11
 1724 000c 4360     		str	r3, [r0, #4]
 684:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1725              		.loc 1 684 0
 1726 000e 0023     		movs	r3, #0
 1727 0010 8360     		str	r3, [r0, #8]
 685:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1728              		.loc 1 685 0
 1729 0012 C360     		str	r3, [r0, #12]
 686:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX;
 1730              		.loc 1 686 0
 1731 0014 0361     		str	r3, [r0, #16]
 687:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1732              		.loc 1 687 0
 1733 0016 0822     		movs	r2, #8
 1734 0018 4261     		str	r2, [r0, #20]
 688:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1735              		.loc 1 688 0
 1736 001a 8361     		str	r3, [r0, #24]
 689:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1737              		.loc 1 689 0
 1738 001c C361     		str	r3, [r0, #28]
 690:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
ARM GAS  /tmp/cc3mDgG2.s 			page 48


 1739              		.loc 1 690 0
 1740 001e 0362     		str	r3, [r0, #32]
 691:Src/main.c    ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 1741              		.loc 1 691 0
 1742 0020 4362     		str	r3, [r0, #36]
 692:Src/main.c    ****   {
 1743              		.loc 1 692 0
 1744 0022 FFF7FEFF 		bl	HAL_HalfDuplex_Init
 1745              	.LVL159:
 1746 0026 0028     		cmp	r0, #0
 1747 0028 00D1     		bne	.L108
 697:Src/main.c    **** 
 1748              		.loc 1 697 0
 1749              		@ sp needed
 1750 002a 10BD     		pop	{r4, pc}
 1751              	.L108:
 694:Src/main.c    ****   }
 1752              		.loc 1 694 0
 1753 002c 0349     		ldr	r1, .L109+8
 1754 002e 0448     		ldr	r0, .L109+12
 1755 0030 FFF7FEFF 		bl	_Error_Handler
 1756              	.LVL160:
 1757              	.L110:
 1758              		.align	2
 1759              	.L109:
 1760 0034 00000000 		.word	huart1
 1761 0038 00380140 		.word	1073821696
 1762 003c B6020000 		.word	694
 1763 0040 00000000 		.word	.LC24
 1764              		.cfi_endproc
 1765              	.LFE60:
 1767              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1768              		.align	1
 1769              		.syntax unified
 1770              		.code	16
 1771              		.thumb_func
 1772              		.fpu softvfp
 1774              	MX_TIM1_Init:
 1775              	.LFB57:
 590:Src/main.c    **** 
 1776              		.loc 1 590 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 64
 1779              		@ frame_needed = 0, uses_anonymous_args = 0
 1780 0000 00B5     		push	{lr}
 1781              	.LCFI31:
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 14, -4
 1784 0002 91B0     		sub	sp, sp, #68
 1785              	.LCFI32:
 1786              		.cfi_def_cfa_offset 72
 596:Src/main.c    ****   htim1.Init.Prescaler = 1;
 1787              		.loc 1 596 0
 1788 0004 2648     		ldr	r0, .L120
 1789 0006 274B     		ldr	r3, .L120+4
 1790 0008 0360     		str	r3, [r0]
 597:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/cc3mDgG2.s 			page 49


 1791              		.loc 1 597 0
 1792 000a 0123     		movs	r3, #1
 1793 000c 4360     		str	r3, [r0, #4]
 598:Src/main.c    ****   htim1.Init.Period = 100;
 1794              		.loc 1 598 0
 1795 000e 0023     		movs	r3, #0
 1796 0010 8360     		str	r3, [r0, #8]
 599:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1797              		.loc 1 599 0
 1798 0012 6422     		movs	r2, #100
 1799 0014 C260     		str	r2, [r0, #12]
 600:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 1800              		.loc 1 600 0
 1801 0016 0361     		str	r3, [r0, #16]
 601:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1802              		.loc 1 601 0
 1803 0018 4361     		str	r3, [r0, #20]
 602:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 1804              		.loc 1 602 0
 1805 001a 8361     		str	r3, [r0, #24]
 603:Src/main.c    ****   {
 1806              		.loc 1 603 0
 1807 001c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1808              	.LVL161:
 1809 0020 0028     		cmp	r0, #0
 1810 0022 2CD1     		bne	.L116
 608:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1811              		.loc 1 608 0
 1812 0024 0023     		movs	r3, #0
 1813 0026 0E93     		str	r3, [sp, #56]
 609:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1814              		.loc 1 609 0
 1815 0028 0F93     		str	r3, [sp, #60]
 610:Src/main.c    ****   {
 1816              		.loc 1 610 0
 1817 002a 0EA9     		add	r1, sp, #56
 1818 002c 1C48     		ldr	r0, .L120
 1819 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1820              	.LVL162:
 1821 0032 0028     		cmp	r0, #0
 1822 0034 27D1     		bne	.L117
 615:Src/main.c    ****   sConfigOC.Pulse = 0;
 1823              		.loc 1 615 0
 1824 0036 6023     		movs	r3, #96
 1825 0038 0793     		str	r3, [sp, #28]
 616:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1826              		.loc 1 616 0
 1827 003a 0023     		movs	r3, #0
 1828 003c 0893     		str	r3, [sp, #32]
 617:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1829              		.loc 1 617 0
 1830 003e 0993     		str	r3, [sp, #36]
 618:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1831              		.loc 1 618 0
 1832 0040 0B93     		str	r3, [sp, #44]
 619:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1833              		.loc 1 619 0
ARM GAS  /tmp/cc3mDgG2.s 			page 50


 1834 0042 0C93     		str	r3, [sp, #48]
 620:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 1835              		.loc 1 620 0
 1836 0044 0D93     		str	r3, [sp, #52]
 621:Src/main.c    ****   {
 1837              		.loc 1 621 0
 1838 0046 0C22     		movs	r2, #12
 1839 0048 07A9     		add	r1, sp, #28
 1840 004a 1548     		ldr	r0, .L120
 1841 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1842              	.LVL163:
 1843 0050 0028     		cmp	r0, #0
 1844 0052 1DD1     		bne	.L118
 626:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1845              		.loc 1 626 0
 1846 0054 0023     		movs	r3, #0
 1847 0056 0093     		str	r3, [sp]
 627:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1848              		.loc 1 627 0
 1849 0058 0193     		str	r3, [sp, #4]
 628:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 1850              		.loc 1 628 0
 1851 005a 0293     		str	r3, [sp, #8]
 629:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1852              		.loc 1 629 0
 1853 005c 0393     		str	r3, [sp, #12]
 630:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1854              		.loc 1 630 0
 1855 005e 0493     		str	r3, [sp, #16]
 631:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1856              		.loc 1 631 0
 1857 0060 8022     		movs	r2, #128
 1858 0062 9201     		lsls	r2, r2, #6
 1859 0064 0592     		str	r2, [sp, #20]
 632:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1860              		.loc 1 632 0
 1861 0066 0693     		str	r3, [sp, #24]
 633:Src/main.c    ****   {
 1862              		.loc 1 633 0
 1863 0068 6946     		mov	r1, sp
 1864 006a 0D48     		ldr	r0, .L120
 1865 006c FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1866              	.LVL164:
 1867 0070 0028     		cmp	r0, #0
 1868 0072 11D1     		bne	.L119
 638:Src/main.c    **** 
 1869              		.loc 1 638 0
 1870 0074 0A48     		ldr	r0, .L120
 1871 0076 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1872              	.LVL165:
 640:Src/main.c    **** 
 1873              		.loc 1 640 0
 1874 007a 11B0     		add	sp, sp, #68
 1875              		@ sp needed
 1876 007c 00BD     		pop	{pc}
 1877              	.L116:
 605:Src/main.c    ****   }
ARM GAS  /tmp/cc3mDgG2.s 			page 51


 1878              		.loc 1 605 0
 1879 007e 0A49     		ldr	r1, .L120+8
 1880 0080 0A48     		ldr	r0, .L120+12
 1881 0082 FFF7FEFF 		bl	_Error_Handler
 1882              	.LVL166:
 1883              	.L117:
 612:Src/main.c    ****   }
 1884              		.loc 1 612 0
 1885 0086 9921     		movs	r1, #153
 1886 0088 8900     		lsls	r1, r1, #2
 1887 008a 0848     		ldr	r0, .L120+12
 1888 008c FFF7FEFF 		bl	_Error_Handler
 1889              	.LVL167:
 1890              	.L118:
 623:Src/main.c    ****   }
 1891              		.loc 1 623 0
 1892 0090 0749     		ldr	r1, .L120+16
 1893 0092 0648     		ldr	r0, .L120+12
 1894 0094 FFF7FEFF 		bl	_Error_Handler
 1895              	.LVL168:
 1896              	.L119:
 635:Src/main.c    ****   }
 1897              		.loc 1 635 0
 1898 0098 0649     		ldr	r1, .L120+20
 1899 009a 0448     		ldr	r0, .L120+12
 1900 009c FFF7FEFF 		bl	_Error_Handler
 1901              	.LVL169:
 1902              	.L121:
 1903              		.align	2
 1904              	.L120:
 1905 00a0 00000000 		.word	htim1
 1906 00a4 002C0140 		.word	1073818624
 1907 00a8 5D020000 		.word	605
 1908 00ac 00000000 		.word	.LC24
 1909 00b0 6F020000 		.word	623
 1910 00b4 7B020000 		.word	635
 1911              		.cfi_endproc
 1912              	.LFE57:
 1914              		.section	.text.MX_TIM16_Init,"ax",%progbits
 1915              		.align	1
 1916              		.syntax unified
 1917              		.code	16
 1918              		.thumb_func
 1919              		.fpu softvfp
 1921              	MX_TIM16_Init:
 1922              	.LFB58:
 644:Src/main.c    **** 
 1923              		.loc 1 644 0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927 0000 10B5     		push	{r4, lr}
 1928              	.LCFI33:
 1929              		.cfi_def_cfa_offset 8
 1930              		.cfi_offset 4, -8
 1931              		.cfi_offset 14, -4
 646:Src/main.c    ****   htim16.Init.Prescaler = 0;
ARM GAS  /tmp/cc3mDgG2.s 			page 52


 1932              		.loc 1 646 0
 1933 0002 0A48     		ldr	r0, .L125
 1934 0004 0A4B     		ldr	r3, .L125+4
 1935 0006 0360     		str	r3, [r0]
 647:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 1936              		.loc 1 647 0
 1937 0008 0023     		movs	r3, #0
 1938 000a 4360     		str	r3, [r0, #4]
 648:Src/main.c    ****   htim16.Init.Period = 1000;
 1939              		.loc 1 648 0
 1940 000c 8360     		str	r3, [r0, #8]
 649:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1941              		.loc 1 649 0
 1942 000e FA22     		movs	r2, #250
 1943 0010 9200     		lsls	r2, r2, #2
 1944 0012 C260     		str	r2, [r0, #12]
 650:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 1945              		.loc 1 650 0
 1946 0014 0361     		str	r3, [r0, #16]
 651:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1947              		.loc 1 651 0
 1948 0016 4361     		str	r3, [r0, #20]
 652:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 1949              		.loc 1 652 0
 1950 0018 8361     		str	r3, [r0, #24]
 653:Src/main.c    ****   {
 1951              		.loc 1 653 0
 1952 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1953              	.LVL170:
 1954 001e 0028     		cmp	r0, #0
 1955 0020 00D1     		bne	.L124
 658:Src/main.c    **** 
 1956              		.loc 1 658 0
 1957              		@ sp needed
 1958 0022 10BD     		pop	{r4, pc}
 1959              	.L124:
 655:Src/main.c    ****   }
 1960              		.loc 1 655 0
 1961 0024 0349     		ldr	r1, .L125+8
 1962 0026 0448     		ldr	r0, .L125+12
 1963 0028 FFF7FEFF 		bl	_Error_Handler
 1964              	.LVL171:
 1965              	.L126:
 1966              		.align	2
 1967              	.L125:
 1968 002c 00000000 		.word	htim16
 1969 0030 00440140 		.word	1073824768
 1970 0034 8F020000 		.word	655
 1971 0038 00000000 		.word	.LC24
 1972              		.cfi_endproc
 1973              	.LFE58:
 1975              		.section	.text.MX_TIM17_Init,"ax",%progbits
 1976              		.align	1
 1977              		.syntax unified
 1978              		.code	16
 1979              		.thumb_func
 1980              		.fpu softvfp
ARM GAS  /tmp/cc3mDgG2.s 			page 53


 1982              	MX_TIM17_Init:
 1983              	.LFB59:
 662:Src/main.c    **** 
 1984              		.loc 1 662 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 0, uses_anonymous_args = 0
 1988 0000 10B5     		push	{r4, lr}
 1989              	.LCFI34:
 1990              		.cfi_def_cfa_offset 8
 1991              		.cfi_offset 4, -8
 1992              		.cfi_offset 14, -4
 664:Src/main.c    ****   htim17.Init.Prescaler = 8;
 1993              		.loc 1 664 0
 1994 0002 0A48     		ldr	r0, .L130
 1995 0004 0A4B     		ldr	r3, .L130+4
 1996 0006 0360     		str	r3, [r0]
 665:Src/main.c    ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 1997              		.loc 1 665 0
 1998 0008 0823     		movs	r3, #8
 1999 000a 4360     		str	r3, [r0, #4]
 666:Src/main.c    ****   htim17.Init.Period = 65000;
 2000              		.loc 1 666 0
 2001 000c 0023     		movs	r3, #0
 2002 000e 8360     		str	r3, [r0, #8]
 667:Src/main.c    ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2003              		.loc 1 667 0
 2004 0010 084A     		ldr	r2, .L130+8
 2005 0012 C260     		str	r2, [r0, #12]
 668:Src/main.c    ****   htim17.Init.RepetitionCounter = 0;
 2006              		.loc 1 668 0
 2007 0014 0361     		str	r3, [r0, #16]
 669:Src/main.c    ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2008              		.loc 1 669 0
 2009 0016 4361     		str	r3, [r0, #20]
 670:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 2010              		.loc 1 670 0
 2011 0018 8361     		str	r3, [r0, #24]
 671:Src/main.c    ****   {
 2012              		.loc 1 671 0
 2013 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2014              	.LVL172:
 2015 001e 0028     		cmp	r0, #0
 2016 0020 00D1     		bne	.L129
 676:Src/main.c    **** 
 2017              		.loc 1 676 0
 2018              		@ sp needed
 2019 0022 10BD     		pop	{r4, pc}
 2020              	.L129:
 673:Src/main.c    ****   }
 2021              		.loc 1 673 0
 2022 0024 0449     		ldr	r1, .L130+12
 2023 0026 0548     		ldr	r0, .L130+16
 2024 0028 FFF7FEFF 		bl	_Error_Handler
 2025              	.LVL173:
 2026              	.L131:
 2027              		.align	2
ARM GAS  /tmp/cc3mDgG2.s 			page 54


 2028              	.L130:
 2029 002c 00000000 		.word	htim17
 2030 0030 00480140 		.word	1073825792
 2031 0034 E8FD0000 		.word	65000
 2032 0038 A1020000 		.word	673
 2033 003c 00000000 		.word	.LC24
 2034              		.cfi_endproc
 2035              	.LFE59:
 2037              		.section	.text.SystemClock_Config,"ax",%progbits
 2038              		.align	1
 2039              		.global	SystemClock_Config
 2040              		.syntax unified
 2041              		.code	16
 2042              		.thumb_func
 2043              		.fpu softvfp
 2045              	SystemClock_Config:
 2046              	.LFB55:
 495:Src/main.c    **** 
 2047              		.loc 1 495 0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 88
 2050              		@ frame_needed = 0, uses_anonymous_args = 0
 2051 0000 00B5     		push	{lr}
 2052              	.LCFI35:
 2053              		.cfi_def_cfa_offset 4
 2054              		.cfi_offset 14, -4
 2055 0002 97B0     		sub	sp, sp, #92
 2056              	.LCFI36:
 2057              		.cfi_def_cfa_offset 96
 503:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2058              		.loc 1 503 0
 2059 0004 1223     		movs	r3, #18
 2060 0006 0A93     		str	r3, [sp, #40]
 504:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 2061              		.loc 1 504 0
 2062 0008 113B     		subs	r3, r3, #17
 2063 000a 0D93     		str	r3, [sp, #52]
 505:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 2064              		.loc 1 505 0
 2065 000c 0F93     		str	r3, [sp, #60]
 506:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 2066              		.loc 1 506 0
 2067 000e 0F33     		adds	r3, r3, #15
 2068 0010 0E93     		str	r3, [sp, #56]
 507:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2069              		.loc 1 507 0
 2070 0012 1093     		str	r3, [sp, #64]
 508:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2071              		.loc 1 508 0
 2072 0014 0E3B     		subs	r3, r3, #14
 2073 0016 1293     		str	r3, [sp, #72]
 509:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 2074              		.loc 1 509 0
 2075 0018 0023     		movs	r3, #0
 2076 001a 1393     		str	r3, [sp, #76]
 510:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 2077              		.loc 1 510 0
ARM GAS  /tmp/cc3mDgG2.s 			page 55


 2078 001c A022     		movs	r2, #160
 2079 001e 9203     		lsls	r2, r2, #14
 2080 0020 1492     		str	r2, [sp, #80]
 511:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2081              		.loc 1 511 0
 2082 0022 1593     		str	r3, [sp, #84]
 512:Src/main.c    ****   {
 2083              		.loc 1 512 0
 2084 0024 0AA8     		add	r0, sp, #40
 2085 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2086              	.LVL174:
 2087 002a 0028     		cmp	r0, #0
 2088 002c 28D1     		bne	.L136
 519:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 2089              		.loc 1 519 0
 2090 002e 0723     		movs	r3, #7
 2091 0030 0693     		str	r3, [sp, #24]
 521:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2092              		.loc 1 521 0
 2093 0032 053B     		subs	r3, r3, #5
 2094 0034 0793     		str	r3, [sp, #28]
 522:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2095              		.loc 1 522 0
 2096 0036 0023     		movs	r3, #0
 2097 0038 0893     		str	r3, [sp, #32]
 523:Src/main.c    **** 
 2098              		.loc 1 523 0
 2099 003a 0993     		str	r3, [sp, #36]
 525:Src/main.c    ****   {
 2100              		.loc 1 525 0
 2101 003c 0121     		movs	r1, #1
 2102 003e 06A8     		add	r0, sp, #24
 2103 0040 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2104              	.LVL175:
 2105 0044 0028     		cmp	r0, #0
 2106 0046 1FD1     		bne	.L137
 530:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 2107              		.loc 1 530 0
 2108 0048 0123     		movs	r3, #1
 2109 004a 0193     		str	r3, [sp, #4]
 531:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 2110              		.loc 1 531 0
 2111 004c 0023     		movs	r3, #0
 2112 004e 0393     		str	r3, [sp, #12]
 532:Src/main.c    ****   {
 2113              		.loc 1 532 0
 2114 0050 01A8     		add	r0, sp, #4
 2115 0052 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2116              	.LVL176:
 2117 0056 0028     		cmp	r0, #0
 2118 0058 1AD1     		bne	.L138
 539:Src/main.c    **** 
 2119              		.loc 1 539 0
 2120 005a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2121              	.LVL177:
 2122 005e FA21     		movs	r1, #250
 2123 0060 8900     		lsls	r1, r1, #2
ARM GAS  /tmp/cc3mDgG2.s 			page 56


 2124 0062 FFF7FEFF 		bl	__aeabi_uidiv
 2125              	.LVL178:
 2126 0066 FFF7FEFF 		bl	HAL_SYSTICK_Config
 2127              	.LVL179:
 543:Src/main.c    **** 
 2128              		.loc 1 543 0
 2129 006a 0420     		movs	r0, #4
 2130 006c FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 2131              	.LVL180:
 546:Src/main.c    **** }
 2132              		.loc 1 546 0
 2133 0070 0022     		movs	r2, #0
 2134 0072 0021     		movs	r1, #0
 2135 0074 0120     		movs	r0, #1
 2136 0076 4042     		rsbs	r0, r0, #0
 2137 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 2138              	.LVL181:
 547:Src/main.c    **** 
 2139              		.loc 1 547 0
 2140 007c 17B0     		add	sp, sp, #92
 2141              		@ sp needed
 2142 007e 00BD     		pop	{pc}
 2143              	.L136:
 514:Src/main.c    ****   }
 2144              		.loc 1 514 0
 2145 0080 0549     		ldr	r1, .L139
 2146 0082 0648     		ldr	r0, .L139+4
 2147 0084 FFF7FEFF 		bl	_Error_Handler
 2148              	.LVL182:
 2149              	.L137:
 527:Src/main.c    ****   }
 2150              		.loc 1 527 0
 2151 0088 0549     		ldr	r1, .L139+8
 2152 008a 0448     		ldr	r0, .L139+4
 2153 008c FFF7FEFF 		bl	_Error_Handler
 2154              	.LVL183:
 2155              	.L138:
 534:Src/main.c    ****   }
 2156              		.loc 1 534 0
 2157 0090 0449     		ldr	r1, .L139+12
 2158 0092 0248     		ldr	r0, .L139+4
 2159 0094 FFF7FEFF 		bl	_Error_Handler
 2160              	.LVL184:
 2161              	.L140:
 2162              		.align	2
 2163              	.L139:
 2164 0098 02020000 		.word	514
 2165 009c 00000000 		.word	.LC24
 2166 00a0 0F020000 		.word	527
 2167 00a4 16020000 		.word	534
 2168              		.cfi_endproc
 2169              	.LFE55:
 2171              		.section	.text.main,"ax",%progbits
 2172              		.align	1
 2173              		.global	main
 2174              		.syntax unified
 2175              		.code	16
ARM GAS  /tmp/cc3mDgG2.s 			page 57


 2176              		.thumb_func
 2177              		.fpu softvfp
 2179              	main:
 2180              	.LFB54:
 353:Src/main.c    ****   /* USER CODE BEGIN 1 */
 2181              		.loc 1 353 0
 2182              		.cfi_startproc
 2183              		@ args = 0, pretend = 0, frame = 0
 2184              		@ frame_needed = 0, uses_anonymous_args = 0
 2185 0000 70B5     		push	{r4, r5, r6, lr}
 2186              	.LCFI37:
 2187              		.cfi_def_cfa_offset 16
 2188              		.cfi_offset 4, -16
 2189              		.cfi_offset 5, -12
 2190              		.cfi_offset 6, -8
 2191              		.cfi_offset 14, -4
 361:Src/main.c    **** 
 2192              		.loc 1 361 0
 2193 0002 FFF7FEFF 		bl	HAL_Init
 2194              	.LVL185:
 368:Src/main.c    **** 
 2195              		.loc 1 368 0
 2196 0006 FFF7FEFF 		bl	SystemClock_Config
 2197              	.LVL186:
 375:Src/main.c    ****   MX_DMA_Init();
 2198              		.loc 1 375 0
 2199 000a FFF7FEFF 		bl	MX_GPIO_Init
 2200              	.LVL187:
 376:Src/main.c    ****   MX_USART1_UART_Init();
 2201              		.loc 1 376 0
 2202 000e FFF7FEFF 		bl	MX_DMA_Init
 2203              	.LVL188:
 377:Src/main.c    ****   MX_TIM1_Init();
 2204              		.loc 1 377 0
 2205 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 2206              	.LVL189:
 378:Src/main.c    ****   MX_ADC_Init();
 2207              		.loc 1 378 0
 2208 0016 FFF7FEFF 		bl	MX_TIM1_Init
 2209              	.LVL190:
 379:Src/main.c    ****   MX_TIM16_Init();
 2210              		.loc 1 379 0
 2211 001a FFF7FEFF 		bl	MX_ADC_Init
 2212              	.LVL191:
 380:Src/main.c    ****   MX_TIM17_Init();
 2213              		.loc 1 380 0
 2214 001e FFF7FEFF 		bl	MX_TIM16_Init
 2215              	.LVL192:
 381:Src/main.c    ****   /* USER CODE BEGIN 2 */
 2216              		.loc 1 381 0
 2217 0022 FFF7FEFF 		bl	MX_TIM17_Init
 2218              	.LVL193:
 388:Src/main.c    **** 
 2219              		.loc 1 388 0
 2220 0026 3248     		ldr	r0, .L153
 2221 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2222              	.LVL194:
ARM GAS  /tmp/cc3mDgG2.s 			page 58


 395:Src/main.c    ****   switch_adc_channel(ADC_CHANNEL_1);
 2223              		.loc 1 395 0
 2224 002c 3148     		ldr	r0, .L153+4
 2225 002e FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 2226              	.LVL195:
 396:Src/main.c    ****   while (1){
 2227              		.loc 1 396 0
 2228 0032 0120     		movs	r0, #1
 2229 0034 FFF7FEFF 		bl	switch_adc_channel
 2230              	.LVL196:
 2231 0038 57E0     		b	.L151
 2232              	.LVL197:
 2233              	.L144:
 2234              	.LBB14:
 2235              	.LBB15:
 2236              	.LBB16:
 426:Src/main.c    ****             digital_pulses[digital_pulse_number][PULSE_END] = htim17.Instance->CNT;
 2237              		.loc 1 426 0
 2238 003a 002C     		cmp	r4, #0
 2239 003c 0BD0     		beq	.L143
 427:Src/main.c    ****             digital_pulse_number++;
 2240              		.loc 1 427 0
 2241 003e 2E49     		ldr	r1, .L153+8
 2242 0040 0B68     		ldr	r3, [r1]
 2243 0042 2B4A     		ldr	r2, .L153
 2244 0044 1268     		ldr	r2, [r2]
 2245 0046 506A     		ldr	r0, [r2, #36]
 2246 0048 9C00     		lsls	r4, r3, #2
 2247              	.LVL198:
 2248 004a 2C4A     		ldr	r2, .L153+12
 2249 004c 1219     		adds	r2, r2, r4
 2250 004e 5080     		strh	r0, [r2, #2]
 428:Src/main.c    ****           }
 2251              		.loc 1 428 0
 2252 0050 0133     		adds	r3, r3, #1
 2253 0052 0B60     		str	r3, [r1]
 430:Src/main.c    ****         }
 2254              		.loc 1 430 0
 2255 0054 0024     		movs	r4, #0
 2256              	.L143:
 2257              	.LVL199:
 418:Src/main.c    ****         if(HAL_GPIO_ReadPin(COMPARATOR_GPIO_Port,COMPARATOR_Pin)){
 2258              		.loc 1 418 0
 2259 0056 284B     		ldr	r3, .L153+8
 2260 0058 1B68     		ldr	r3, [r3]
 2261 005a 452B     		cmp	r3, #69
 2262 005c 18DC     		bgt	.L146
 418:Src/main.c    ****         if(HAL_GPIO_ReadPin(COMPARATOR_GPIO_Port,COMPARATOR_Pin)){
 2263              		.loc 1 418 0 is_stmt 0 discriminator 1
 2264 005e 244B     		ldr	r3, .L153
 2265 0060 1B68     		ldr	r3, [r3]
 2266 0062 5A6A     		ldr	r2, [r3, #36]
 2267 0064 264B     		ldr	r3, .L153+16
 2268 0066 9A42     		cmp	r2, r3
 2269 0068 12D8     		bhi	.L146
 419:Src/main.c    ****           if(!pulse_found){
 2270              		.loc 1 419 0 is_stmt 1
ARM GAS  /tmp/cc3mDgG2.s 			page 59


 2271 006a 0121     		movs	r1, #1
 2272 006c 9020     		movs	r0, #144
 2273 006e C005     		lsls	r0, r0, #23
 2274 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2275              	.LVL200:
 2276 0074 0028     		cmp	r0, #0
 2277 0076 E0D0     		beq	.L144
 420:Src/main.c    ****             digital_pulses[digital_pulse_number][PULSE_START] = htim17.Instance->CNT;
 2278              		.loc 1 420 0
 2279 0078 002C     		cmp	r4, #0
 2280 007a ECD1     		bne	.L143
 421:Src/main.c    ****           }
 2281              		.loc 1 421 0
 2282 007c 1E4B     		ldr	r3, .L153+8
 2283 007e 1B68     		ldr	r3, [r3]
 2284 0080 1B4A     		ldr	r2, .L153
 2285 0082 1268     		ldr	r2, [r2]
 2286 0084 516A     		ldr	r1, [r2, #36]
 2287 0086 9B00     		lsls	r3, r3, #2
 2288 0088 1C4A     		ldr	r2, .L153+12
 2289 008a 9952     		strh	r1, [r3, r2]
 423:Src/main.c    ****         }
 2290              		.loc 1 423 0
 2291 008c 0134     		adds	r4, r4, #1
 2292              	.LVL201:
 2293 008e E2E7     		b	.L143
 2294              	.LVL202:
 2295              	.L146:
 441:Src/main.c    ****       HAL_Delay(3);
 2296              		.loc 1 441 0
 2297 0090 0A20     		movs	r0, #10
 2298 0092 FFF7FEFF 		bl	boost_pwm
 2299              	.LVL203:
 442:Src/main.c    **** 
 2300              		.loc 1 442 0
 2301 0096 0320     		movs	r0, #3
 2302 0098 FFF7FEFF 		bl	HAL_Delay
 2303              	.LVL204:
 2304              	.LBB17:
 458:Src/main.c    ****         printf("%i,%i,%i\r\n",freq,i,digital_pulses[i][PULSE_START]);
 2305              		.loc 1 458 0
 2306 009c 0024     		movs	r4, #0
 2307              	.LVL205:
 2308 009e 08E0     		b	.L148
 2309              	.LVL206:
 2310              	.L149:
 459:Src/main.c    ****       }
 2311              		.loc 1 459 0 discriminator 3
 2312 00a0 A200     		lsls	r2, r4, #2
 2313 00a2 164B     		ldr	r3, .L153+12
 2314 00a4 D35A     		ldrh	r3, [r2, r3]
 2315 00a6 2200     		movs	r2, r4
 2316 00a8 2900     		movs	r1, r5
 2317 00aa 1648     		ldr	r0, .L153+20
 2318 00ac FFF7FEFF 		bl	printf
 2319              	.LVL207:
 458:Src/main.c    ****         printf("%i,%i,%i\r\n",freq,i,digital_pulses[i][PULSE_START]);
ARM GAS  /tmp/cc3mDgG2.s 			page 60


 2320              		.loc 1 458 0 discriminator 3
 2321 00b0 0134     		adds	r4, r4, #1
 2322              	.LVL208:
 2323              	.L148:
 458:Src/main.c    ****         printf("%i,%i,%i\r\n",freq,i,digital_pulses[i][PULSE_START]);
 2324              		.loc 1 458 0 is_stmt 0 discriminator 1
 2325 00b2 114B     		ldr	r3, .L153+8
 2326 00b4 1B68     		ldr	r3, [r3]
 2327 00b6 9C42     		cmp	r4, r3
 2328 00b8 F2DB     		blt	.L149
 2329              	.LBE17:
 2330              	.LBE16:
 405:Src/main.c    ****       set_tx_frequency(freq);
 2331              		.loc 1 405 0 is_stmt 1 discriminator 2
 2332 00ba 3235     		adds	r5, r5, #50
 2333              	.LVL209:
 2334              	.L142:
 405:Src/main.c    ****       set_tx_frequency(freq);
 2335              		.loc 1 405 0 is_stmt 0 discriminator 1
 2336 00bc 124B     		ldr	r3, .L153+24
 2337 00be 9D42     		cmp	r5, r3
 2338 00c0 10D8     		bhi	.L152
 2339              	.LBB18:
 406:Src/main.c    ****       boost_pwm(0);
 2340              		.loc 1 406 0 is_stmt 1
 2341 00c2 2800     		movs	r0, r5
 2342 00c4 FFF7FEFF 		bl	set_tx_frequency
 2343              	.LVL210:
 407:Src/main.c    ****       transmit_pulse_train(5);
 2344              		.loc 1 407 0
 2345 00c8 0020     		movs	r0, #0
 2346 00ca FFF7FEFF 		bl	boost_pwm
 2347              	.LVL211:
 408:Src/main.c    ****       // wait_cycles(500);
 2348              		.loc 1 408 0
 2349 00ce 0520     		movs	r0, #5
 2350 00d0 FFF7FEFF 		bl	transmit_pulse_train
 2351              	.LVL212:
 415:Src/main.c    ****       int pulse_found = 0;
 2352              		.loc 1 415 0
 2353 00d4 0023     		movs	r3, #0
 2354 00d6 084A     		ldr	r2, .L153+8
 2355 00d8 1360     		str	r3, [r2]
 2356              	.LVL213:
 417:Src/main.c    ****       while(digital_pulse_number < MAX_PULSE_COUNT && htim17.Instance->CNT < 60000){
 2357              		.loc 1 417 0
 2358 00da 054A     		ldr	r2, .L153
 2359 00dc 1268     		ldr	r2, [r2]
 2360 00de 5362     		str	r3, [r2, #36]
 416:Src/main.c    ****       htim17.Instance->CNT = 0;
 2361              		.loc 1 416 0
 2362 00e0 0024     		movs	r4, #0
 418:Src/main.c    ****         if(HAL_GPIO_ReadPin(COMPARATOR_GPIO_Port,COMPARATOR_Pin)){
 2363              		.loc 1 418 0
 2364 00e2 B8E7     		b	.L143
 2365              	.LVL214:
 2366              	.L152:
ARM GAS  /tmp/cc3mDgG2.s 			page 61


 2367              	.LBE18:
 2368              	.LBE15:
 479:Src/main.c    **** 
 2369              		.loc 1 479 0
 2370 00e4 0948     		ldr	r0, .L153+28
 2371 00e6 FFF7FEFF 		bl	puts
 2372              	.LVL215:
 2373              	.L151:
 2374              	.LBB19:
 405:Src/main.c    ****       set_tx_frequency(freq);
 2375              		.loc 1 405 0
 2376 00ea 094D     		ldr	r5, .L153+32
 2377 00ec E6E7     		b	.L142
 2378              	.L154:
 2379 00ee C046     		.align	2
 2380              	.L153:
 2381 00f0 00000000 		.word	htim17
 2382 00f4 00000000 		.word	hadc
 2383 00f8 00000000 		.word	.LANCHOR6
 2384 00fc 00000000 		.word	.LANCHOR7
 2385 0100 5FEA0000 		.word	59999
 2386 0104 00000000 		.word	.LC16
 2387 0108 3F9C0000 		.word	39999
 2388 010c 00000000 		.word	.LC48
 2389 0110 204E0000 		.word	20000
 2390              	.LBE19:
 2391              	.LBE14:
 2392              		.cfi_endproc
 2393              	.LFE54:
 2395              		.global	piezo_pulses
 2396              		.global	piezo_state
 2397              		.global	adc_done
 2398              		.global	digital_pulse_number
 2399              		.global	pulse_number
 2400              		.comm	huart1,112,4
 2401              		.comm	htim17,64,4
 2402              		.comm	htim16,64,4
 2403              		.comm	htim1,64,4
 2404              		.comm	hdma_adc,68,4
 2405              		.comm	hadc,76,4
 2406              		.section	.bss.adc_done,"aw",%nobits
 2407              		.align	2
 2408              		.set	.LANCHOR2,. + 0
 2411              	adc_done:
 2412 0000 00000000 		.space	4
 2413              		.section	.bss.adc_samples,"aw",%nobits
 2414              		.align	2
 2415              		.set	.LANCHOR3,. + 0
 2418              	adc_samples:
 2419 0000 00000000 		.space	2048
 2419      00000000 
 2419      00000000 
 2419      00000000 
 2419      00000000 
 2420              		.section	.bss.digital_pulse_number,"aw",%nobits
 2421              		.align	2
 2422              		.set	.LANCHOR6,. + 0
ARM GAS  /tmp/cc3mDgG2.s 			page 62


 2425              	digital_pulse_number:
 2426 0000 00000000 		.space	4
 2427              		.section	.bss.digital_pulses,"aw",%nobits
 2428              		.align	2
 2429              		.set	.LANCHOR7,. + 0
 2432              	digital_pulses:
 2433 0000 00000000 		.space	280
 2433      00000000 
 2433      00000000 
 2433      00000000 
 2433      00000000 
 2434              		.section	.bss.piezo_pulses,"aw",%nobits
 2435              		.align	2
 2436              		.set	.LANCHOR0,. + 0
 2439              	piezo_pulses:
 2440 0000 00000000 		.space	4
 2441              		.section	.bss.piezo_state,"aw",%nobits
 2442              		.align	2
 2443              		.set	.LANCHOR1,. + 0
 2446              	piezo_state:
 2447 0000 00000000 		.space	4
 2448              		.section	.bss.pulse_number,"aw",%nobits
 2449              		.align	2
 2450              		.set	.LANCHOR5,. + 0
 2453              	pulse_number:
 2454 0000 00000000 		.space	4
 2455              		.section	.bss.pulses,"aw",%nobits
 2456              		.align	2
 2457              		.set	.LANCHOR4,. + 0
 2460              	pulses:
 2461 0000 00000000 		.space	420
 2461      00000000 
 2461      00000000 
 2461      00000000 
 2461      00000000 
 2462              		.section	.rodata._Error_Handler.str1.4,"aMS",%progbits,1
 2463              		.align	2
 2464              	.LC21:
 2465 0000 46696C65 		.ascii	"File: %s Line: %i\000"
 2465      3A202573 
 2465      204C696E 
 2465      653A2025 
 2465      6900
 2466              		.section	.rodata.dump_pulses.str1.4,"aMS",%progbits,1
 2467              		.align	2
 2468              	.LC16:
 2469 0000 25692C25 		.ascii	"%i,%i,%i\015\012\000"
 2469      692C2569 
 2469      0D0A00
 2470              		.section	.rodata.dump_raw_samples.str1.4,"aMS",%progbits,1
 2471              		.align	2
 2472              	.LC6:
 2473 0000 25692C25 		.ascii	"%i,%i\015\012\000"
 2473      690D0A00 
 2474              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2475              		.align	2
 2476              	.LC48:
ARM GAS  /tmp/cc3mDgG2.s 			page 63


 2477 0000 646F6E65 		.ascii	"done\000"
 2477      00
 2478              		.section	.rodata.set_tx_frequency.str1.4,"aMS",%progbits,1
 2479              		.align	2
 2480              	.LC24:
 2481 0000 5372632F 		.ascii	"Src/main.c\000"
 2481      6D61696E 
 2481      2E6300
 2482              		.text
 2483              	.Letext0:
 2484              		.file 2 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machin
 2485              		.file 3 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_s
 2486              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2487              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 2488              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2489              		.file 7 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lo
 2490              		.file 8 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_t
 2491              		.file 9 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/
 2492              		.file 10 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/r
 2493              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2494              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2495              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2496              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2497              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2498              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2499              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2500              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2501              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 2502              		.file 20 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/stdio
 2503              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 2504              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2505              		.file 23 "<built-in>"
ARM GAS  /tmp/cc3mDgG2.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc3mDgG2.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc3mDgG2.s:129    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/cc3mDgG2.s:135    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:141    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc3mDgG2.s:183    .text.MX_DMA_Init:000000000000002c $d
     /tmp/cc3mDgG2.s:188    .text.__io_putchar:0000000000000000 $t
     /tmp/cc3mDgG2.s:195    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/cc3mDgG2.s:226    .text.__io_putchar:0000000000000018 $d
                            *COM*:0000000000000070 huart1
     /tmp/cc3mDgG2.s:232    .text.boost_pwm:0000000000000000 $t
     /tmp/cc3mDgG2.s:239    .text.boost_pwm:0000000000000000 boost_pwm
     /tmp/cc3mDgG2.s:284    .text.boost_pwm:0000000000000028 $d
                            *COM*:0000000000000040 htim1
     /tmp/cc3mDgG2.s:289    .text.wait_cycles:0000000000000000 $t
     /tmp/cc3mDgG2.s:296    .text.wait_cycles:0000000000000000 wait_cycles
     /tmp/cc3mDgG2.s:331    .text.break_before:0000000000000000 $t
     /tmp/cc3mDgG2.s:338    .text.break_before:0000000000000000 break_before
     /tmp/cc3mDgG2.s:380    .text.break_before:0000000000000030 $d
     /tmp/cc3mDgG2.s:385    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc3mDgG2.s:392    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc3mDgG2.s:522    .text.HAL_TIM_PeriodElapsedCallback:00000000000000b0 $d
     /tmp/cc3mDgG2.s:529    .text.reset_resistor:0000000000000000 $t
     /tmp/cc3mDgG2.s:536    .text.reset_resistor:0000000000000000 reset_resistor
     /tmp/cc3mDgG2.s:651    .text.set_resistor:0000000000000000 $t
     /tmp/cc3mDgG2.s:658    .text.set_resistor:0000000000000000 set_resistor
     /tmp/cc3mDgG2.s:783    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc3mDgG2.s:790    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc3mDgG2.s:808    .text.HAL_ADC_ConvCpltCallback:0000000000000008 $d
     /tmp/cc3mDgG2.s:813    .text.dump_raw_samples:0000000000000000 $t
     /tmp/cc3mDgG2.s:820    .text.dump_raw_samples:0000000000000000 dump_raw_samples
     /tmp/cc3mDgG2.s:862    .text.dump_raw_samples:0000000000000020 $d
     /tmp/cc3mDgG2.s:869    .text.peak_detect:0000000000000000 $t
     /tmp/cc3mDgG2.s:876    .text.peak_detect:0000000000000000 peak_detect
     /tmp/cc3mDgG2.s:924    .text.peak_detect:0000000000000020 $d
     /tmp/cc3mDgG2.s:929    .text.peak_sample:0000000000000000 $t
     /tmp/cc3mDgG2.s:936    .text.peak_sample:0000000000000000 peak_sample
     /tmp/cc3mDgG2.s:994    .text.peak_sample:0000000000000028 $d
     /tmp/cc3mDgG2.s:1000   .text.set_pulse_amplitudes:0000000000000000 $t
     /tmp/cc3mDgG2.s:1007   .text.set_pulse_amplitudes:0000000000000000 set_pulse_amplitudes
     /tmp/cc3mDgG2.s:1057   .text.set_pulse_amplitudes:000000000000002c $d
     /tmp/cc3mDgG2.s:1063   .text.split_into_pulses:0000000000000000 $t
     /tmp/cc3mDgG2.s:1070   .text.split_into_pulses:0000000000000000 split_into_pulses
     /tmp/cc3mDgG2.s:1163   .text.split_into_pulses:000000000000005c $d
     /tmp/cc3mDgG2.s:1171   .text.dump_pulses:0000000000000000 $t
     /tmp/cc3mDgG2.s:1178   .text.dump_pulses:0000000000000000 dump_pulses
     /tmp/cc3mDgG2.s:1226   .text.dump_pulses:000000000000002c $d
     /tmp/cc3mDgG2.s:1233   .text.transmit_pulse_train:0000000000000000 $t
     /tmp/cc3mDgG2.s:1240   .text.transmit_pulse_train:0000000000000000 transmit_pulse_train
     /tmp/cc3mDgG2.s:1281   .text.transmit_pulse_train:0000000000000024 $d
                            *COM*:0000000000000040 htim16
     /tmp/cc3mDgG2.s:1287   .text._Error_Handler:0000000000000000 $t
     /tmp/cc3mDgG2.s:1294   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc3mDgG2.s:1323   .text._Error_Handler:0000000000000014 $d
     /tmp/cc3mDgG2.s:1329   .text.set_tx_frequency:0000000000000000 $t
ARM GAS  /tmp/cc3mDgG2.s 			page 65


     /tmp/cc3mDgG2.s:1336   .text.set_tx_frequency:0000000000000000 set_tx_frequency
     /tmp/cc3mDgG2.s:1390   .text.set_tx_frequency:0000000000000034 $d
     /tmp/cc3mDgG2.s:1398   .text.MX_ADC_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:1404   .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/cc3mDgG2.s:1494   .text.MX_ADC_Init:0000000000000068 $d
                            *COM*:000000000000004c hadc
     /tmp/cc3mDgG2.s:1503   .text.switch_adc_channel:0000000000000000 $t
     /tmp/cc3mDgG2.s:1510   .text.switch_adc_channel:0000000000000000 switch_adc_channel
     /tmp/cc3mDgG2.s:1568   .text.switch_adc_channel:0000000000000038 $d
     /tmp/cc3mDgG2.s:1574   .text.read_adc_channel:0000000000000000 $t
     /tmp/cc3mDgG2.s:1581   .text.read_adc_channel:0000000000000000 read_adc_channel
     /tmp/cc3mDgG2.s:1631   .text.read_adc_channel:0000000000000030 $d
     /tmp/cc3mDgG2.s:1642   .text.get_boost_voltage:0000000000000000 $t
     /tmp/cc3mDgG2.s:1649   .text.get_boost_voltage:0000000000000000 get_boost_voltage
     /tmp/cc3mDgG2.s:1690   .text.get_boost_voltage:0000000000000030 $d
     /tmp/cc3mDgG2.s:1700   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:1706   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc3mDgG2.s:1760   .text.MX_USART1_UART_Init:0000000000000034 $d
     /tmp/cc3mDgG2.s:1768   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:1774   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc3mDgG2.s:1905   .text.MX_TIM1_Init:00000000000000a0 $d
     /tmp/cc3mDgG2.s:1915   .text.MX_TIM16_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:1921   .text.MX_TIM16_Init:0000000000000000 MX_TIM16_Init
     /tmp/cc3mDgG2.s:1968   .text.MX_TIM16_Init:000000000000002c $d
     /tmp/cc3mDgG2.s:1976   .text.MX_TIM17_Init:0000000000000000 $t
     /tmp/cc3mDgG2.s:1982   .text.MX_TIM17_Init:0000000000000000 MX_TIM17_Init
     /tmp/cc3mDgG2.s:2029   .text.MX_TIM17_Init:000000000000002c $d
                            *COM*:0000000000000040 htim17
     /tmp/cc3mDgG2.s:2038   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc3mDgG2.s:2045   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc3mDgG2.s:2164   .text.SystemClock_Config:0000000000000098 $d
     /tmp/cc3mDgG2.s:2172   .text.main:0000000000000000 $t
     /tmp/cc3mDgG2.s:2179   .text.main:0000000000000000 main
     /tmp/cc3mDgG2.s:2381   .text.main:00000000000000f0 $d
     /tmp/cc3mDgG2.s:2439   .bss.piezo_pulses:0000000000000000 piezo_pulses
     /tmp/cc3mDgG2.s:2446   .bss.piezo_state:0000000000000000 piezo_state
     /tmp/cc3mDgG2.s:2411   .bss.adc_done:0000000000000000 adc_done
     /tmp/cc3mDgG2.s:2425   .bss.digital_pulse_number:0000000000000000 digital_pulse_number
     /tmp/cc3mDgG2.s:2453   .bss.pulse_number:0000000000000000 pulse_number
                            *COM*:0000000000000044 hdma_adc
     /tmp/cc3mDgG2.s:2407   .bss.adc_done:0000000000000000 $d
     /tmp/cc3mDgG2.s:2414   .bss.adc_samples:0000000000000000 $d
     /tmp/cc3mDgG2.s:2418   .bss.adc_samples:0000000000000000 adc_samples
     /tmp/cc3mDgG2.s:2421   .bss.digital_pulse_number:0000000000000000 $d
     /tmp/cc3mDgG2.s:2428   .bss.digital_pulses:0000000000000000 $d
     /tmp/cc3mDgG2.s:2432   .bss.digital_pulses:0000000000000000 digital_pulses
     /tmp/cc3mDgG2.s:2435   .bss.piezo_pulses:0000000000000000 $d
     /tmp/cc3mDgG2.s:2442   .bss.piezo_state:0000000000000000 $d
     /tmp/cc3mDgG2.s:2449   .bss.pulse_number:0000000000000000 $d
     /tmp/cc3mDgG2.s:2456   .bss.pulses:0000000000000000 $d
     /tmp/cc3mDgG2.s:2460   .bss.pulses:0000000000000000 pulses
     /tmp/cc3mDgG2.s:2463   .rodata._Error_Handler.str1.4:0000000000000000 $d
     /tmp/cc3mDgG2.s:2467   .rodata.dump_pulses.str1.4:0000000000000000 $d
     /tmp/cc3mDgG2.s:2471   .rodata.dump_raw_samples.str1.4:0000000000000000 $d
     /tmp/cc3mDgG2.s:2475   .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc3mDgG2.s:2479   .rodata.set_tx_frequency.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/cc3mDgG2.s 			page 66



UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
HAL_TIM_PWM_ConfigChannel
HAL_TIM_PWM_Start
printf
HAL_TIM_Base_Start_IT
HAL_TIM_Base_Stop_IT
__aeabi_uidiv
HAL_TIM_Base_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_DeInit
HAL_ADC_Stop_DMA
HAL_ADC_Start_DMA
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
HAL_HalfDuplex_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
HAL_TIM_Base_Start
HAL_GPIO_ReadPin
HAL_Delay
puts
