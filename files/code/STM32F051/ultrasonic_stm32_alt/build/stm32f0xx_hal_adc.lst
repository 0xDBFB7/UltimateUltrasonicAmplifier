ARM GAS  /tmp/ccw6ed28.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f0xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ADC_ConversionStop,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	ADC_ConversionStop:
  23              	.LFB59:
  24              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @file    stm32f0xx_hal_adc.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          "stm32f0xx_hal_adc_ex.c".
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   [..]
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
ARM GAS  /tmp/ccw6ed28.s 			page 2


  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC calibration
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       slower speed.
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### How to use this driver #####
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Enable the ADC interface
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            Caution: On STM32F0, ADC clock frequency max is 14MHz (refer
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     to device datasheet).
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     this maximum frequency.
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    14MHz.
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSI14State" must be set either:
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ADC_CONTROL" to let the ADC control 
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      the HSI14 oscillator enable/disable (if not used to supply the main 
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      system clock): feature used if ADC mode LowPowerAutoPowerOff is 
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      enabled.
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ON" to maintain the HSI14 oscillator
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                         (mandatory)
  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                HI14 enable or let under control of ADC:           (optional: if asynchronous clock 
ARM GAS  /tmp/ccw6ed28.s 			page 3


  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_ADC_CONTROL;
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ADCx_IRQHandler().
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ================================================================
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_Init().
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         monitored, thresholds, ...)
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ====================================
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         conversion accuracy
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
ARM GAS  /tmp/ccw6ed28.s 			page 4


 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         transfer by DMA.
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by polling:
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (this function must be implemented in user program)
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 destination variable address.
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Disable the ADC interface
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock disable
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
ARM GAS  /tmp/ccw6ed28.s 			page 5


 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Deinitialize the DMA
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     @endverbatim
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @attention
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *      without specific prior written permission.
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************  
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #include "stm32f0xx_hal.h"
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @addtogroup STM32F0xx_HAL_Driver
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC ADC
ARM GAS  /tmp/ccw6ed28.s 			page 6


 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief ADC HAL module driver
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* settling time.                                                           */
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clock frequency,       */
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: ms                                                                 */
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT             ( 2U)
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT            ( 2U)
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STOP_CONVERSION_TIMEOUT    ( 2U)
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ( 1U)
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
ARM GAS  /tmp/ccw6ed28.s 			page 7


 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim    
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) De-initialize the ADC
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         depending on both possible clock sources: APB clock of HSI clock.
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     return HAL_ERROR;
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
ARM GAS  /tmp/ccw6ed28.s 			page 8


 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Initialize ADC error code */
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the low level hardware */
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */ 
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on the fly).                                                             */
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock mode                                                      */
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock prescaler                                                 */
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC resolution                                                      */
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_IS_ENABLE(hadc) == RESET)
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameters):                                                         */
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
ARM GAS  /tmp/ccw6ed28.s 			page 9


 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC resolution                                      */
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.Resolution );
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC clock mode: clock source AHB or HSI with        */
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* selectable prescaler                                                 */
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2    ,
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.ClockPrescaler );
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - overrun                                                             */
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - data alignment                                                      */
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - resolution                                                          */
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - scan direction                                                      */
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTDLY  |
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_CONT    |
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_OVRMOD  |
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTSEL  |
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTEN   |
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_ALIGN   |
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_SCANDIR |
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_DMACFG   );
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Enable the selected ADC group regular discontinuous mode */
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         tmpCFGR1 |= ADC_CFGR1_DISCEN;
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                  */
ARM GAS  /tmp/ccw6ed28.s 			page 10


 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* start.                                                                 */
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       software start.                                                  */
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC configuration register with previous settings */
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= tmpCFGR1;
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Channel sampling time configuration */
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (obsolete): sampling time set in this function if parameter            */
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Otherwise, sampling time is set into ADC channel initialization        */
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* structure with parameter "SamplingTime" (obsolete).                    */
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear the old sample time */
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the new sample time */
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check through register CFGR1 (excluding analog watchdog configuration: */
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* set into separate dedicated function, and bits of ADC resolution set   */
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* out of temporary variable 'tmpCFGR1').                                 */
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to none */
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the ADC state */
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccw6ed28.s 			page 11


 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         common group is still running.
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      return HAL_ERROR;
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
ARM GAS  /tmp/ccw6ed28.s 			page 12


 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Change ADC state */
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register IER */
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOSMP | ADC_IT_RDY   ) );
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register ISR */
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOSMP | ADC_FLAG_RDY   ) );
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CR */
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* "read-set": no direct reset applicable.                                */
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR1 */
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN              
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR2 */
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       already done above.                                              */
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register SMPR */
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register TR1 */
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CHSELR */
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL11 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL9  | ADC_
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL7  | ADC_CHSELR_CHSEL6  | ADC_CHSELR_CHSEL5  | ADC_
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL3  | ADC_CHSELR_CHSEL2  | ADC_CHSELR_CHSEL1  | ADC_
ARM GAS  /tmp/ccw6ed28.s 			page 13


 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register DR */
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CCR */
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC->CCR &= ~(ADC_CCR_ALL);
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*                                                                        */
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* DeInit the low level hardware */
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC error code to none */
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccw6ed28.s 			page 14


 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    IO operation functions 
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       ##### IO operation functions #####
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group.
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group.
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion event.
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Handle ADC interrupt request
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccw6ed28.s 			page 15


 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** { 
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  /tmp/ccw6ed28.s 			page 16


 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC;
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence */
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
ARM GAS  /tmp/ccw6ed28.s 			page 17


 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of each conversion */
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* each conversion:                                                       */
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update ADC state machine */
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
ARM GAS  /tmp/ccw6ed28.s 			page 18


 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC state */
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Change ADC state to error state */
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Poll for conversion event.
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  EventType the ADC event type.
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          This parameter can be one of the following values:
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
ARM GAS  /tmp/ccw6ed28.s 			page 19


1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();   
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check selected event flag */
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Process unlocked */
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_TIMEOUT;
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   switch(EventType)
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Overrun event */
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* considered as an error.                                                */
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
ARM GAS  /tmp/ccw6ed28.s 			page 20


1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - EOC (end of conversion of regular group) or EOS (end of 
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence of regular group) depending on ADC initialization 
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            parameter "EOCSelection"
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun (if available)
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
ARM GAS  /tmp/ccw6ed28.s 			page 21


1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         default:
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable interruption of 
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
ARM GAS  /tmp/ccw6ed28.s 			page 22


1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         through DMA.
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA transfer complete
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA half transfer
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
ARM GAS  /tmp/ccw6ed28.s 			page 23


1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA error callback */
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Start the DMA channel */
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccw6ed28.s 			page 24


1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC DMA transfer, disable 
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC peripheral.
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {  
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_OK)
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_Disable(hadc);
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/ccw6ed28.s 			page 25


1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            to flag EOC.
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         To clear this flag, either use function: 
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC converted value */ 
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->Instance->DR;
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Handles ADC interrupt request.  
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
ARM GAS  /tmp/ccw6ed28.s 			page 26


1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
ARM GAS  /tmp/ccw6ed28.s 			page 27


1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Level out of window callback */ 
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* error.                                                                 */
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Error callback */ 
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the Overrun flag */
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
ARM GAS  /tmp/ccw6ed28.s 			page 28


1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
ARM GAS  /tmp/ccw6ed28.s 			page 29


1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure channels on regular group
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure the analog watchdog
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         group.
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         VrefInt/Vbat/TempSensor.
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         setting).
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         TS_vbat, TS_temp (values rough order: 5us to 17us).
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel for regular group.
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
ARM GAS  /tmp/ccw6ed28.s 			page 30


1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel number                                                        */
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel sampling time                                                 */
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC conversion sequencer.                                              */
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (sConfig->Rank != ADC_RANK_NONE)
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the channel selection register from the selected channel */
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (obsolete): sampling time set in this function with                  */
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameter "SamplingTime" (obsolete) only if not already set into     */
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADC initialization structure with parameter "SamplingTimeCommon".    */
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Modify sampling time if needed (not needed in case of reoccurrence */
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* for several channels programmed consecutively into the sequencer)  */
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Channel sampling time configuration */
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Clear the old sample time */
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set the new sample time */
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path. */
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, enable VREFINT measurement path. */
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, enable VBAT measurement path. */
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Temp. sensor is selected, wait for stabilization delay */
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             wait_loop_index--;
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
ARM GAS  /tmp/ccw6ed28.s 			page 31


1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset the channel selection register from the selected channel */
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths disable: If internal channel selected,    */
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* disable dedicated internal buffers and path.                         */
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, disable Temp. sensor measurement path. */
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, disable VREFINT measurement path. */
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, disable VBAT measurement path. */
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* parameters.                                                              */
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, following  
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without reseting 
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
ARM GAS  /tmp/ccw6ed28.s 			page 32


1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                      */
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the analog watchdog enable mode: one or overall group of        */
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    channels.                                                           */
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog            */
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDCH   );
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds*/
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set the high and low thresholds */
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* or HAL_ADC_PollForEvent().                                             */
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccw6ed28.s 			page 33


1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral State functions
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     peripheral.
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC state
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC error code
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC state
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
ARM GAS  /tmp/ccw6ed28.s 			page 34


1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         compared with states bits.
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For example:                                                         
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL state
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->State;
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC error code
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC Error Code
1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */  
1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed automatically by hardware.
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
ARM GAS  /tmp/ccw6ed28.s 			page 35


1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       wait_loop_index--;
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }   
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped.
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
ARM GAS  /tmp/ccw6ed28.s 			page 36


1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       disabled.                                                          */
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC peripheral */
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
2023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped to disable the ADC.
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
ARM GAS  /tmp/ccw6ed28.s 			page 37


2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
2031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
  25              		.loc 1 2033 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 4, -16
  34              		.cfi_offset 5, -12
  35              		.cfi_offset 6, -8
  36              		.cfi_offset 14, -4
  37 0002 0400     		movs	r4, r0
  38              	.LVL1:
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
2035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* this function if not needed.                                             */
2041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
  39              		.loc 1 2041 0
  40 0004 0368     		ldr	r3, [r0]
  41 0006 9A68     		ldr	r2, [r3, #8]
  42 0008 5207     		lsls	r2, r2, #29
  43 000a 21D5     		bpl	.L6
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
  44              		.loc 1 2046 0
  45 000c 9A68     		ldr	r2, [r3, #8]
  46 000e 5207     		lsls	r2, r2, #29
  47 0010 06D5     		bpl	.L3
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
  48              		.loc 1 2047 0 discriminator 1
  49 0012 9A68     		ldr	r2, [r3, #8]
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
  50              		.loc 1 2046 0 discriminator 1
  51 0014 9207     		lsls	r2, r2, #30
  52 0016 03D4     		bmi	.L3
2048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Stop conversions on regular group */
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
  53              		.loc 1 2050 0
  54 0018 9A68     		ldr	r2, [r3, #8]
  55 001a 1021     		movs	r1, #16
  56 001c 0A43     		orrs	r2, r1
  57 001e 9A60     		str	r2, [r3, #8]
  58              	.L3:
2051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
ARM GAS  /tmp/ccw6ed28.s 			page 38


2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
  59              		.loc 1 2055 0
  60 0020 FFF7FEFF 		bl	HAL_GetTick
  61              	.LVL2:
  62 0024 0500     		movs	r5, r0
  63              	.LVL3:
  64              	.L4:
2056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
  65              		.loc 1 2057 0
  66 0026 2368     		ldr	r3, [r4]
  67 0028 9B68     		ldr	r3, [r3, #8]
  68 002a 5B07     		lsls	r3, r3, #29
  69 002c 0ED5     		bpl	.L7
2058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
  70              		.loc 1 2059 0
  71 002e FFF7FEFF 		bl	HAL_GetTick
  72              	.LVL4:
  73 0032 401B     		subs	r0, r0, r5
  74 0034 0228     		cmp	r0, #2
  75 0036 F6D9     		bls	.L4
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
  76              		.loc 1 2062 0
  77 0038 636C     		ldr	r3, [r4, #68]
  78 003a 1022     		movs	r2, #16
  79 003c 1343     		orrs	r3, r2
  80 003e 6364     		str	r3, [r4, #68]
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
  81              		.loc 1 2065 0
  82 0040 A36C     		ldr	r3, [r4, #72]
  83 0042 0F3A     		subs	r2, r2, #15
  84 0044 1343     		orrs	r3, r2
  85 0046 A364     		str	r3, [r4, #72]
2066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         return HAL_ERROR;
  86              		.loc 1 2067 0
  87 0048 0120     		movs	r0, #1
  88 004a 02E0     		b	.L2
  89              	.L7:
2068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
2073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
  90              		.loc 1 2074 0
  91 004c 0020     		movs	r0, #0
  92 004e 00E0     		b	.L2
ARM GAS  /tmp/ccw6ed28.s 			page 39


  93              	.LVL5:
  94              	.L6:
  95 0050 0020     		movs	r0, #0
  96              	.LVL6:
  97              	.L2:
2075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
  98              		.loc 1 2075 0
  99              		@ sp needed
 100              	.LVL7:
 101 0052 70BD     		pop	{r4, r5, r6, pc}
 102              		.cfi_endproc
 103              	.LFE59:
 105              		.section	.text.ADC_Disable,"ax",%progbits
 106              		.align	1
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 110              		.fpu softvfp
 112              	ADC_Disable:
 113              	.LFB58:
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 114              		.loc 1 1976 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              	.LVL8:
 119 0000 70B5     		push	{r4, r5, r6, lr}
 120              	.LCFI1:
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 4, -16
 123              		.cfi_offset 5, -12
 124              		.cfi_offset 6, -8
 125              		.cfi_offset 14, -4
 126 0002 0400     		movs	r4, r0
 127              	.LVL9:
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 128              		.loc 1 1982 0
 129 0004 0268     		ldr	r2, [r0]
 130 0006 9168     		ldr	r1, [r2, #8]
 131 0008 0323     		movs	r3, #3
 132 000a 0B40     		ands	r3, r1
 133 000c 012B     		cmp	r3, #1
 134 000e 11D0     		beq	.L18
 135 0010 0023     		movs	r3, #0
 136              	.L9:
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 137              		.loc 1 1982 0 is_stmt 0 discriminator 8
 138 0012 002B     		cmp	r3, #0
 139 0014 39D0     		beq	.L17
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 140              		.loc 1 1985 0 is_stmt 1
 141 0016 9168     		ldr	r1, [r2, #8]
 142 0018 0523     		movs	r3, #5
 143 001a 0B40     		ands	r3, r1
 144 001c 012B     		cmp	r3, #1
 145 001e 15D0     		beq	.L19
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
ARM GAS  /tmp/ccw6ed28.s 			page 40


 146              		.loc 1 1993 0
 147 0020 636C     		ldr	r3, [r4, #68]
 148 0022 1022     		movs	r2, #16
 149 0024 1343     		orrs	r3, r2
 150 0026 6364     		str	r3, [r4, #68]
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 151              		.loc 1 1996 0
 152 0028 A36C     		ldr	r3, [r4, #72]
 153 002a 0F3A     		subs	r2, r2, #15
 154 002c 1343     		orrs	r3, r2
 155 002e A364     		str	r3, [r4, #72]
1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 156              		.loc 1 1998 0
 157 0030 0120     		movs	r0, #1
 158              	.LVL10:
 159              	.L10:
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 160              		.loc 1 2022 0
 161              		@ sp needed
 162              	.LVL11:
 163 0032 70BD     		pop	{r4, r5, r6, pc}
 164              	.LVL12:
 165              	.L18:
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 166              		.loc 1 1982 0 discriminator 1
 167 0034 1368     		ldr	r3, [r2]
 168 0036 DB07     		lsls	r3, r3, #31
 169 0038 04D4     		bmi	.L15
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 170              		.loc 1 1982 0 is_stmt 0 discriminator 4
 171 003a D368     		ldr	r3, [r2, #12]
 172 003c 1B04     		lsls	r3, r3, #16
 173 003e 03D4     		bmi	.L16
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 174              		.loc 1 1982 0
 175 0040 0023     		movs	r3, #0
 176 0042 E6E7     		b	.L9
 177              	.L15:
 178 0044 0123     		movs	r3, #1
 179 0046 E4E7     		b	.L9
 180              	.L16:
 181 0048 0123     		movs	r3, #1
 182 004a E2E7     		b	.L9
 183              	.L19:
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 184              		.loc 1 1988 0 is_stmt 1
 185 004c 9368     		ldr	r3, [r2, #8]
 186 004e 0221     		movs	r1, #2
 187 0050 0B43     		orrs	r3, r1
 188 0052 9360     		str	r3, [r2, #8]
 189 0054 2368     		ldr	r3, [r4]
 190 0056 0322     		movs	r2, #3
 191 0058 1A60     		str	r2, [r3]
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 192              		.loc 1 2003 0
 193 005a FFF7FEFF 		bl	HAL_GetTick
 194              	.LVL13:
ARM GAS  /tmp/ccw6ed28.s 			page 41


 195 005e 0500     		movs	r5, r0
 196              	.LVL14:
 197              	.L12:
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 198              		.loc 1 2005 0
 199 0060 2368     		ldr	r3, [r4]
 200 0062 9B68     		ldr	r3, [r3, #8]
 201 0064 DB07     		lsls	r3, r3, #31
 202 0066 0ED5     		bpl	.L20
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 203              		.loc 1 2007 0
 204 0068 FFF7FEFF 		bl	HAL_GetTick
 205              	.LVL15:
 206 006c 401B     		subs	r0, r0, r5
 207 006e 0228     		cmp	r0, #2
 208 0070 F6D9     		bls	.L12
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 209              		.loc 1 2010 0
 210 0072 636C     		ldr	r3, [r4, #68]
 211 0074 1022     		movs	r2, #16
 212 0076 1343     		orrs	r3, r2
 213 0078 6364     		str	r3, [r4, #68]
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 214              		.loc 1 2013 0
 215 007a A36C     		ldr	r3, [r4, #72]
 216 007c 0F3A     		subs	r2, r2, #15
 217 007e 1343     		orrs	r3, r2
 218 0080 A364     		str	r3, [r4, #72]
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 219              		.loc 1 2015 0
 220 0082 0120     		movs	r0, #1
 221 0084 D5E7     		b	.L10
 222              	.L20:
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 223              		.loc 1 2021 0
 224 0086 0020     		movs	r0, #0
 225 0088 D3E7     		b	.L10
 226              	.LVL16:
 227              	.L17:
 228 008a 0020     		movs	r0, #0
 229              	.LVL17:
 230 008c D1E7     		b	.L10
 231              		.cfi_endproc
 232              	.LFE58:
 234              		.global	__aeabi_uidiv
 235              		.section	.text.ADC_Enable,"ax",%progbits
 236              		.align	1
 237              		.syntax unified
 238              		.code	16
 239              		.thumb_func
 240              		.fpu softvfp
 242              	ADC_Enable:
 243              	.LFB57:
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 244              		.loc 1 1911 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccw6ed28.s 			page 42


 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL18:
 249 0000 30B5     		push	{r4, r5, lr}
 250              	.LCFI2:
 251              		.cfi_def_cfa_offset 12
 252              		.cfi_offset 4, -12
 253              		.cfi_offset 5, -8
 254              		.cfi_offset 14, -4
 255 0002 83B0     		sub	sp, sp, #12
 256              	.LCFI3:
 257              		.cfi_def_cfa_offset 24
 258 0004 0400     		movs	r4, r0
 259              	.LVL19:
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 260              		.loc 1 1913 0
 261 0006 0023     		movs	r3, #0
 262 0008 0193     		str	r3, [sp, #4]
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 263              		.loc 1 1919 0
 264 000a 0268     		ldr	r2, [r0]
 265 000c 9168     		ldr	r1, [r2, #8]
 266 000e 0333     		adds	r3, r3, #3
 267 0010 0B40     		ands	r3, r1
 268 0012 012B     		cmp	r3, #1
 269 0014 11D0     		beq	.L33
 270 0016 0023     		movs	r3, #0
 271              	.L22:
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 272              		.loc 1 1919 0 is_stmt 0 discriminator 8
 273 0018 002B     		cmp	r3, #0
 274 001a 42D1     		bne	.L32
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 275              		.loc 1 1922 0 is_stmt 1
 276 001c 9168     		ldr	r1, [r2, #8]
 277 001e 224B     		ldr	r3, .L36
 278 0020 1942     		tst	r1, r3
 279 0022 16D1     		bne	.L34
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 280              		.loc 1 1934 0
 281 0024 9368     		ldr	r3, [r2, #8]
 282 0026 0121     		movs	r1, #1
 283 0028 0B43     		orrs	r3, r1
 284 002a 9360     		str	r3, [r2, #8]
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 285              		.loc 1 1938 0
 286 002c 1F4B     		ldr	r3, .L36+4
 287 002e 1868     		ldr	r0, [r3]
 288              	.LVL20:
 289 0030 1F49     		ldr	r1, .L36+8
 290 0032 FFF7FEFF 		bl	__aeabi_uidiv
 291              	.LVL21:
 292 0036 0190     		str	r0, [sp, #4]
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 293              		.loc 1 1939 0
 294 0038 18E0     		b	.L25
 295              	.LVL22:
 296              	.L33:
ARM GAS  /tmp/ccw6ed28.s 			page 43


1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 297              		.loc 1 1919 0 discriminator 1
 298 003a 1368     		ldr	r3, [r2]
 299 003c DB07     		lsls	r3, r3, #31
 300 003e 04D4     		bmi	.L30
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 301              		.loc 1 1919 0 is_stmt 0 discriminator 4
 302 0040 D368     		ldr	r3, [r2, #12]
 303 0042 1B04     		lsls	r3, r3, #16
 304 0044 03D4     		bmi	.L31
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 305              		.loc 1 1919 0
 306 0046 0023     		movs	r3, #0
 307 0048 E6E7     		b	.L22
 308              	.L30:
 309 004a 0123     		movs	r3, #1
 310 004c E4E7     		b	.L22
 311              	.L31:
 312 004e 0123     		movs	r3, #1
 313 0050 E2E7     		b	.L22
 314              	.L34:
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 315              		.loc 1 1925 0 is_stmt 1
 316 0052 636C     		ldr	r3, [r4, #68]
 317 0054 1022     		movs	r2, #16
 318 0056 1343     		orrs	r3, r2
 319 0058 6364     		str	r3, [r4, #68]
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 320              		.loc 1 1928 0
 321 005a A36C     		ldr	r3, [r4, #72]
 322 005c 0F3A     		subs	r2, r2, #15
 323 005e 1343     		orrs	r3, r2
 324 0060 A364     		str	r3, [r4, #72]
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 325              		.loc 1 1930 0
 326 0062 0120     		movs	r0, #1
 327              	.LVL23:
 328 0064 1EE0     		b	.L23
 329              	.L26:
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 330              		.loc 1 1941 0
 331 0066 019B     		ldr	r3, [sp, #4]
 332 0068 013B     		subs	r3, r3, #1
 333 006a 0193     		str	r3, [sp, #4]
 334              	.L25:
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 335              		.loc 1 1939 0
 336 006c 019B     		ldr	r3, [sp, #4]
 337 006e 002B     		cmp	r3, #0
 338 0070 F9D1     		bne	.L26
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 339              		.loc 1 1945 0
 340 0072 FFF7FEFF 		bl	HAL_GetTick
 341              	.LVL24:
 342 0076 0500     		movs	r5, r0
 343              	.LVL25:
 344              	.L27:
ARM GAS  /tmp/ccw6ed28.s 			page 44


1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 345              		.loc 1 1948 0
 346 0078 2368     		ldr	r3, [r4]
 347 007a 1B68     		ldr	r3, [r3]
 348 007c DB07     		lsls	r3, r3, #31
 349 007e 0ED4     		bmi	.L35
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 350              		.loc 1 1950 0
 351 0080 FFF7FEFF 		bl	HAL_GetTick
 352              	.LVL26:
 353 0084 401B     		subs	r0, r0, r5
 354 0086 0228     		cmp	r0, #2
 355 0088 F6D9     		bls	.L27
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 356              		.loc 1 1953 0
 357 008a 636C     		ldr	r3, [r4, #68]
 358 008c 1022     		movs	r2, #16
 359 008e 1343     		orrs	r3, r2
 360 0090 6364     		str	r3, [r4, #68]
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 361              		.loc 1 1956 0
 362 0092 A36C     		ldr	r3, [r4, #72]
 363 0094 0F3A     		subs	r2, r2, #15
 364 0096 1343     		orrs	r3, r2
 365 0098 A364     		str	r3, [r4, #72]
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 366              		.loc 1 1958 0
 367 009a 0120     		movs	r0, #1
 368 009c 02E0     		b	.L23
 369              	.L35:
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 370              		.loc 1 1965 0
 371 009e 0020     		movs	r0, #0
 372 00a0 00E0     		b	.L23
 373              	.LVL27:
 374              	.L32:
 375 00a2 0020     		movs	r0, #0
 376              	.LVL28:
 377              	.L23:
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 378              		.loc 1 1966 0
 379 00a4 03B0     		add	sp, sp, #12
 380              		@ sp needed
 381              	.LVL29:
 382 00a6 30BD     		pop	{r4, r5, pc}
 383              	.L37:
 384              		.align	2
 385              	.L36:
 386 00a8 17000080 		.word	-2147483625
 387 00ac 00000000 		.word	SystemCoreClock
 388 00b0 40420F00 		.word	1000000
 389              		.cfi_endproc
 390              	.LFE57:
 392              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 393              		.align	1
 394              		.weak	HAL_ADC_MspInit
 395              		.syntax unified
ARM GAS  /tmp/ccw6ed28.s 			page 45


 396              		.code	16
 397              		.thumb_func
 398              		.fpu softvfp
 400              	HAL_ADC_MspInit:
 401              	.LFB37:
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 402              		.loc 1 702 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407              	.LVL30:
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 408              		.loc 1 709 0
 409              		@ sp needed
 410 0000 7047     		bx	lr
 411              		.cfi_endproc
 412              	.LFE37:
 414              		.section	.text.HAL_ADC_Init,"ax",%progbits
 415              		.align	1
 416              		.global	HAL_ADC_Init
 417              		.syntax unified
 418              		.code	16
 419              		.thumb_func
 420              		.fpu softvfp
 422              	HAL_ADC_Init:
 423              	.LFB35:
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 424              		.loc 1 360 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 0
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              	.LVL31:
 429 0000 70B5     		push	{r4, r5, r6, lr}
 430              	.LCFI4:
 431              		.cfi_def_cfa_offset 16
 432              		.cfi_offset 4, -16
 433              		.cfi_offset 5, -12
 434              		.cfi_offset 6, -8
 435              		.cfi_offset 14, -4
 436 0002 041E     		subs	r4, r0, #0
 437              	.LVL32:
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 438              		.loc 1 365 0
 439 0004 00D1     		bne	.LCB411
 440 0006 B9E0     		b	.L53	@long jump
 441              	.LCB411:
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 442              		.loc 1 394 0
 443 0008 436C     		ldr	r3, [r0, #68]
 444 000a 002B     		cmp	r3, #0
 445 000c 00D1     		bne	.LCB414
 446 000e 80E0     		b	.L58	@long jump
 447              	.LCB414:
 448              	.LVL33:
 449              	.L41:
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
ARM GAS  /tmp/ccw6ed28.s 			page 46


 450              		.loc 1 411 0
 451 0010 636C     		ldr	r3, [r4, #68]
 452 0012 DB06     		lsls	r3, r3, #27
 453 0014 00D5     		bpl	.LCB421
 454 0016 ABE0     		b	.L42	@long jump
 455              	.LCB421:
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 456              		.loc 1 413 0
 457 0018 2268     		ldr	r2, [r4]
 458 001a 9368     		ldr	r3, [r2, #8]
 459 001c 0421     		movs	r1, #4
 460 001e 0B40     		ands	r3, r1
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 461              		.loc 1 412 0
 462 0020 00D0     		beq	.LCB427
 463 0022 A5E0     		b	.L42	@long jump
 464              	.LCB427:
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 465              		.loc 1 416 0
 466 0024 616C     		ldr	r1, [r4, #68]
 467 0026 5648     		ldr	r0, .L63
 468 0028 0140     		ands	r1, r0
 469 002a 0630     		adds	r0, r0, #6
 470 002c FF30     		adds	r0, r0, #255
 471 002e 0143     		orrs	r1, r0
 472 0030 6164     		str	r1, [r4, #68]
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 473              		.loc 1 425 0
 474 0032 9068     		ldr	r0, [r2, #8]
 475 0034 0321     		movs	r1, #3
 476 0036 0140     		ands	r1, r0
 477 0038 0129     		cmp	r1, #1
 478 003a 70D0     		beq	.L59
 479 003c 0021     		movs	r1, #0
 480              	.L43:
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 481              		.loc 1 425 0 is_stmt 0 discriminator 8
 482 003e 0029     		cmp	r1, #0
 483 0040 0CD1     		bne	.L44
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 484              		.loc 1 436 0 is_stmt 1
 485 0042 D168     		ldr	r1, [r2, #12]
 486 0044 1820     		movs	r0, #24
 487 0046 8143     		bics	r1, r0
 488 0048 A068     		ldr	r0, [r4, #8]
 489 004a 0143     		orrs	r1, r0
 490 004c D160     		str	r1, [r2, #12]
 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 491              		.loc 1 442 0
 492 004e 2168     		ldr	r1, [r4]
 493 0050 0A69     		ldr	r2, [r1, #16]
 494 0052 9200     		lsls	r2, r2, #2
 495 0054 9208     		lsrs	r2, r2, #2
 496 0056 6068     		ldr	r0, [r4, #4]
 497 0058 0243     		orrs	r2, r0
 498 005a 0A61     		str	r2, [r1, #16]
 499              	.L44:
ARM GAS  /tmp/ccw6ed28.s 			page 47


 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 500              		.loc 1 459 0
 501 005c 2168     		ldr	r1, [r4]
 502 005e CA68     		ldr	r2, [r1, #12]
 503 0060 4848     		ldr	r0, .L63+4
 504 0062 0240     		ands	r2, r0
 505 0064 CA60     		str	r2, [r1, #12]
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 506              		.loc 1 470 0
 507 0066 A269     		ldr	r2, [r4, #24]
 508 0068 9203     		lsls	r2, r2, #14
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 509              		.loc 1 471 0
 510 006a E169     		ldr	r1, [r4, #28]
 511 006c C903     		lsls	r1, r1, #15
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 512              		.loc 1 470 0
 513 006e 0A43     		orrs	r2, r1
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 514              		.loc 1 472 0
 515 0070 206A     		ldr	r0, [r4, #32]
 516 0072 4103     		lsls	r1, r0, #13
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 517              		.loc 1 471 0
 518 0074 0A43     		orrs	r2, r1
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 519              		.loc 1 473 0
 520 0076 616B     		ldr	r1, [r4, #52]
 521 0078 0129     		cmp	r1, #1
 522 007a 5CD0     		beq	.L57
 523 007c 8021     		movs	r1, #128
 524 007e 4901     		lsls	r1, r1, #5
 525              	.L45:
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 526              		.loc 1 472 0
 527 0080 0A43     		orrs	r2, r1
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 528              		.loc 1 473 0
 529 0082 E168     		ldr	r1, [r4, #12]
 530 0084 0A43     		orrs	r2, r1
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 531              		.loc 1 475 0
 532 0086 2169     		ldr	r1, [r4, #16]
 533 0088 0229     		cmp	r1, #2
 534 008a 56D0     		beq	.L60
 535              	.L46:
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 536              		.loc 1 474 0
 537 008c 1343     		orrs	r3, r2
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 538              		.loc 1 476 0
 539 008e 226B     		ldr	r2, [r4, #48]
 540 0090 5200     		lsls	r2, r2, #1
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 541              		.loc 1 475 0
 542 0092 1343     		orrs	r3, r2
 543              	.LVL34:
ARM GAS  /tmp/ccw6ed28.s 			page 48


 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 544              		.loc 1 479 0
 545 0094 626A     		ldr	r2, [r4, #36]
 546 0096 012A     		cmp	r2, #1
 547 0098 51D0     		beq	.L61
 548              	.L47:
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 549              		.loc 1 505 0
 550 009a A26A     		ldr	r2, [r4, #40]
 551 009c C221     		movs	r1, #194
 552 009e FF31     		adds	r1, r1, #255
 553 00a0 8A42     		cmp	r2, r1
 554 00a2 02D0     		beq	.L49
 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 555              		.loc 1 507 0
 556 00a4 E16A     		ldr	r1, [r4, #44]
 557 00a6 0A43     		orrs	r2, r1
 558 00a8 1343     		orrs	r3, r2
 559              	.LVL35:
 560              	.L49:
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 561              		.loc 1 512 0
 562 00aa 2168     		ldr	r1, [r4]
 563 00ac CA68     		ldr	r2, [r1, #12]
 564 00ae 1A43     		orrs	r2, r3
 565 00b0 CA60     		str	r2, [r1, #12]
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 566              		.loc 1 520 0
 567 00b2 A26B     		ldr	r2, [r4, #56]
 568 00b4 8021     		movs	r1, #128
 569 00b6 4905     		lsls	r1, r1, #21
 570 00b8 8A42     		cmp	r2, r1
 571 00ba 0DD0     		beq	.L50
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 572              		.loc 1 520 0 is_stmt 0 discriminator 1
 573 00bc 012A     		cmp	r2, #1
 574 00be 0BD0     		beq	.L50
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 575              		.loc 1 520 0 discriminator 2
 576 00c0 022A     		cmp	r2, #2
 577 00c2 09D0     		beq	.L50
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 578              		.loc 1 520 0 discriminator 3
 579 00c4 032A     		cmp	r2, #3
 580 00c6 07D0     		beq	.L50
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 581              		.loc 1 520 0 discriminator 4
 582 00c8 042A     		cmp	r2, #4
 583 00ca 05D0     		beq	.L50
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 584              		.loc 1 520 0 discriminator 5
 585 00cc 052A     		cmp	r2, #5
 586 00ce 03D0     		beq	.L50
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 587              		.loc 1 520 0 discriminator 6
 588 00d0 062A     		cmp	r2, #6
 589 00d2 01D0     		beq	.L50
ARM GAS  /tmp/ccw6ed28.s 			page 49


 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 590              		.loc 1 520 0 discriminator 7
 591 00d4 072A     		cmp	r2, #7
 592 00d6 0AD1     		bne	.L51
 593              	.L50:
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 594              		.loc 1 524 0 is_stmt 1
 595 00d8 2068     		ldr	r0, [r4]
 596 00da 4169     		ldr	r1, [r0, #20]
 597 00dc 0722     		movs	r2, #7
 598 00de 9143     		bics	r1, r2
 599 00e0 4161     		str	r1, [r0, #20]
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 600              		.loc 1 527 0
 601 00e2 2068     		ldr	r0, [r4]
 602 00e4 4169     		ldr	r1, [r0, #20]
 603 00e6 A56B     		ldr	r5, [r4, #56]
 604 00e8 2A40     		ands	r2, r5
 605 00ea 0A43     		orrs	r2, r1
 606 00ec 4261     		str	r2, [r0, #20]
 607              	.L51:
 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 608              		.loc 1 535 0
 609 00ee 2268     		ldr	r2, [r4]
 610 00f0 D268     		ldr	r2, [r2, #12]
 611 00f2 2549     		ldr	r1, .L63+8
 612 00f4 0A40     		ands	r2, r1
 613 00f6 9342     		cmp	r3, r2
 614 00f8 30D0     		beq	.L62
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 615              		.loc 1 549 0
 616 00fa 636C     		ldr	r3, [r4, #68]
 617              	.LVL36:
 618 00fc 1222     		movs	r2, #18
 619 00fe 9343     		bics	r3, r2
 620 0100 023A     		subs	r2, r2, #2
 621 0102 1343     		orrs	r3, r2
 622 0104 6364     		str	r3, [r4, #68]
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 623              		.loc 1 554 0
 624 0106 A36C     		ldr	r3, [r4, #72]
 625 0108 0F3A     		subs	r2, r2, #15
 626 010a 1343     		orrs	r3, r2
 627 010c A364     		str	r3, [r4, #72]
 628              	.LVL37:
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 629              		.loc 1 556 0
 630 010e 0120     		movs	r0, #1
 631 0110 33E0     		b	.L40
 632              	.LVL38:
 633              	.L58:
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 634              		.loc 1 397 0
 635 0112 8364     		str	r3, [r0, #72]
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 636              		.loc 1 400 0
 637 0114 4022     		movs	r2, #64
ARM GAS  /tmp/ccw6ed28.s 			page 50


 638 0116 8354     		strb	r3, [r0, r2]
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 639              		.loc 1 403 0
 640 0118 FFF7FEFF 		bl	HAL_ADC_MspInit
 641              	.LVL39:
 642 011c 78E7     		b	.L41
 643              	.L59:
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 644              		.loc 1 425 0 discriminator 1
 645 011e 1168     		ldr	r1, [r2]
 646 0120 C907     		lsls	r1, r1, #31
 647 0122 04D4     		bmi	.L55
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 648              		.loc 1 425 0 is_stmt 0 discriminator 4
 649 0124 D168     		ldr	r1, [r2, #12]
 650 0126 0904     		lsls	r1, r1, #16
 651 0128 03D4     		bmi	.L56
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 652              		.loc 1 425 0
 653 012a 0021     		movs	r1, #0
 654 012c 87E7     		b	.L43
 655              	.L55:
 656 012e 0121     		movs	r1, #1
 657 0130 85E7     		b	.L43
 658              	.L56:
 659 0132 0121     		movs	r1, #1
 660 0134 83E7     		b	.L43
 661              	.L57:
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                   |
 662              		.loc 1 473 0 is_stmt 1
 663 0136 1900     		movs	r1, r3
 664 0138 A2E7     		b	.L45
 665              	.L60:
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 666              		.loc 1 475 0
 667 013a 0423     		movs	r3, #4
 668 013c A6E7     		b	.L46
 669              	.LVL40:
 670              	.L61:
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 671              		.loc 1 481 0
 672 013e 0028     		cmp	r0, #0
 673 0140 03D1     		bne	.L48
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 674              		.loc 1 484 0
 675 0142 8022     		movs	r2, #128
 676 0144 5202     		lsls	r2, r2, #9
 677 0146 1343     		orrs	r3, r2
 678              	.LVL41:
 679 0148 A7E7     		b	.L47
 680              	.L48:
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 681              		.loc 1 493 0
 682 014a 626C     		ldr	r2, [r4, #68]
 683 014c 2021     		movs	r1, #32
 684 014e 0A43     		orrs	r2, r1
 685 0150 6264     		str	r2, [r4, #68]
ARM GAS  /tmp/ccw6ed28.s 			page 51


 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 686              		.loc 1 496 0
 687 0152 A26C     		ldr	r2, [r4, #72]
 688 0154 1F39     		subs	r1, r1, #31
 689 0156 0A43     		orrs	r2, r1
 690 0158 A264     		str	r2, [r4, #72]
 691 015a 9EE7     		b	.L47
 692              	.L62:
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 693              		.loc 1 539 0
 694 015c 0023     		movs	r3, #0
 695              	.LVL42:
 696 015e A364     		str	r3, [r4, #72]
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 697              		.loc 1 542 0
 698 0160 636C     		ldr	r3, [r4, #68]
 699 0162 0322     		movs	r2, #3
 700 0164 9343     		bics	r3, r2
 701 0166 023A     		subs	r2, r2, #2
 702 0168 1343     		orrs	r3, r2
 703 016a 6364     		str	r3, [r4, #68]
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
 704              		.loc 1 361 0
 705 016c 0020     		movs	r0, #0
 706 016e 04E0     		b	.L40
 707              	.LVL43:
 708              	.L42:
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 709              		.loc 1 563 0
 710 0170 636C     		ldr	r3, [r4, #68]
 711 0172 1022     		movs	r2, #16
 712 0174 1343     		orrs	r3, r2
 713 0176 6364     		str	r3, [r4, #68]
 714              	.LVL44:
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 715              		.loc 1 565 0
 716 0178 0120     		movs	r0, #1
 717              	.LVL45:
 718              	.L40:
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 719              		.loc 1 570 0
 720              		@ sp needed
 721              	.LVL46:
 722 017a 70BD     		pop	{r4, r5, r6, pc}
 723              	.LVL47:
 724              	.L53:
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 725              		.loc 1 367 0
 726 017c 0120     		movs	r0, #1
 727              	.LVL48:
 728 017e FCE7     		b	.L40
 729              	.L64:
 730              		.align	2
 731              	.L63:
 732 0180 FDFEFFFF 		.word	-259
 733 0184 1902FEFF 		.word	-130535
 734 0188 E7FF3F83 		.word	-2092957721
ARM GAS  /tmp/ccw6ed28.s 			page 52


 735              		.cfi_endproc
 736              	.LFE35:
 738              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 739              		.align	1
 740              		.weak	HAL_ADC_MspDeInit
 741              		.syntax unified
 742              		.code	16
 743              		.thumb_func
 744              		.fpu softvfp
 746              	HAL_ADC_MspDeInit:
 747              	.LFB38:
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 748              		.loc 1 717 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 753              	.LVL49:
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 754              		.loc 1 724 0
 755              		@ sp needed
 756 0000 7047     		bx	lr
 757              		.cfi_endproc
 758              	.LFE38:
 760              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 761              		.align	1
 762              		.global	HAL_ADC_DeInit
 763              		.syntax unified
 764              		.code	16
 765              		.thumb_func
 766              		.fpu softvfp
 768              	HAL_ADC_DeInit:
 769              	.LFB36:
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 770              		.loc 1 586 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              	.LVL50:
 775 0000 70B5     		push	{r4, r5, r6, lr}
 776              	.LCFI5:
 777              		.cfi_def_cfa_offset 16
 778              		.cfi_offset 4, -16
 779              		.cfi_offset 5, -12
 780              		.cfi_offset 6, -8
 781              		.cfi_offset 14, -4
 782 0002 041E     		subs	r4, r0, #0
 783              	.LVL51:
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 784              		.loc 1 590 0
 785 0004 42D0     		beq	.L70
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 786              		.loc 1 599 0
 787 0006 436C     		ldr	r3, [r0, #68]
 788 0008 0222     		movs	r2, #2
 789 000a 1343     		orrs	r3, r2
 790 000c 4364     		str	r3, [r0, #68]
ARM GAS  /tmp/ccw6ed28.s 			page 53


 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 791              		.loc 1 602 0
 792 000e FFF7FEFF 		bl	ADC_ConversionStop
 793              	.LVL52:
 794 0012 051E     		subs	r5, r0, #0
 795              	.LVL53:
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 796              		.loc 1 605 0
 797 0014 31D0     		beq	.L71
 798              	.LVL54:
 799              	.L68:
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 800              		.loc 1 621 0
 801 0016 012D     		cmp	r5, #1
 802 0018 2AD0     		beq	.L69
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 803              		.loc 1 626 0
 804 001a 2168     		ldr	r1, [r4]
 805 001c 4B68     		ldr	r3, [r1, #4]
 806 001e 9F22     		movs	r2, #159
 807 0020 9343     		bics	r3, r2
 808 0022 4B60     		str	r3, [r1, #4]
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 809              		.loc 1 631 0
 810 0024 2368     		ldr	r3, [r4]
 811 0026 1A60     		str	r2, [r3]
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 812              		.loc 1 640 0
 813 0028 2268     		ldr	r2, [r4]
 814 002a D368     		ldr	r3, [r2, #12]
 815 002c 1849     		ldr	r1, .L72
 816 002e 0B40     		ands	r3, r1
 817 0030 D360     		str	r3, [r2, #12]
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 818              		.loc 1 648 0
 819 0032 2268     		ldr	r2, [r4]
 820 0034 1369     		ldr	r3, [r2, #16]
 821 0036 9B00     		lsls	r3, r3, #2
 822 0038 9B08     		lsrs	r3, r3, #2
 823 003a 1361     		str	r3, [r2, #16]
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 824              		.loc 1 651 0
 825 003c 2268     		ldr	r2, [r4]
 826 003e 5369     		ldr	r3, [r2, #20]
 827 0040 0721     		movs	r1, #7
 828 0042 8B43     		bics	r3, r1
 829 0044 5361     		str	r3, [r2, #20]
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 830              		.loc 1 654 0
 831 0046 2268     		ldr	r2, [r4]
 832 0048 136A     		ldr	r3, [r2, #32]
 833 004a 1249     		ldr	r1, .L72+4
 834 004c 0B40     		ands	r3, r1
 835 004e 1362     		str	r3, [r2, #32]
 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 836              		.loc 1 657 0
 837 0050 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccw6ed28.s 			page 54


 838 0052 936A     		ldr	r3, [r2, #40]
 839 0054 DB0C     		lsrs	r3, r3, #19
 840 0056 DB04     		lsls	r3, r3, #19
 841 0058 9362     		str	r3, [r2, #40]
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 842              		.loc 1 667 0
 843 005a 0F4A     		ldr	r2, .L72+8
 844 005c 1368     		ldr	r3, [r2]
 845 005e 0F49     		ldr	r1, .L72+12
 846 0060 0B40     		ands	r3, r1
 847 0062 1360     		str	r3, [r2]
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 848              		.loc 1 679 0
 849 0064 2000     		movs	r0, r4
 850 0066 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 851              	.LVL55:
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 852              		.loc 1 682 0
 853 006a 0023     		movs	r3, #0
 854 006c A364     		str	r3, [r4, #72]
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 855              		.loc 1 685 0
 856 006e 6364     		str	r3, [r4, #68]
 857              	.L69:
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 858              		.loc 1 689 0
 859 0070 0022     		movs	r2, #0
 860 0072 4023     		movs	r3, #64
 861 0074 E254     		strb	r2, [r4, r3]
 862              	.LVL56:
 863              	.L67:
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 864              		.loc 1 693 0
 865 0076 2800     		movs	r0, r5
 866              		@ sp needed
 867              	.LVL57:
 868 0078 70BD     		pop	{r4, r5, r6, pc}
 869              	.LVL58:
 870              	.L71:
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 871              		.loc 1 608 0
 872 007a 2000     		movs	r0, r4
 873              	.LVL59:
 874 007c FFF7FEFF 		bl	ADC_Disable
 875              	.LVL60:
 876 0080 0500     		movs	r5, r0
 877              	.LVL61:
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 878              		.loc 1 611 0
 879 0082 0128     		cmp	r0, #1
 880 0084 C7D0     		beq	.L68
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 881              		.loc 1 614 0
 882 0086 0123     		movs	r3, #1
 883 0088 6364     		str	r3, [r4, #68]
 884 008a C4E7     		b	.L68
 885              	.LVL62:
ARM GAS  /tmp/ccw6ed28.s 			page 55


 886              	.L70:
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 887              		.loc 1 592 0
 888 008c 0125     		movs	r5, #1
 889 008e F2E7     		b	.L67
 890              	.L73:
 891              		.align	2
 892              	.L72:
 893 0090 00023E83 		.word	-2093088256
 894 0094 00F000F0 		.word	-268374016
 895 0098 08270140 		.word	1073817352
 896 009c FFFF3FFE 		.word	-29360129
 897              		.cfi_endproc
 898              	.LFE36:
 900              		.section	.text.HAL_ADC_Start,"ax",%progbits
 901              		.align	1
 902              		.global	HAL_ADC_Start
 903              		.syntax unified
 904              		.code	16
 905              		.thumb_func
 906              		.fpu softvfp
 908              	HAL_ADC_Start:
 909              	.LFB39:
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 910              		.loc 1 759 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 0
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              	.LVL63:
 915 0000 10B5     		push	{r4, lr}
 916              	.LCFI6:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 4, -8
 919              		.cfi_offset 14, -4
 920 0002 0400     		movs	r4, r0
 921              	.LVL64:
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 922              		.loc 1 766 0
 923 0004 0368     		ldr	r3, [r0]
 924 0006 9B68     		ldr	r3, [r3, #8]
 925 0008 5B07     		lsls	r3, r3, #29
 926 000a 01D5     		bpl	.L80
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 927              		.loc 1 811 0
 928 000c 0220     		movs	r0, #2
 929              	.LVL65:
 930              	.L75:
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 931              		.loc 1 816 0
 932              		@ sp needed
 933              	.LVL66:
 934 000e 10BD     		pop	{r4, pc}
 935              	.LVL67:
 936              	.L80:
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 937              		.loc 1 769 0
 938 0010 4023     		movs	r3, #64
ARM GAS  /tmp/ccw6ed28.s 			page 56


 939 0012 C35C     		ldrb	r3, [r0, r3]
 940 0014 012B     		cmp	r3, #1
 941 0016 1FD0     		beq	.L78
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 942              		.loc 1 769 0 is_stmt 0 discriminator 2
 943 0018 0122     		movs	r2, #1
 944 001a 4023     		movs	r3, #64
 945 001c C254     		strb	r2, [r0, r3]
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 946              		.loc 1 774 0 is_stmt 1 discriminator 2
 947 001e C369     		ldr	r3, [r0, #28]
 948 0020 012B     		cmp	r3, #1
 949 0022 17D0     		beq	.L79
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 950              		.loc 1 776 0
 951 0024 FFF7FEFF 		bl	ADC_Enable
 952              	.LVL68:
 953              	.L76:
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 954              		.loc 1 780 0
 955 0028 0028     		cmp	r0, #0
 956 002a F0D1     		bne	.L75
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 957              		.loc 1 785 0
 958 002c 636C     		ldr	r3, [r4, #68]
 959 002e 0B4A     		ldr	r2, .L81
 960 0030 1A40     		ands	r2, r3
 961 0032 8023     		movs	r3, #128
 962 0034 5B00     		lsls	r3, r3, #1
 963 0036 1343     		orrs	r3, r2
 964 0038 6364     		str	r3, [r4, #68]
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 965              		.loc 1 790 0
 966 003a 0023     		movs	r3, #0
 967 003c A364     		str	r3, [r4, #72]
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 968              		.loc 1 795 0
 969 003e 4022     		movs	r2, #64
 970 0040 A354     		strb	r3, [r4, r2]
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 971              		.loc 1 800 0
 972 0042 2368     		ldr	r3, [r4]
 973 0044 243A     		subs	r2, r2, #36
 974 0046 1A60     		str	r2, [r3]
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 975              		.loc 1 806 0
 976 0048 2268     		ldr	r2, [r4]
 977 004a 9368     		ldr	r3, [r2, #8]
 978 004c 0421     		movs	r1, #4
 979 004e 0B43     		orrs	r3, r1
 980 0050 9360     		str	r3, [r2, #8]
 981 0052 DCE7     		b	.L75
 982              	.LVL69:
 983              	.L79:
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 984              		.loc 1 760 0
 985 0054 0020     		movs	r0, #0
ARM GAS  /tmp/ccw6ed28.s 			page 57


 986              	.LVL70:
 987 0056 E7E7     		b	.L76
 988              	.LVL71:
 989              	.L78:
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 990              		.loc 1 769 0
 991 0058 0220     		movs	r0, #2
 992              	.LVL72:
 993 005a D8E7     		b	.L75
 994              	.L82:
 995              		.align	2
 996              	.L81:
 997 005c FEF0FFFF 		.word	-3842
 998              		.cfi_endproc
 999              	.LFE39:
 1001              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 1002              		.align	1
 1003              		.global	HAL_ADC_Stop
 1004              		.syntax unified
 1005              		.code	16
 1006              		.thumb_func
 1007              		.fpu softvfp
 1009              	HAL_ADC_Stop:
 1010              	.LFB40:
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1011              		.loc 1 824 0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              	.LVL73:
 1016 0000 10B5     		push	{r4, lr}
 1017              	.LCFI7:
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 4, -8
 1020              		.cfi_offset 14, -4
 1021 0002 0400     		movs	r4, r0
 1022              	.LVL74:
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1023              		.loc 1 831 0
 1024 0004 4023     		movs	r3, #64
 1025 0006 C35C     		ldrb	r3, [r0, r3]
 1026 0008 012B     		cmp	r3, #1
 1027 000a 01D1     		bne	.L87
 1028 000c 0220     		movs	r0, #2
 1029              	.LVL75:
 1030              	.L84:
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1031              		.loc 1 857 0
 1032              		@ sp needed
 1033              	.LVL76:
 1034 000e 10BD     		pop	{r4, pc}
 1035              	.LVL77:
 1036              	.L87:
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1037              		.loc 1 831 0 discriminator 2
 1038 0010 0122     		movs	r2, #1
 1039 0012 4023     		movs	r3, #64
ARM GAS  /tmp/ccw6ed28.s 			page 58


 1040 0014 C254     		strb	r2, [r0, r3]
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1041              		.loc 1 834 0 discriminator 2
 1042 0016 FFF7FEFF 		bl	ADC_ConversionStop
 1043              	.LVL78:
 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1044              		.loc 1 837 0 discriminator 2
 1045 001a 0028     		cmp	r0, #0
 1046 001c 03D0     		beq	.L88
 1047              	.LVL79:
 1048              	.L85:
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1049              		.loc 1 853 0
 1050 001e 0022     		movs	r2, #0
 1051 0020 4023     		movs	r3, #64
 1052 0022 E254     		strb	r2, [r4, r3]
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1053              		.loc 1 856 0
 1054 0024 F3E7     		b	.L84
 1055              	.L88:
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1056              		.loc 1 840 0
 1057 0026 2000     		movs	r0, r4
 1058              	.LVL80:
 1059 0028 FFF7FEFF 		bl	ADC_Disable
 1060              	.LVL81:
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1061              		.loc 1 843 0
 1062 002c 0028     		cmp	r0, #0
 1063 002e F6D1     		bne	.L85
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1064              		.loc 1 846 0
 1065 0030 636C     		ldr	r3, [r4, #68]
 1066 0032 034A     		ldr	r2, .L89
 1067 0034 1340     		ands	r3, r2
 1068 0036 0432     		adds	r2, r2, #4
 1069 0038 FF32     		adds	r2, r2, #255
 1070 003a 1343     		orrs	r3, r2
 1071 003c 6364     		str	r3, [r4, #68]
 1072 003e EEE7     		b	.L85
 1073              	.L90:
 1074              		.align	2
 1075              	.L89:
 1076 0040 FEFEFFFF 		.word	-258
 1077              		.cfi_endproc
 1078              	.LFE40:
 1080              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 1081              		.align	1
 1082              		.global	HAL_ADC_PollForConversion
 1083              		.syntax unified
 1084              		.code	16
 1085              		.thumb_func
 1086              		.fpu softvfp
 1088              	HAL_ADC_PollForConversion:
 1089              	.LFB41:
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
 1090              		.loc 1 878 0
ARM GAS  /tmp/ccw6ed28.s 			page 59


 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL82:
 1095 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1096              	.LCFI8:
 1097              		.cfi_def_cfa_offset 24
 1098              		.cfi_offset 3, -24
 1099              		.cfi_offset 4, -20
 1100              		.cfi_offset 5, -16
 1101              		.cfi_offset 6, -12
 1102              		.cfi_offset 7, -8
 1103              		.cfi_offset 14, -4
 1104 0002 0400     		movs	r4, r0
 1105 0004 0E00     		movs	r6, r1
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1106              		.loc 1 886 0
 1107 0006 4569     		ldr	r5, [r0, #20]
 1108 0008 082D     		cmp	r5, #8
 1109 000a 04D0     		beq	.L92
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1110              		.loc 1 899 0
 1111 000c 0368     		ldr	r3, [r0]
 1112 000e DB68     		ldr	r3, [r3, #12]
 1113 0010 DB07     		lsls	r3, r3, #31
 1114 0012 19D4     		bmi	.L102
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1115              		.loc 1 911 0
 1116 0014 0C25     		movs	r5, #12
 1117              	.L92:
 1118              	.LVL83:
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1119              		.loc 1 916 0
 1120 0016 FFF7FEFF 		bl	HAL_GetTick
 1121              	.LVL84:
 1122 001a 0700     		movs	r7, r0
 1123              	.LVL85:
 1124              	.L95:
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1125              		.loc 1 919 0
 1126 001c 2368     		ldr	r3, [r4]
 1127 001e 1A68     		ldr	r2, [r3]
 1128 0020 2A42     		tst	r2, r5
 1129 0022 1AD1     		bne	.L103
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1130              		.loc 1 922 0
 1131 0024 731C     		adds	r3, r6, #1
 1132 0026 F9D0     		beq	.L95
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1133              		.loc 1 924 0
 1134 0028 002E     		cmp	r6, #0
 1135 002a 04D0     		beq	.L96
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1136              		.loc 1 924 0 is_stmt 0 discriminator 1
 1137 002c FFF7FEFF 		bl	HAL_GetTick
 1138              	.LVL86:
 1139 0030 C01B     		subs	r0, r0, r7
ARM GAS  /tmp/ccw6ed28.s 			page 60


 1140 0032 8642     		cmp	r6, r0
 1141 0034 F2D2     		bcs	.L95
 1142              	.L96:
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1143              		.loc 1 927 0 is_stmt 1
 1144 0036 636C     		ldr	r3, [r4, #68]
 1145 0038 0422     		movs	r2, #4
 1146 003a 1343     		orrs	r3, r2
 1147 003c 6364     		str	r3, [r4, #68]
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1148              		.loc 1 930 0
 1149 003e 0022     		movs	r2, #0
 1150 0040 4023     		movs	r3, #64
 1151 0042 E254     		strb	r2, [r4, r3]
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1152              		.loc 1 932 0
 1153 0044 0320     		movs	r0, #3
 1154 0046 2DE0     		b	.L93
 1155              	.LVL87:
 1156              	.L102:
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1157              		.loc 1 902 0
 1158 0048 436C     		ldr	r3, [r0, #68]
 1159 004a 2022     		movs	r2, #32
 1160 004c 1343     		orrs	r3, r2
 1161 004e 4364     		str	r3, [r0, #68]
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1162              		.loc 1 905 0
 1163 0050 0022     		movs	r2, #0
 1164 0052 4023     		movs	r3, #64
 1165 0054 C254     		strb	r2, [r0, r3]
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1166              		.loc 1 907 0
 1167 0056 0120     		movs	r0, #1
 1168              	.LVL88:
 1169 0058 24E0     		b	.L93
 1170              	.LVL89:
 1171              	.L103:
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1172              		.loc 1 938 0
 1173 005a 616C     		ldr	r1, [r4, #68]
 1174 005c 8022     		movs	r2, #128
 1175 005e 9200     		lsls	r2, r2, #2
 1176 0060 0A43     		orrs	r2, r1
 1177 0062 6264     		str	r2, [r4, #68]
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1178              		.loc 1 942 0
 1179 0064 D968     		ldr	r1, [r3, #12]
 1180 0066 C022     		movs	r2, #192
 1181 0068 1201     		lsls	r2, r2, #4
 1182 006a 1142     		tst	r1, r2
 1183 006c 13D1     		bne	.L98
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1184              		.loc 1 942 0 is_stmt 0 discriminator 1
 1185 006e 226A     		ldr	r2, [r4, #32]
 1186 0070 002A     		cmp	r2, #0
 1187 0072 10D1     		bne	.L98
ARM GAS  /tmp/ccw6ed28.s 			page 61


 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1188              		.loc 1 946 0 is_stmt 1
 1189 0074 1A68     		ldr	r2, [r3]
 1190 0076 1207     		lsls	r2, r2, #28
 1191 0078 0DD5     		bpl	.L98
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1192              		.loc 1 950 0
 1193 007a 9A68     		ldr	r2, [r3, #8]
 1194 007c 5207     		lsls	r2, r2, #29
 1195 007e 12D4     		bmi	.L99
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1196              		.loc 1 956 0
 1197 0080 5A68     		ldr	r2, [r3, #4]
 1198 0082 0C21     		movs	r1, #12
 1199 0084 8A43     		bics	r2, r1
 1200 0086 5A60     		str	r2, [r3, #4]
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
 1201              		.loc 1 959 0
 1202 0088 636C     		ldr	r3, [r4, #68]
 1203 008a 0C4A     		ldr	r2, .L104
 1204 008c 1340     		ands	r3, r2
 1205 008e 0432     		adds	r2, r2, #4
 1206 0090 FF32     		adds	r2, r2, #255
 1207 0092 1343     		orrs	r3, r2
 1208 0094 6364     		str	r3, [r4, #68]
 1209              	.L98:
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1210              		.loc 1 977 0
 1211 0096 A369     		ldr	r3, [r4, #24]
 1212 0098 002B     		cmp	r3, #0
 1213 009a 0DD1     		bne	.L101
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1214              		.loc 1 980 0
 1215 009c 2368     		ldr	r3, [r4]
 1216 009e 0C22     		movs	r2, #12
 1217 00a0 1A60     		str	r2, [r3]
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1218              		.loc 1 984 0
 1219 00a2 0020     		movs	r0, #0
 1220              	.LVL90:
 1221              	.L93:
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1222              		.loc 1 985 0
 1223              		@ sp needed
 1224              	.LVL91:
 1225              	.LVL92:
 1226 00a4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1227              	.LVL93:
 1228              	.L99:
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1229              		.loc 1 966 0
 1230 00a6 636C     		ldr	r3, [r4, #68]
 1231 00a8 2022     		movs	r2, #32
 1232 00aa 1343     		orrs	r3, r2
 1233 00ac 6364     		str	r3, [r4, #68]
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1234              		.loc 1 969 0
ARM GAS  /tmp/ccw6ed28.s 			page 62


 1235 00ae A36C     		ldr	r3, [r4, #72]
 1236 00b0 1F3A     		subs	r2, r2, #31
 1237 00b2 1343     		orrs	r3, r2
 1238 00b4 A364     		str	r3, [r4, #72]
 1239 00b6 EEE7     		b	.L98
 1240              	.L101:
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1241              		.loc 1 984 0
 1242 00b8 0020     		movs	r0, #0
 1243 00ba F3E7     		b	.L93
 1244              	.L105:
 1245              		.align	2
 1246              	.L104:
 1247 00bc FEFEFFFF 		.word	-258
 1248              		.cfi_endproc
 1249              	.LFE41:
 1251              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1252              		.align	1
 1253              		.global	HAL_ADC_PollForEvent
 1254              		.syntax unified
 1255              		.code	16
 1256              		.thumb_func
 1257              		.fpu softvfp
 1259              	HAL_ADC_PollForEvent:
 1260              	.LFB42:
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
 1261              		.loc 1 998 0
 1262              		.cfi_startproc
 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 1265              	.LVL94:
 1266 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1267              	.LCFI9:
 1268              		.cfi_def_cfa_offset 24
 1269              		.cfi_offset 3, -24
 1270              		.cfi_offset 4, -20
 1271              		.cfi_offset 5, -16
 1272              		.cfi_offset 6, -12
 1273              		.cfi_offset 7, -8
 1274              		.cfi_offset 14, -4
 1275 0002 0500     		movs	r5, r0
 1276 0004 0C00     		movs	r4, r1
 1277 0006 1600     		movs	r6, r2
 1278              	.LVL95:
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1279              		.loc 1 1006 0
 1280 0008 FFF7FEFF 		bl	HAL_GetTick
 1281              	.LVL96:
 1282 000c 0700     		movs	r7, r0
 1283              	.LVL97:
 1284              	.L108:
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1285              		.loc 1 1009 0
 1286 000e 2A68     		ldr	r2, [r5]
 1287 0010 1368     		ldr	r3, [r2]
 1288 0012 2340     		ands	r3, r4
 1289 0014 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccw6ed28.s 			page 63


 1290 0016 11D0     		beq	.L116
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1291              		.loc 1 1012 0
 1292 0018 731C     		adds	r3, r6, #1
 1293 001a F8D0     		beq	.L108
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1294              		.loc 1 1014 0
 1295 001c 002E     		cmp	r6, #0
 1296 001e 04D0     		beq	.L109
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1297              		.loc 1 1014 0 is_stmt 0 discriminator 1
 1298 0020 FFF7FEFF 		bl	HAL_GetTick
 1299              	.LVL98:
 1300 0024 C01B     		subs	r0, r0, r7
 1301 0026 8642     		cmp	r6, r0
 1302 0028 F1D2     		bcs	.L108
 1303              	.L109:
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1304              		.loc 1 1017 0 is_stmt 1
 1305 002a 6B6C     		ldr	r3, [r5, #68]
 1306 002c 0422     		movs	r2, #4
 1307 002e 1343     		orrs	r3, r2
 1308 0030 6B64     		str	r3, [r5, #68]
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1309              		.loc 1 1020 0
 1310 0032 0022     		movs	r2, #0
 1311 0034 4023     		movs	r3, #64
 1312 0036 EA54     		strb	r2, [r5, r3]
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1313              		.loc 1 1022 0
 1314 0038 0320     		movs	r0, #3
 1315 003a 07E0     		b	.L110
 1316              	.L116:
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1317              		.loc 1 1027 0
 1318 003c 802C     		cmp	r4, #128
 1319 003e 06D0     		beq	.L117
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1320              		.loc 1 1044 0
 1321 0040 6B6B     		ldr	r3, [r5, #52]
 1322 0042 012B     		cmp	r3, #1
 1323 0044 0CD0     		beq	.L118
 1324              	.L114:
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1325              		.loc 1 1054 0
 1326 0046 1023     		movs	r3, #16
 1327 0048 1360     		str	r3, [r2]
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1328              		.loc 1 1059 0
 1329 004a 0020     		movs	r0, #0
 1330              	.L110:
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1331              		.loc 1 1060 0
 1332              		@ sp needed
 1333              	.LVL99:
 1334              	.LVL100:
 1335              	.LVL101:
ARM GAS  /tmp/ccw6ed28.s 			page 64


 1336              	.LVL102:
 1337 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1338              	.LVL103:
 1339              	.L117:
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1340              		.loc 1 1032 0
 1341 004e 696C     		ldr	r1, [r5, #68]
 1342 0050 8023     		movs	r3, #128
 1343 0052 5B02     		lsls	r3, r3, #9
 1344 0054 0B43     		orrs	r3, r1
 1345 0056 6B64     		str	r3, [r5, #68]
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1346              		.loc 1 1035 0
 1347 0058 8023     		movs	r3, #128
 1348 005a 1360     		str	r3, [r2]
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1349              		.loc 1 1059 0
 1350 005c 0020     		movs	r0, #0
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1351              		.loc 1 1036 0
 1352 005e F5E7     		b	.L110
 1353              	.L118:
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 1354              		.loc 1 1047 0
 1355 0060 696C     		ldr	r1, [r5, #68]
 1356 0062 8023     		movs	r3, #128
 1357 0064 DB00     		lsls	r3, r3, #3
 1358 0066 0B43     		orrs	r3, r1
 1359 0068 6B64     		str	r3, [r5, #68]
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1360              		.loc 1 1050 0
 1361 006a AB6C     		ldr	r3, [r5, #72]
 1362 006c 0221     		movs	r1, #2
 1363 006e 0B43     		orrs	r3, r1
 1364 0070 AB64     		str	r3, [r5, #72]
 1365 0072 E8E7     		b	.L114
 1366              		.cfi_endproc
 1367              	.LFE42:
 1369              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1370              		.align	1
 1371              		.global	HAL_ADC_Start_IT
 1372              		.syntax unified
 1373              		.code	16
 1374              		.thumb_func
 1375              		.fpu softvfp
 1377              	HAL_ADC_Start_IT:
 1378              	.LFB43:
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1379              		.loc 1 1074 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383              	.LVL104:
 1384 0000 10B5     		push	{r4, lr}
 1385              	.LCFI10:
 1386              		.cfi_def_cfa_offset 8
 1387              		.cfi_offset 4, -8
ARM GAS  /tmp/ccw6ed28.s 			page 65


 1388              		.cfi_offset 14, -4
 1389 0002 0400     		movs	r4, r0
 1390              	.LVL105:
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1391              		.loc 1 1081 0
 1392 0004 0368     		ldr	r3, [r0]
 1393 0006 9B68     		ldr	r3, [r3, #8]
 1394 0008 5B07     		lsls	r3, r3, #29
 1395 000a 01D5     		bpl	.L129
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
 1396              		.loc 1 1140 0
 1397 000c 0220     		movs	r0, #2
 1398              	.LVL106:
 1399              	.L120:
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1400              		.loc 1 1145 0
 1401              		@ sp needed
 1402              	.LVL107:
 1403 000e 10BD     		pop	{r4, pc}
 1404              	.LVL108:
 1405              	.L129:
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1406              		.loc 1 1084 0
 1407 0010 4023     		movs	r3, #64
 1408 0012 C35C     		ldrb	r3, [r0, r3]
 1409 0014 012B     		cmp	r3, #1
 1410 0016 32D0     		beq	.L126
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1411              		.loc 1 1084 0 is_stmt 0 discriminator 2
 1412 0018 0122     		movs	r2, #1
 1413 001a 4023     		movs	r3, #64
 1414 001c C254     		strb	r2, [r0, r3]
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1415              		.loc 1 1089 0 is_stmt 1 discriminator 2
 1416 001e C369     		ldr	r3, [r0, #28]
 1417 0020 012B     		cmp	r3, #1
 1418 0022 24D0     		beq	.L127
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1419              		.loc 1 1091 0
 1420 0024 FFF7FEFF 		bl	ADC_Enable
 1421              	.LVL109:
 1422              	.L121:
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1423              		.loc 1 1095 0
 1424 0028 0028     		cmp	r0, #0
 1425 002a F0D1     		bne	.L120
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1426              		.loc 1 1100 0
 1427 002c 636C     		ldr	r3, [r4, #68]
 1428 002e 154A     		ldr	r2, .L130
 1429 0030 1A40     		ands	r2, r3
 1430 0032 8023     		movs	r3, #128
 1431 0034 5B00     		lsls	r3, r3, #1
 1432 0036 1343     		orrs	r3, r2
 1433 0038 6364     		str	r3, [r4, #68]
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1434              		.loc 1 1105 0
ARM GAS  /tmp/ccw6ed28.s 			page 66


 1435 003a 0023     		movs	r3, #0
 1436 003c A364     		str	r3, [r4, #72]
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1437              		.loc 1 1110 0
 1438 003e 4022     		movs	r2, #64
 1439 0040 A354     		strb	r3, [r4, r2]
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1440              		.loc 1 1115 0
 1441 0042 2368     		ldr	r3, [r4]
 1442 0044 243A     		subs	r2, r2, #36
 1443 0046 1A60     		str	r2, [r3]
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 1444              		.loc 1 1119 0
 1445 0048 6369     		ldr	r3, [r4, #20]
 1446 004a 082B     		cmp	r3, #8
 1447 004c 11D1     		bne	.L128
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1448              		.loc 1 1122 0
 1449 004e 2268     		ldr	r2, [r4]
 1450 0050 5368     		ldr	r3, [r2, #4]
 1451 0052 0421     		movs	r1, #4
 1452 0054 8B43     		bics	r3, r1
 1453 0056 5360     		str	r3, [r2, #4]
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1454              		.loc 1 1123 0
 1455 0058 2268     		ldr	r2, [r4]
 1456 005a 5368     		ldr	r3, [r2, #4]
 1457 005c 1431     		adds	r1, r1, #20
 1458 005e 0B43     		orrs	r3, r1
 1459 0060 5360     		str	r3, [r2, #4]
 1460              	.L124:
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1461              		.loc 1 1135 0
 1462 0062 2268     		ldr	r2, [r4]
 1463 0064 9368     		ldr	r3, [r2, #8]
 1464 0066 0421     		movs	r1, #4
 1465 0068 0B43     		orrs	r3, r1
 1466 006a 9360     		str	r3, [r2, #8]
 1467 006c CFE7     		b	.L120
 1468              	.LVL110:
 1469              	.L127:
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1470              		.loc 1 1075 0
 1471 006e 0020     		movs	r0, #0
 1472              	.LVL111:
 1473 0070 DAE7     		b	.L121
 1474              	.LVL112:
 1475              	.L128:
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1476              		.loc 1 1127 0
 1477 0072 2268     		ldr	r2, [r4]
 1478 0074 5368     		ldr	r3, [r2, #4]
 1479 0076 1C21     		movs	r1, #28
 1480 0078 0B43     		orrs	r3, r1
 1481 007a 5360     		str	r3, [r2, #4]
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 1482              		.loc 1 1128 0
ARM GAS  /tmp/ccw6ed28.s 			page 67


 1483 007c F1E7     		b	.L124
 1484              	.LVL113:
 1485              	.L126:
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 1486              		.loc 1 1084 0
 1487 007e 0220     		movs	r0, #2
 1488              	.LVL114:
 1489 0080 C5E7     		b	.L120
 1490              	.L131:
 1491 0082 C046     		.align	2
 1492              	.L130:
 1493 0084 FEF0FFFF 		.word	-3842
 1494              		.cfi_endproc
 1495              	.LFE43:
 1497              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1498              		.align	1
 1499              		.global	HAL_ADC_Stop_IT
 1500              		.syntax unified
 1501              		.code	16
 1502              		.thumb_func
 1503              		.fpu softvfp
 1505              	HAL_ADC_Stop_IT:
 1506              	.LFB44:
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1507              		.loc 1 1155 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              	.LVL115:
 1512 0000 10B5     		push	{r4, lr}
 1513              	.LCFI11:
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 4, -8
 1516              		.cfi_offset 14, -4
 1517 0002 0400     		movs	r4, r0
 1518              	.LVL116:
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1519              		.loc 1 1162 0
 1520 0004 4023     		movs	r3, #64
 1521 0006 C35C     		ldrb	r3, [r0, r3]
 1522 0008 012B     		cmp	r3, #1
 1523 000a 01D1     		bne	.L136
 1524 000c 0220     		movs	r0, #2
 1525              	.LVL117:
 1526              	.L133:
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1527              		.loc 1 1192 0
 1528              		@ sp needed
 1529              	.LVL118:
 1530 000e 10BD     		pop	{r4, pc}
 1531              	.LVL119:
 1532              	.L136:
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1533              		.loc 1 1162 0 discriminator 2
 1534 0010 0122     		movs	r2, #1
 1535 0012 4023     		movs	r3, #64
 1536 0014 C254     		strb	r2, [r0, r3]
ARM GAS  /tmp/ccw6ed28.s 			page 68


1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
 1537              		.loc 1 1165 0 discriminator 2
 1538 0016 FFF7FEFF 		bl	ADC_ConversionStop
 1539              	.LVL120:
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1540              		.loc 1 1168 0 discriminator 2
 1541 001a 0028     		cmp	r0, #0
 1542 001c 03D0     		beq	.L137
 1543              	.LVL121:
 1544              	.L134:
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1545              		.loc 1 1188 0
 1546 001e 0022     		movs	r2, #0
 1547 0020 4023     		movs	r3, #64
 1548 0022 E254     		strb	r2, [r4, r3]
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1549              		.loc 1 1191 0
 1550 0024 F3E7     		b	.L133
 1551              	.L137:
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1552              		.loc 1 1172 0
 1553 0026 2268     		ldr	r2, [r4]
 1554 0028 5368     		ldr	r3, [r2, #4]
 1555 002a 1C21     		movs	r1, #28
 1556 002c 8B43     		bics	r3, r1
 1557 002e 5360     		str	r3, [r2, #4]
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1558              		.loc 1 1175 0
 1559 0030 2000     		movs	r0, r4
 1560              	.LVL122:
 1561 0032 FFF7FEFF 		bl	ADC_Disable
 1562              	.LVL123:
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1563              		.loc 1 1178 0
 1564 0036 0028     		cmp	r0, #0
 1565 0038 F1D1     		bne	.L134
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1566              		.loc 1 1181 0
 1567 003a 636C     		ldr	r3, [r4, #68]
 1568 003c 034A     		ldr	r2, .L138
 1569 003e 1340     		ands	r3, r2
 1570 0040 0432     		adds	r2, r2, #4
 1571 0042 FF32     		adds	r2, r2, #255
 1572 0044 1343     		orrs	r3, r2
 1573 0046 6364     		str	r3, [r4, #68]
 1574 0048 E9E7     		b	.L134
 1575              	.L139:
 1576 004a C046     		.align	2
 1577              	.L138:
 1578 004c FEFEFFFF 		.word	-258
 1579              		.cfi_endproc
 1580              	.LFE44:
 1582              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1583              		.align	1
 1584              		.global	HAL_ADC_Start_DMA
 1585              		.syntax unified
 1586              		.code	16
ARM GAS  /tmp/ccw6ed28.s 			page 69


 1587              		.thumb_func
 1588              		.fpu softvfp
 1590              	HAL_ADC_Start_DMA:
 1591              	.LFB45:
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1592              		.loc 1 1208 0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              	.LVL124:
 1597 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1598              	.LCFI12:
 1599              		.cfi_def_cfa_offset 24
 1600              		.cfi_offset 3, -24
 1601              		.cfi_offset 4, -20
 1602              		.cfi_offset 5, -16
 1603              		.cfi_offset 6, -12
 1604              		.cfi_offset 7, -8
 1605              		.cfi_offset 14, -4
 1606 0002 0400     		movs	r4, r0
 1607 0004 0E00     		movs	r6, r1
 1608 0006 1700     		movs	r7, r2
 1609              	.LVL125:
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1610              		.loc 1 1215 0
 1611 0008 0368     		ldr	r3, [r0]
 1612 000a 9B68     		ldr	r3, [r3, #8]
 1613 000c 5B07     		lsls	r3, r3, #29
 1614 000e 02D5     		bpl	.L146
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1615              		.loc 1 1282 0
 1616 0010 0225     		movs	r5, #2
 1617              	.LVL126:
 1618              	.L141:
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1619              		.loc 1 1287 0
 1620 0012 2800     		movs	r0, r5
 1621              		@ sp needed
 1622              	.LVL127:
 1623              	.LVL128:
 1624              	.LVL129:
 1625 0014 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1626              	.LVL130:
 1627              	.L146:
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1628              		.loc 1 1218 0
 1629 0016 4023     		movs	r3, #64
 1630 0018 C35C     		ldrb	r3, [r0, r3]
 1631 001a 012B     		cmp	r3, #1
 1632 001c 3AD0     		beq	.L144
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1633              		.loc 1 1218 0 is_stmt 0 discriminator 2
 1634 001e 0122     		movs	r2, #1
 1635              	.LVL131:
 1636 0020 4023     		movs	r3, #64
 1637 0022 C254     		strb	r2, [r0, r3]
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccw6ed28.s 			page 70


 1638              		.loc 1 1223 0 is_stmt 1 discriminator 2
 1639 0024 C369     		ldr	r3, [r0, #28]
 1640 0026 012B     		cmp	r3, #1
 1641 0028 32D0     		beq	.L145
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1642              		.loc 1 1225 0
 1643 002a FFF7FEFF 		bl	ADC_Enable
 1644              	.LVL132:
 1645 002e 0500     		movs	r5, r0
 1646              	.LVL133:
 1647              	.L142:
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1648              		.loc 1 1229 0
 1649 0030 002D     		cmp	r5, #0
 1650 0032 EED1     		bne	.L141
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1651              		.loc 1 1234 0
 1652 0034 636C     		ldr	r3, [r4, #68]
 1653 0036 184A     		ldr	r2, .L147
 1654 0038 1A40     		ands	r2, r3
 1655 003a 8023     		movs	r3, #128
 1656 003c 5B00     		lsls	r3, r3, #1
 1657 003e 1343     		orrs	r3, r2
 1658 0040 6364     		str	r3, [r4, #68]
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1659              		.loc 1 1239 0
 1660 0042 0023     		movs	r3, #0
 1661 0044 A364     		str	r3, [r4, #72]
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1662              		.loc 1 1244 0
 1663 0046 4022     		movs	r2, #64
 1664 0048 A354     		strb	r3, [r4, r2]
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1665              		.loc 1 1247 0
 1666 004a E36B     		ldr	r3, [r4, #60]
 1667 004c 134A     		ldr	r2, .L147+4
 1668 004e 9A62     		str	r2, [r3, #40]
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1669              		.loc 1 1250 0
 1670 0050 E36B     		ldr	r3, [r4, #60]
 1671 0052 134A     		ldr	r2, .L147+8
 1672 0054 DA62     		str	r2, [r3, #44]
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1673              		.loc 1 1253 0
 1674 0056 E36B     		ldr	r3, [r4, #60]
 1675 0058 124A     		ldr	r2, .L147+12
 1676 005a 1A63     		str	r2, [r3, #48]
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1677              		.loc 1 1262 0
 1678 005c 2368     		ldr	r3, [r4]
 1679 005e 1C22     		movs	r2, #28
 1680 0060 1A60     		str	r2, [r3]
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1681              		.loc 1 1265 0
 1682 0062 2268     		ldr	r2, [r4]
 1683 0064 5368     		ldr	r3, [r2, #4]
 1684 0066 1021     		movs	r1, #16
ARM GAS  /tmp/ccw6ed28.s 			page 71


 1685 0068 0B43     		orrs	r3, r1
 1686 006a 5360     		str	r3, [r2, #4]
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 1687              		.loc 1 1268 0
 1688 006c 2268     		ldr	r2, [r4]
 1689 006e D368     		ldr	r3, [r2, #12]
 1690 0070 0F39     		subs	r1, r1, #15
 1691 0072 0B43     		orrs	r3, r1
 1692 0074 D360     		str	r3, [r2, #12]
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
 1693              		.loc 1 1271 0
 1694 0076 2168     		ldr	r1, [r4]
 1695 0078 4031     		adds	r1, r1, #64
 1696 007a 3B00     		movs	r3, r7
 1697 007c 3200     		movs	r2, r6
 1698 007e E06B     		ldr	r0, [r4, #60]
 1699 0080 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1700              	.LVL134:
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1701              		.loc 1 1277 0
 1702 0084 2268     		ldr	r2, [r4]
 1703 0086 9368     		ldr	r3, [r2, #8]
 1704 0088 0421     		movs	r1, #4
 1705 008a 0B43     		orrs	r3, r1
 1706 008c 9360     		str	r3, [r2, #8]
 1707 008e C0E7     		b	.L141
 1708              	.LVL135:
 1709              	.L145:
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1710              		.loc 1 1209 0
 1711 0090 0025     		movs	r5, #0
 1712 0092 CDE7     		b	.L142
 1713              	.LVL136:
 1714              	.L144:
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1715              		.loc 1 1218 0
 1716 0094 0225     		movs	r5, #2
 1717 0096 BCE7     		b	.L141
 1718              	.L148:
 1719              		.align	2
 1720              	.L147:
 1721 0098 FEF0FFFF 		.word	-3842
 1722 009c 00000000 		.word	ADC_DMAConvCplt
 1723 00a0 00000000 		.word	ADC_DMAHalfConvCplt
 1724 00a4 00000000 		.word	ADC_DMAError
 1725              		.cfi_endproc
 1726              	.LFE45:
 1728              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1729              		.align	1
 1730              		.global	HAL_ADC_Stop_DMA
 1731              		.syntax unified
 1732              		.code	16
 1733              		.thumb_func
 1734              		.fpu softvfp
 1736              	HAL_ADC_Stop_DMA:
 1737              	.LFB46:
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccw6ed28.s 			page 72


 1738              		.loc 1 1297 0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 0
 1741              		@ frame_needed = 0, uses_anonymous_args = 0
 1742              	.LVL137:
 1743 0000 70B5     		push	{r4, r5, r6, lr}
 1744              	.LCFI13:
 1745              		.cfi_def_cfa_offset 16
 1746              		.cfi_offset 4, -16
 1747              		.cfi_offset 5, -12
 1748              		.cfi_offset 6, -8
 1749              		.cfi_offset 14, -4
 1750 0002 0500     		movs	r5, r0
 1751              	.LVL138:
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1752              		.loc 1 1304 0
 1753 0004 4023     		movs	r3, #64
 1754 0006 C35C     		ldrb	r3, [r0, r3]
 1755 0008 012B     		cmp	r3, #1
 1756 000a 02D1     		bne	.L156
 1757 000c 0224     		movs	r4, #2
 1758              	.LVL139:
 1759              	.L150:
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1760              		.loc 1 1357 0
 1761 000e 2000     		movs	r0, r4
 1762              		@ sp needed
 1763              	.LVL140:
 1764 0010 70BD     		pop	{r4, r5, r6, pc}
 1765              	.LVL141:
 1766              	.L156:
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1767              		.loc 1 1304 0 discriminator 2
 1768 0012 0122     		movs	r2, #1
 1769 0014 4023     		movs	r3, #64
 1770 0016 C254     		strb	r2, [r0, r3]
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1771              		.loc 1 1307 0 discriminator 2
 1772 0018 FFF7FEFF 		bl	ADC_ConversionStop
 1773              	.LVL142:
 1774 001c 041E     		subs	r4, r0, #0
 1775              	.LVL143:
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1776              		.loc 1 1310 0 discriminator 2
 1777 001e 03D0     		beq	.L157
 1778              	.LVL144:
 1779              	.L151:
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 1780              		.loc 1 1353 0
 1781 0020 0022     		movs	r2, #0
 1782 0022 4023     		movs	r3, #64
 1783 0024 EA54     		strb	r2, [r5, r3]
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1784              		.loc 1 1356 0
 1785 0026 F2E7     		b	.L150
 1786              	.LVL145:
 1787              	.L157:
ARM GAS  /tmp/ccw6ed28.s 			page 73


1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1788              		.loc 1 1313 0
 1789 0028 2A68     		ldr	r2, [r5]
 1790 002a D368     		ldr	r3, [r2, #12]
 1791 002c 0121     		movs	r1, #1
 1792 002e 8B43     		bics	r3, r1
 1793 0030 D360     		str	r3, [r2, #12]
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1794              		.loc 1 1317 0
 1795 0032 E86B     		ldr	r0, [r5, #60]
 1796              	.LVL146:
 1797 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1798              	.LVL147:
 1799 0038 041E     		subs	r4, r0, #0
 1800              	.LVL148:
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1801              		.loc 1 1320 0
 1802 003a 03D0     		beq	.L152
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1803              		.loc 1 1323 0
 1804 003c 6B6C     		ldr	r3, [r5, #68]
 1805 003e 4022     		movs	r2, #64
 1806 0040 1343     		orrs	r3, r2
 1807 0042 6B64     		str	r3, [r5, #68]
 1808              	.L152:
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 1809              		.loc 1 1327 0
 1810 0044 2A68     		ldr	r2, [r5]
 1811 0046 5368     		ldr	r3, [r2, #4]
 1812 0048 1021     		movs	r1, #16
 1813 004a 8B43     		bics	r3, r1
 1814 004c 5360     		str	r3, [r2, #4]
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1815              		.loc 1 1332 0
 1816 004e 002C     		cmp	r4, #0
 1817 0050 0DD1     		bne	.L153
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1818              		.loc 1 1334 0
 1819 0052 2800     		movs	r0, r5
 1820              	.LVL149:
 1821 0054 FFF7FEFF 		bl	ADC_Disable
 1822              	.LVL150:
 1823 0058 0400     		movs	r4, r0
 1824              	.LVL151:
 1825              	.L154:
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 1826              		.loc 1 1342 0
 1827 005a 002C     		cmp	r4, #0
 1828 005c E0D1     		bne	.L151
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 1829              		.loc 1 1345 0
 1830 005e 6B6C     		ldr	r3, [r5, #68]
 1831 0060 054A     		ldr	r2, .L158
 1832 0062 1340     		ands	r3, r2
 1833 0064 0432     		adds	r2, r2, #4
 1834 0066 FF32     		adds	r2, r2, #255
 1835 0068 1343     		orrs	r3, r2
ARM GAS  /tmp/ccw6ed28.s 			page 74


 1836 006a 6B64     		str	r3, [r5, #68]
 1837 006c D8E7     		b	.L151
 1838              	.LVL152:
 1839              	.L153:
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 1840              		.loc 1 1338 0
 1841 006e 2800     		movs	r0, r5
 1842              	.LVL153:
 1843 0070 FFF7FEFF 		bl	ADC_Disable
 1844              	.LVL154:
 1845 0074 F1E7     		b	.L154
 1846              	.L159:
 1847 0076 C046     		.align	2
 1848              	.L158:
 1849 0078 FEFEFFFF 		.word	-258
 1850              		.cfi_endproc
 1851              	.LFE46:
 1853              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1854              		.align	1
 1855              		.global	HAL_ADC_GetValue
 1856              		.syntax unified
 1857              		.code	16
 1858              		.thumb_func
 1859              		.fpu softvfp
 1861              	HAL_ADC_GetValue:
 1862              	.LFB47:
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 1863              		.loc 1 1379 0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              		@ link register save eliminated.
 1868              	.LVL155:
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1869              		.loc 1 1387 0
 1870 0000 0368     		ldr	r3, [r0]
 1871 0002 186C     		ldr	r0, [r3, #64]
 1872              	.LVL156:
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1873              		.loc 1 1388 0
 1874              		@ sp needed
 1875 0004 7047     		bx	lr
 1876              		.cfi_endproc
 1877              	.LFE47:
 1879              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1880              		.align	1
 1881              		.weak	HAL_ADC_ConvCpltCallback
 1882              		.syntax unified
 1883              		.code	16
 1884              		.thumb_func
 1885              		.fpu softvfp
 1887              	HAL_ADC_ConvCpltCallback:
 1888              	.LFB49:
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1889              		.loc 1 1512 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccw6ed28.s 			page 75


 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 1894              	.LVL157:
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 1895              		.loc 1 1519 0
 1896              		@ sp needed
 1897 0000 7047     		bx	lr
 1898              		.cfi_endproc
 1899              	.LFE49:
 1901              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1902              		.align	1
 1903              		.syntax unified
 1904              		.code	16
 1905              		.thumb_func
 1906              		.fpu softvfp
 1908              	ADC_DMAConvCplt:
 1909              	.LFB60:
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1910              		.loc 1 2084 0
 1911              		.cfi_startproc
 1912              		@ args = 0, pretend = 0, frame = 0
 1913              		@ frame_needed = 0, uses_anonymous_args = 0
 1914              	.LVL158:
 1915 0000 10B5     		push	{r4, lr}
 1916              	.LCFI14:
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 4, -8
 1919              		.cfi_offset 14, -4
2085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1920              		.loc 1 2086 0
 1921 0002 436A     		ldr	r3, [r0, #36]
 1922              	.LVL159:
2087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1923              		.loc 1 2089 0
 1924 0004 5A6C     		ldr	r2, [r3, #68]
 1925 0006 5021     		movs	r1, #80
 1926 0008 1142     		tst	r1, r2
 1927 000a 2BD1     		bne	.L163
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 1928              		.loc 1 2092 0
 1929 000c 596C     		ldr	r1, [r3, #68]
 1930 000e 8022     		movs	r2, #128
 1931 0010 9200     		lsls	r2, r2, #2
 1932 0012 0A43     		orrs	r2, r1
ARM GAS  /tmp/ccw6ed28.s 			page 76


 1933 0014 5A64     		str	r2, [r3, #68]
2093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1934              		.loc 1 2096 0
 1935 0016 1A68     		ldr	r2, [r3]
 1936 0018 D068     		ldr	r0, [r2, #12]
 1937              	.LVL160:
 1938 001a C021     		movs	r1, #192
 1939 001c 0901     		lsls	r1, r1, #4
 1940 001e 0842     		tst	r0, r1
 1941 0020 13D1     		bne	.L164
 1942              		.loc 1 2096 0 is_stmt 0 discriminator 1
 1943 0022 196A     		ldr	r1, [r3, #32]
 1944 0024 0029     		cmp	r1, #0
 1945 0026 10D1     		bne	.L164
2097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
2098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1946              		.loc 1 2100 0 is_stmt 1
 1947 0028 1168     		ldr	r1, [r2]
 1948 002a 0907     		lsls	r1, r1, #28
 1949 002c 0DD5     		bpl	.L164
2101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1950              		.loc 1 2104 0
 1951 002e 9168     		ldr	r1, [r2, #8]
 1952 0030 4907     		lsls	r1, r1, #29
 1953 0032 0ED4     		bmi	.L165
2105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 1954              		.loc 1 2110 0
 1955 0034 5168     		ldr	r1, [r2, #4]
 1956 0036 0C20     		movs	r0, #12
 1957 0038 8143     		bics	r1, r0
 1958 003a 5160     		str	r1, [r2, #4]
2111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
2113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 1959              		.loc 1 2113 0
 1960 003c 5A6C     		ldr	r2, [r3, #68]
 1961 003e 0B49     		ldr	r1, .L167
 1962 0040 0A40     		ands	r2, r1
 1963 0042 0431     		adds	r1, r1, #4
 1964 0044 FF31     		adds	r1, r1, #255
 1965 0046 0A43     		orrs	r2, r1
 1966 0048 5A64     		str	r2, [r3, #68]
 1967              	.L164:
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
ARM GAS  /tmp/ccw6ed28.s 			page 77


2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
2118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
2129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 1968              		.loc 1 2129 0
 1969 004a 1800     		movs	r0, r3
 1970 004c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1971              	.LVL161:
 1972              	.L162:
2130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
2132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Call DMA error callback */
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1973              		.loc 1 2137 0
 1974              		@ sp needed
 1975 0050 10BD     		pop	{r4, pc}
 1976              	.LVL162:
 1977              	.L165:
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 1978              		.loc 1 2120 0
 1979 0052 5A6C     		ldr	r2, [r3, #68]
 1980 0054 2021     		movs	r1, #32
 1981 0056 0A43     		orrs	r2, r1
 1982 0058 5A64     		str	r2, [r3, #68]
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 1983              		.loc 1 2123 0
 1984 005a 9A6C     		ldr	r2, [r3, #72]
 1985 005c 1F39     		subs	r1, r1, #31
 1986 005e 0A43     		orrs	r2, r1
 1987 0060 9A64     		str	r2, [r3, #72]
 1988 0062 F2E7     		b	.L164
 1989              	.LVL163:
 1990              	.L163:
2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 1991              		.loc 1 2134 0
 1992 0064 DB6B     		ldr	r3, [r3, #60]
 1993              	.LVL164:
 1994 0066 1B6B     		ldr	r3, [r3, #48]
 1995 0068 9847     		blx	r3
 1996              	.LVL165:
 1997              		.loc 1 2137 0
 1998 006a F1E7     		b	.L162
ARM GAS  /tmp/ccw6ed28.s 			page 78


 1999              	.L168:
 2000              		.align	2
 2001              	.L167:
 2002 006c FEFEFFFF 		.word	-258
 2003              		.cfi_endproc
 2004              	.LFE60:
 2006              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2007              		.align	1
 2008              		.weak	HAL_ADC_ConvHalfCpltCallback
 2009              		.syntax unified
 2010              		.code	16
 2011              		.thumb_func
 2012              		.fpu softvfp
 2014              	HAL_ADC_ConvHalfCpltCallback:
 2015              	.LFB50:
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2016              		.loc 1 1527 0
 2017              		.cfi_startproc
 2018              		@ args = 0, pretend = 0, frame = 0
 2019              		@ frame_needed = 0, uses_anonymous_args = 0
 2020              		@ link register save eliminated.
 2021              	.LVL166:
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2022              		.loc 1 1534 0
 2023              		@ sp needed
 2024 0000 7047     		bx	lr
 2025              		.cfi_endproc
 2026              	.LFE50:
 2028              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 2029              		.align	1
 2030              		.syntax unified
 2031              		.code	16
 2032              		.thumb_func
 2033              		.fpu softvfp
 2035              	ADC_DMAHalfConvCplt:
 2036              	.LFB61:
2138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2037              		.loc 1 2145 0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 0, uses_anonymous_args = 0
 2041              	.LVL167:
 2042 0000 10B5     		push	{r4, lr}
 2043              	.LCFI15:
 2044              		.cfi_def_cfa_offset 8
 2045              		.cfi_offset 4, -8
 2046              		.cfi_offset 14, -4
2146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2047              		.loc 1 2147 0
ARM GAS  /tmp/ccw6ed28.s 			page 79


 2048 0002 406A     		ldr	r0, [r0, #36]
 2049              	.LVL168:
2148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Half conversion callback */
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 2050              		.loc 1 2150 0
 2051 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 2052              	.LVL169:
2151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2053              		.loc 1 2151 0
 2054              		@ sp needed
 2055 0008 10BD     		pop	{r4, pc}
 2056              		.cfi_endproc
 2057              	.LFE61:
 2059              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2060              		.align	1
 2061              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2062              		.syntax unified
 2063              		.code	16
 2064              		.thumb_func
 2065              		.fpu softvfp
 2067              	HAL_ADC_LevelOutOfWindowCallback:
 2068              	.LFB51:
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2069              		.loc 1 1542 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 0
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
 2073              		@ link register save eliminated.
 2074              	.LVL170:
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2075              		.loc 1 1549 0
 2076              		@ sp needed
 2077 0000 7047     		bx	lr
 2078              		.cfi_endproc
 2079              	.LFE51:
 2081              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2082              		.align	1
 2083              		.weak	HAL_ADC_ErrorCallback
 2084              		.syntax unified
 2085              		.code	16
 2086              		.thumb_func
 2087              		.fpu softvfp
 2089              	HAL_ADC_ErrorCallback:
 2090              	.LFB52:
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 2091              		.loc 1 1558 0
 2092              		.cfi_startproc
 2093              		@ args = 0, pretend = 0, frame = 0
 2094              		@ frame_needed = 0, uses_anonymous_args = 0
 2095              		@ link register save eliminated.
 2096              	.LVL171:
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2097              		.loc 1 1565 0
 2098              		@ sp needed
 2099 0000 7047     		bx	lr
 2100              		.cfi_endproc
ARM GAS  /tmp/ccw6ed28.s 			page 80


 2101              	.LFE52:
 2103              		.section	.text.ADC_DMAError,"ax",%progbits
 2104              		.align	1
 2105              		.syntax unified
 2106              		.code	16
 2107              		.thumb_func
 2108              		.fpu softvfp
 2110              	ADC_DMAError:
 2111              	.LFB62:
2152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA error callback 
2155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2112              		.loc 1 2159 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              	.LVL172:
 2117 0000 10B5     		push	{r4, lr}
 2118              	.LCFI16:
 2119              		.cfi_def_cfa_offset 8
 2120              		.cfi_offset 4, -8
 2121              		.cfi_offset 14, -4
2160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 2122              		.loc 1 2161 0
 2123 0002 406A     		ldr	r0, [r0, #36]
 2124              	.LVL173:
2162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2125              		.loc 1 2164 0
 2126 0004 436C     		ldr	r3, [r0, #68]
 2127 0006 4022     		movs	r2, #64
 2128 0008 1343     		orrs	r3, r2
 2129 000a 4364     		str	r3, [r0, #68]
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 2130              		.loc 1 2167 0
 2131 000c 836C     		ldr	r3, [r0, #72]
 2132 000e 3C3A     		subs	r2, r2, #60
 2133 0010 1343     		orrs	r3, r2
 2134 0012 8364     		str	r3, [r0, #72]
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Error callback */
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 2135              		.loc 1 2170 0
 2136 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2137              	.LVL174:
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2138              		.loc 1 2171 0
 2139              		@ sp needed
ARM GAS  /tmp/ccw6ed28.s 			page 81


 2140 0018 10BD     		pop	{r4, pc}
 2141              		.cfi_endproc
 2142              	.LFE62:
 2144              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2145              		.align	1
 2146              		.global	HAL_ADC_IRQHandler
 2147              		.syntax unified
 2148              		.code	16
 2149              		.thumb_func
 2150              		.fpu softvfp
 2152              	HAL_ADC_IRQHandler:
 2153              	.LFB48:
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2154              		.loc 1 1396 0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              	.LVL175:
 2159 0000 10B5     		push	{r4, lr}
 2160              	.LCFI17:
 2161              		.cfi_def_cfa_offset 8
 2162              		.cfi_offset 4, -8
 2163              		.cfi_offset 14, -4
 2164 0002 0400     		movs	r4, r0
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2165              		.loc 1 1403 0
 2166 0004 0368     		ldr	r3, [r0]
 2167 0006 1A68     		ldr	r2, [r3]
 2168 0008 5207     		lsls	r2, r2, #29
 2169 000a 02D5     		bpl	.L175
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2170              		.loc 1 1403 0 is_stmt 0 discriminator 1
 2171 000c 5A68     		ldr	r2, [r3, #4]
 2172 000e 5207     		lsls	r2, r2, #29
 2173 0010 05D4     		bmi	.L176
 2174              	.L175:
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2175              		.loc 1 1404 0 is_stmt 1 discriminator 3
 2176 0012 1A68     		ldr	r2, [r3]
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 2177              		.loc 1 1403 0 discriminator 3
 2178 0014 1207     		lsls	r2, r2, #28
 2179 0016 29D5     		bpl	.L177
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2180              		.loc 1 1404 0
 2181 0018 5A68     		ldr	r2, [r3, #4]
 2182 001a 1207     		lsls	r2, r2, #28
 2183 001c 26D5     		bpl	.L177
 2184              	.L176:
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2185              		.loc 1 1407 0
 2186 001e 626C     		ldr	r2, [r4, #68]
 2187 0020 D206     		lsls	r2, r2, #27
 2188 0022 04D4     		bmi	.L178
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2189              		.loc 1 1410 0
 2190 0024 616C     		ldr	r1, [r4, #68]
ARM GAS  /tmp/ccw6ed28.s 			page 82


 2191 0026 8022     		movs	r2, #128
 2192 0028 9200     		lsls	r2, r2, #2
 2193 002a 0A43     		orrs	r2, r1
 2194 002c 6264     		str	r2, [r4, #68]
 2195              	.L178:
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2196              		.loc 1 1415 0
 2197 002e D968     		ldr	r1, [r3, #12]
 2198 0030 C022     		movs	r2, #192
 2199 0032 1201     		lsls	r2, r2, #4
 2200 0034 1142     		tst	r1, r2
 2201 0036 13D1     		bne	.L179
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2202              		.loc 1 1415 0 is_stmt 0 discriminator 1
 2203 0038 226A     		ldr	r2, [r4, #32]
 2204 003a 002A     		cmp	r2, #0
 2205 003c 10D1     		bne	.L179
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2206              		.loc 1 1419 0 is_stmt 1
 2207 003e 1A68     		ldr	r2, [r3]
 2208 0040 1207     		lsls	r2, r2, #28
 2209 0042 0DD5     		bpl	.L179
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2210              		.loc 1 1423 0
 2211 0044 9A68     		ldr	r2, [r3, #8]
 2212 0046 5207     		lsls	r2, r2, #29
 2213 0048 31D4     		bmi	.L180
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2214              		.loc 1 1429 0
 2215 004a 5A68     		ldr	r2, [r3, #4]
 2216 004c 0C21     		movs	r1, #12
 2217 004e 8A43     		bics	r2, r1
 2218 0050 5A60     		str	r2, [r3, #4]
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 2219              		.loc 1 1432 0
 2220 0052 636C     		ldr	r3, [r4, #68]
 2221 0054 204A     		ldr	r2, .L186
 2222 0056 1340     		ands	r3, r2
 2223 0058 0432     		adds	r2, r2, #4
 2224 005a FF32     		adds	r2, r2, #255
 2225 005c 1343     		orrs	r3, r2
 2226 005e 6364     		str	r3, [r4, #68]
 2227              	.L179:
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2228              		.loc 1 1451 0
 2229 0060 2000     		movs	r0, r4
 2230              	.LVL176:
 2231 0062 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 2232              	.LVL177:
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2233              		.loc 1 1459 0
 2234 0066 2368     		ldr	r3, [r4]
 2235 0068 0C22     		movs	r2, #12
 2236 006a 1A60     		str	r2, [r3]
 2237              	.L177:
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2238              		.loc 1 1463 0
ARM GAS  /tmp/ccw6ed28.s 			page 83


 2239 006c 2368     		ldr	r3, [r4]
 2240 006e 1A68     		ldr	r2, [r3]
 2241 0070 1206     		lsls	r2, r2, #24
 2242 0072 02D5     		bpl	.L181
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2243              		.loc 1 1463 0 is_stmt 0 discriminator 1
 2244 0074 5B68     		ldr	r3, [r3, #4]
 2245 0076 1B06     		lsls	r3, r3, #24
 2246 0078 22D4     		bmi	.L185
 2247              	.L181:
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2248              		.loc 1 1478 0 is_stmt 1
 2249 007a 2368     		ldr	r3, [r4]
 2250 007c 1A68     		ldr	r2, [r3]
 2251 007e D206     		lsls	r2, r2, #27
 2252 0080 14D5     		bpl	.L174
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2253              		.loc 1 1478 0 is_stmt 0 discriminator 1
 2254 0082 5A68     		ldr	r2, [r3, #4]
 2255 0084 D206     		lsls	r2, r2, #27
 2256 0086 11D5     		bpl	.L174
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2257              		.loc 1 1486 0 is_stmt 1
 2258 0088 626B     		ldr	r2, [r4, #52]
 2259 008a 012A     		cmp	r2, #1
 2260 008c 02D0     		beq	.L183
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2261              		.loc 1 1487 0 discriminator 1
 2262 008e DA68     		ldr	r2, [r3, #12]
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2263              		.loc 1 1486 0 discriminator 1
 2264 0090 D207     		lsls	r2, r2, #31
 2265 0092 08D5     		bpl	.L184
 2266              	.L183:
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2267              		.loc 1 1490 0
 2268 0094 A26C     		ldr	r2, [r4, #72]
 2269 0096 0221     		movs	r1, #2
 2270 0098 0A43     		orrs	r2, r1
 2271 009a A264     		str	r2, [r4, #72]
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2272              		.loc 1 1493 0
 2273 009c 1022     		movs	r2, #16
 2274 009e 1A60     		str	r2, [r3]
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2275              		.loc 1 1496 0
 2276 00a0 2000     		movs	r0, r4
 2277 00a2 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2278              	.LVL178:
 2279              	.L184:
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2280              		.loc 1 1500 0
 2281 00a6 2368     		ldr	r3, [r4]
 2282 00a8 1022     		movs	r2, #16
 2283 00aa 1A60     		str	r2, [r3]
 2284              	.L174:
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  /tmp/ccw6ed28.s 			page 84


 2285              		.loc 1 1503 0
 2286              		@ sp needed
 2287              	.LVL179:
 2288 00ac 10BD     		pop	{r4, pc}
 2289              	.LVL180:
 2290              	.L180:
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2291              		.loc 1 1439 0
 2292 00ae 636C     		ldr	r3, [r4, #68]
 2293 00b0 2022     		movs	r2, #32
 2294 00b2 1343     		orrs	r3, r2
 2295 00b4 6364     		str	r3, [r4, #68]
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 2296              		.loc 1 1442 0
 2297 00b6 A36C     		ldr	r3, [r4, #72]
 2298 00b8 1F3A     		subs	r2, r2, #31
 2299 00ba 1343     		orrs	r3, r2
 2300 00bc A364     		str	r3, [r4, #72]
 2301 00be CFE7     		b	.L179
 2302              	.LVL181:
 2303              	.L185:
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2304              		.loc 1 1466 0
 2305 00c0 626C     		ldr	r2, [r4, #68]
 2306 00c2 8023     		movs	r3, #128
 2307 00c4 5B02     		lsls	r3, r3, #9
 2308 00c6 1343     		orrs	r3, r2
 2309 00c8 6364     		str	r3, [r4, #68]
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2310              		.loc 1 1469 0
 2311 00ca 2000     		movs	r0, r4
 2312 00cc FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 2313              	.LVL182:
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
 2314              		.loc 1 1472 0
 2315 00d0 2368     		ldr	r3, [r4]
 2316 00d2 8022     		movs	r2, #128
 2317 00d4 1A60     		str	r2, [r3]
 2318 00d6 D0E7     		b	.L181
 2319              	.L187:
 2320              		.align	2
 2321              	.L186:
 2322 00d8 FEFEFFFF 		.word	-258
 2323              		.cfi_endproc
 2324              	.LFE48:
 2326              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2327              		.align	1
 2328              		.global	HAL_ADC_ConfigChannel
 2329              		.syntax unified
 2330              		.code	16
 2331              		.thumb_func
 2332              		.fpu softvfp
 2334              	HAL_ADC_ConfigChannel:
 2335              	.LFB53:
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2336              		.loc 1 1612 0
 2337              		.cfi_startproc
ARM GAS  /tmp/ccw6ed28.s 			page 85


 2338              		@ args = 0, pretend = 0, frame = 8
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 2340              	.LVL183:
 2341 0000 30B5     		push	{r4, r5, lr}
 2342              	.LCFI18:
 2343              		.cfi_def_cfa_offset 12
 2344              		.cfi_offset 4, -12
 2345              		.cfi_offset 5, -8
 2346              		.cfi_offset 14, -4
 2347 0002 83B0     		sub	sp, sp, #12
 2348              	.LCFI19:
 2349              		.cfi_def_cfa_offset 24
 2350 0004 0400     		movs	r4, r0
 2351              	.LVL184:
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2352              		.loc 1 1614 0
 2353 0006 0023     		movs	r3, #0
 2354 0008 0193     		str	r3, [sp, #4]
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2355              		.loc 1 1627 0
 2356 000a 4033     		adds	r3, r3, #64
 2357 000c C35C     		ldrb	r3, [r0, r3]
 2358 000e 012B     		cmp	r3, #1
 2359 0010 00D1     		bne	.LCB2225
 2360 0012 8AE0     		b	.L198	@long jump
 2361              	.LCB2225:
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2362              		.loc 1 1627 0 is_stmt 0 discriminator 2
 2363 0014 0122     		movs	r2, #1
 2364 0016 4023     		movs	r3, #64
 2365 0018 C254     		strb	r2, [r0, r3]
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2366              		.loc 1 1635 0 is_stmt 1 discriminator 2
 2367 001a 0368     		ldr	r3, [r0]
 2368 001c 9A68     		ldr	r2, [r3, #8]
 2369 001e 5207     		lsls	r2, r2, #29
 2370 0020 75D4     		bmi	.L190
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2371              		.loc 1 1639 0
 2372 0022 434A     		ldr	r2, .L209
 2373 0024 4868     		ldr	r0, [r1, #4]
 2374              	.LVL185:
 2375 0026 9042     		cmp	r0, r2
 2376 0028 56D0     		beq	.L191
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2377              		.loc 1 1643 0
 2378 002a 9A6A     		ldr	r2, [r3, #40]
 2379 002c 0120     		movs	r0, #1
 2380 002e 0D68     		ldr	r5, [r1]
 2381 0030 A840     		lsls	r0, r0, r5
 2382 0032 0243     		orrs	r2, r0
 2383 0034 9A62     		str	r2, [r3, #40]
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2384              		.loc 1 1650 0
 2385 0036 A36B     		ldr	r3, [r4, #56]
 2386 0038 8022     		movs	r2, #128
 2387 003a 5205     		lsls	r2, r2, #21
ARM GAS  /tmp/ccw6ed28.s 			page 86


 2388 003c 9342     		cmp	r3, r2
 2389 003e 1ED0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2390              		.loc 1 1650 0 is_stmt 0 discriminator 1
 2391 0040 012B     		cmp	r3, #1
 2392 0042 1CD0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2393              		.loc 1 1650 0 discriminator 2
 2394 0044 022B     		cmp	r3, #2
 2395 0046 1AD0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2396              		.loc 1 1650 0 discriminator 3
 2397 0048 032B     		cmp	r3, #3
 2398 004a 18D0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2399              		.loc 1 1650 0 discriminator 4
 2400 004c 042B     		cmp	r3, #4
 2401 004e 16D0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2402              		.loc 1 1650 0 discriminator 5
 2403 0050 052B     		cmp	r3, #5
 2404 0052 14D0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2405              		.loc 1 1650 0 discriminator 6
 2406 0054 062B     		cmp	r3, #6
 2407 0056 12D0     		beq	.L192
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2408              		.loc 1 1650 0 discriminator 7
 2409 0058 072B     		cmp	r3, #7
 2410 005a 10D0     		beq	.L192
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2411              		.loc 1 1654 0 is_stmt 1
 2412 005c 2268     		ldr	r2, [r4]
 2413 005e 5069     		ldr	r0, [r2, #20]
 2414 0060 0723     		movs	r3, #7
 2415 0062 0340     		ands	r3, r0
 2416 0064 8868     		ldr	r0, [r1, #8]
 2417 0066 9842     		cmp	r0, r3
 2418 0068 09D0     		beq	.L192
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
 2419              		.loc 1 1658 0
 2420 006a 5069     		ldr	r0, [r2, #20]
 2421 006c 0723     		movs	r3, #7
 2422 006e 9843     		bics	r0, r3
 2423 0070 5061     		str	r0, [r2, #20]
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
 2424              		.loc 1 1661 0
 2425 0072 2068     		ldr	r0, [r4]
 2426 0074 4269     		ldr	r2, [r0, #20]
 2427 0076 8D68     		ldr	r5, [r1, #8]
 2428 0078 2B40     		ands	r3, r5
 2429 007a 1343     		orrs	r3, r2
 2430 007c 4361     		str	r3, [r0, #20]
 2431              	.L192:
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2432              		.loc 1 1671 0
 2433 007e 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccw6ed28.s 			page 87


 2434 0080 1A00     		movs	r2, r3
 2435 0082 103A     		subs	r2, r2, #16
 2436 0084 022A     		cmp	r2, #2
 2437 0086 4CD8     		bhi	.L199
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2438              		.loc 1 1676 0
 2439 0088 2A4A     		ldr	r2, .L209+4
 2440 008a 1268     		ldr	r2, [r2]
 2441 008c 102B     		cmp	r3, #16
 2442 008e 0ED0     		beq	.L200
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2443              		.loc 1 1676 0 is_stmt 0 discriminator 1
 2444 0090 112B     		cmp	r3, #17
 2445 0092 09D0     		beq	.L206
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2446              		.loc 1 1676 0
 2447 0094 8023     		movs	r3, #128
 2448 0096 5B04     		lsls	r3, r3, #17
 2449              	.L194:
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2450              		.loc 1 1676 0 discriminator 8
 2451 0098 1343     		orrs	r3, r2
 2452 009a 264A     		ldr	r2, .L209+4
 2453 009c 1360     		str	r3, [r2]
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
 2454              		.loc 1 1679 0 is_stmt 1 discriminator 8
 2455 009e 0B68     		ldr	r3, [r1]
 2456 00a0 102B     		cmp	r3, #16
 2457 00a2 07D0     		beq	.L207
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2458              		.loc 1 1613 0
 2459 00a4 0020     		movs	r0, #0
 2460 00a6 37E0     		b	.L193
 2461              	.L206:
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 2462              		.loc 1 1676 0
 2463 00a8 8023     		movs	r3, #128
 2464 00aa DB03     		lsls	r3, r3, #15
 2465 00ac F4E7     		b	.L194
 2466              	.L200:
 2467 00ae 8023     		movs	r3, #128
 2468 00b0 1B04     		lsls	r3, r3, #16
 2469 00b2 F1E7     		b	.L194
 2470              	.L207:
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2471              		.loc 1 1683 0
 2472 00b4 204B     		ldr	r3, .L209+8
 2473 00b6 1868     		ldr	r0, [r3]
 2474 00b8 2049     		ldr	r1, .L209+12
 2475              	.LVL186:
 2476 00ba FFF7FEFF 		bl	__aeabi_uidiv
 2477              	.LVL187:
 2478 00be 8300     		lsls	r3, r0, #2
 2479 00c0 1818     		adds	r0, r3, r0
 2480 00c2 4300     		lsls	r3, r0, #1
 2481 00c4 0193     		str	r3, [sp, #4]
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
ARM GAS  /tmp/ccw6ed28.s 			page 88


 2482              		.loc 1 1684 0
 2483 00c6 02E0     		b	.L195
 2484              	.L196:
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
 2485              		.loc 1 1686 0
 2486 00c8 019B     		ldr	r3, [sp, #4]
 2487 00ca 013B     		subs	r3, r3, #1
 2488 00cc 0193     		str	r3, [sp, #4]
 2489              	.L195:
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
 2490              		.loc 1 1684 0
 2491 00ce 019B     		ldr	r3, [sp, #4]
 2492 00d0 002B     		cmp	r3, #0
 2493 00d2 F9D1     		bne	.L196
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2494              		.loc 1 1613 0
 2495 00d4 0020     		movs	r0, #0
 2496 00d6 1FE0     		b	.L193
 2497              	.LVL188:
 2498              	.L191:
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 2499              		.loc 1 1695 0
 2500 00d8 9A6A     		ldr	r2, [r3, #40]
 2501 00da 0120     		movs	r0, #1
 2502 00dc 0D68     		ldr	r5, [r1]
 2503 00de A840     		lsls	r0, r0, r5
 2504 00e0 8243     		bics	r2, r0
 2505 00e2 9A62     		str	r2, [r3, #40]
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 2506              		.loc 1 1700 0
 2507 00e4 0B68     		ldr	r3, [r1]
 2508 00e6 1A00     		movs	r2, r3
 2509 00e8 103A     		subs	r2, r2, #16
 2510 00ea 022A     		cmp	r2, #2
 2511 00ec 1BD8     		bhi	.L203
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2512              		.loc 1 1705 0
 2513 00ee 114A     		ldr	r2, .L209+4
 2514 00f0 1268     		ldr	r2, [r2]
 2515 00f2 102B     		cmp	r3, #16
 2516 00f4 09D0     		beq	.L204
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2517              		.loc 1 1705 0 is_stmt 0 discriminator 1
 2518 00f6 112B     		cmp	r3, #17
 2519 00f8 05D0     		beq	.L208
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2520              		.loc 1 1705 0
 2521 00fa 114B     		ldr	r3, .L209+16
 2522              	.L197:
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2523              		.loc 1 1705 0 discriminator 8
 2524 00fc 1340     		ands	r3, r2
 2525 00fe 0D4A     		ldr	r2, .L209+4
 2526 0100 1360     		str	r3, [r2]
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2527              		.loc 1 1613 0 is_stmt 1 discriminator 8
 2528 0102 0020     		movs	r0, #0
ARM GAS  /tmp/ccw6ed28.s 			page 89


 2529 0104 08E0     		b	.L193
 2530              	.L208:
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 2531              		.loc 1 1705 0
 2532 0106 0F4B     		ldr	r3, .L209+20
 2533 0108 F8E7     		b	.L197
 2534              	.L204:
 2535 010a 0F4B     		ldr	r3, .L209+24
 2536 010c F6E7     		b	.L197
 2537              	.LVL189:
 2538              	.L190:
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2539              		.loc 1 1717 0
 2540 010e 436C     		ldr	r3, [r0, #68]
 2541 0110 2022     		movs	r2, #32
 2542 0112 1343     		orrs	r3, r2
 2543 0114 4364     		str	r3, [r0, #68]
 2544              	.LVL190:
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2545              		.loc 1 1719 0
 2546 0116 0120     		movs	r0, #1
 2547              	.LVL191:
 2548              	.L193:
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2549              		.loc 1 1723 0
 2550 0118 0022     		movs	r2, #0
 2551 011a 4023     		movs	r3, #64
 2552 011c E254     		strb	r2, [r4, r3]
 2553              	.LVL192:
 2554              	.L189:
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2555              		.loc 1 1727 0
 2556 011e 03B0     		add	sp, sp, #12
 2557              		@ sp needed
 2558              	.LVL193:
 2559 0120 30BD     		pop	{r4, r5, pc}
 2560              	.LVL194:
 2561              	.L199:
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2562              		.loc 1 1613 0
 2563 0122 0020     		movs	r0, #0
 2564 0124 F8E7     		b	.L193
 2565              	.L203:
 2566 0126 0020     		movs	r0, #0
 2567 0128 F6E7     		b	.L193
 2568              	.LVL195:
 2569              	.L198:
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2570              		.loc 1 1627 0
 2571 012a 0220     		movs	r0, #2
 2572              	.LVL196:
 2573 012c F7E7     		b	.L189
 2574              	.L210:
 2575 012e C046     		.align	2
 2576              	.L209:
 2577 0130 01100000 		.word	4097
 2578 0134 08270140 		.word	1073817352
ARM GAS  /tmp/ccw6ed28.s 			page 90


 2579 0138 00000000 		.word	SystemCoreClock
 2580 013c 40420F00 		.word	1000000
 2581 0140 FFFFFFFE 		.word	-16777217
 2582 0144 FFFFBFFF 		.word	-4194305
 2583 0148 FFFF7FFF 		.word	-8388609
 2584              		.cfi_endproc
 2585              	.LFE53:
 2587              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2588              		.align	1
 2589              		.global	HAL_ADC_AnalogWDGConfig
 2590              		.syntax unified
 2591              		.code	16
 2592              		.thumb_func
 2593              		.fpu softvfp
 2595              	HAL_ADC_AnalogWDGConfig:
 2596              	.LFB54:
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2597              		.loc 1 1745 0
 2598              		.cfi_startproc
 2599              		@ args = 0, pretend = 0, frame = 0
 2600              		@ frame_needed = 0, uses_anonymous_args = 0
 2601              	.LVL197:
 2602 0000 70B5     		push	{r4, r5, r6, lr}
 2603              	.LCFI20:
 2604              		.cfi_def_cfa_offset 16
 2605              		.cfi_offset 4, -16
 2606              		.cfi_offset 5, -12
 2607              		.cfi_offset 6, -8
 2608              		.cfi_offset 14, -4
 2609              	.LVL198:
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2610              		.loc 1 1766 0
 2611 0002 4023     		movs	r3, #64
 2612 0004 C35C     		ldrb	r3, [r0, r3]
 2613 0006 012B     		cmp	r3, #1
 2614 0008 48D0     		beq	.L216
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2615              		.loc 1 1766 0 is_stmt 0 discriminator 2
 2616 000a 0122     		movs	r2, #1
 2617 000c 4023     		movs	r3, #64
 2618 000e C254     		strb	r2, [r0, r3]
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 2619              		.loc 1 1773 0 is_stmt 1 discriminator 2
 2620 0010 0368     		ldr	r3, [r0]
 2621 0012 9A68     		ldr	r2, [r3, #8]
 2622 0014 5207     		lsls	r2, r2, #29
 2623 0016 37D4     		bmi	.L213
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
 2624              		.loc 1 1780 0
 2625 0018 DA68     		ldr	r2, [r3, #12]
 2626 001a 214C     		ldr	r4, .L218
 2627 001c 2240     		ands	r2, r4
 2628 001e DA60     		str	r2, [r3, #12]
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2629              		.loc 1 1784 0
 2630 0020 0468     		ldr	r4, [r0]
 2631 0022 E368     		ldr	r3, [r4, #12]
ARM GAS  /tmp/ccw6ed28.s 			page 91


1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2632              		.loc 1 1785 0
 2633 0024 4A68     		ldr	r2, [r1, #4]
 2634 0026 9206     		lsls	r2, r2, #26
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2635              		.loc 1 1784 0
 2636 0028 0D68     		ldr	r5, [r1]
 2637 002a 2A43     		orrs	r2, r5
 2638 002c 1343     		orrs	r3, r2
 2639 002e E360     		str	r3, [r4, #12]
1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2640              		.loc 1 1789 0
 2641 0030 0568     		ldr	r5, [r0]
 2642 0032 EB68     		ldr	r3, [r5, #12]
 2643 0034 DB08     		lsrs	r3, r3, #3
 2644 0036 0322     		movs	r2, #3
 2645 0038 1340     		ands	r3, r2
 2646 003a 5B00     		lsls	r3, r3, #1
 2647 003c CC68     		ldr	r4, [r1, #12]
 2648 003e 9C40     		lsls	r4, r4, r3
 2649              	.LVL199:
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2650              		.loc 1 1790 0
 2651 0040 EB68     		ldr	r3, [r5, #12]
 2652 0042 DB08     		lsrs	r3, r3, #3
 2653 0044 1A40     		ands	r2, r3
 2654 0046 5200     		lsls	r2, r2, #1
 2655 0048 0B69     		ldr	r3, [r1, #16]
 2656 004a 9340     		lsls	r3, r3, r2
 2657              	.LVL200:
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2658              		.loc 1 1793 0
 2659 004c 2A6A     		ldr	r2, [r5, #32]
 2660 004e 154E     		ldr	r6, .L218+4
 2661 0050 3240     		ands	r2, r6
 2662 0052 2A62     		str	r2, [r5, #32]
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
 2663              		.loc 1 1794 0
 2664 0054 0568     		ldr	r5, [r0]
 2665 0056 2A6A     		ldr	r2, [r5, #32]
 2666 0058 2404     		lsls	r4, r4, #16
 2667              	.LVL201:
 2668 005a 2343     		orrs	r3, r4
 2669              	.LVL202:
 2670 005c 1343     		orrs	r3, r2
 2671 005e 2B62     		str	r3, [r5, #32]
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2672              		.loc 1 1800 0
 2673 0060 0368     		ldr	r3, [r0]
 2674 0062 8022     		movs	r2, #128
 2675 0064 1A60     		str	r2, [r3]
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 2676              		.loc 1 1803 0
 2677 0066 8B68     		ldr	r3, [r1, #8]
 2678 0068 012B     		cmp	r3, #1
 2679 006a 06D0     		beq	.L217
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
ARM GAS  /tmp/ccw6ed28.s 			page 92


 2680              		.loc 1 1811 0
 2681 006c 0268     		ldr	r2, [r0]
 2682 006e 5368     		ldr	r3, [r2, #4]
 2683 0070 8021     		movs	r1, #128
 2684              	.LVL203:
 2685 0072 8B43     		bics	r3, r1
 2686 0074 5360     		str	r3, [r2, #4]
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2687              		.loc 1 1746 0
 2688 0076 0023     		movs	r3, #0
 2689 0078 0BE0     		b	.L215
 2690              	.LVL204:
 2691              	.L217:
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 2692              		.loc 1 1806 0
 2693 007a 0268     		ldr	r2, [r0]
 2694 007c 5368     		ldr	r3, [r2, #4]
 2695 007e 8021     		movs	r1, #128
 2696              	.LVL205:
 2697 0080 0B43     		orrs	r3, r1
 2698 0082 5360     		str	r3, [r2, #4]
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2699              		.loc 1 1746 0
 2700 0084 0023     		movs	r3, #0
 2701 0086 04E0     		b	.L215
 2702              	.LVL206:
 2703              	.L213:
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 2704              		.loc 1 1820 0
 2705 0088 436C     		ldr	r3, [r0, #68]
 2706 008a 2022     		movs	r2, #32
 2707 008c 1343     		orrs	r3, r2
 2708 008e 4364     		str	r3, [r0, #68]
 2709              	.LVL207:
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 2710              		.loc 1 1822 0
 2711 0090 0123     		movs	r3, #1
 2712              	.LVL208:
 2713              	.L215:
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2714              		.loc 1 1827 0
 2715 0092 0021     		movs	r1, #0
 2716 0094 4022     		movs	r2, #64
 2717 0096 8154     		strb	r1, [r0, r2]
 2718              	.LVL209:
 2719              	.L212:
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2720              		.loc 1 1831 0
 2721 0098 1800     		movs	r0, r3
 2722              	.LVL210:
 2723              		@ sp needed
 2724 009a 70BD     		pop	{r4, r5, r6, pc}
 2725              	.LVL211:
 2726              	.L216:
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 2727              		.loc 1 1766 0
 2728 009c 0223     		movs	r3, #2
ARM GAS  /tmp/ccw6ed28.s 			page 93


 2729 009e FBE7     		b	.L212
 2730              	.L219:
 2731              		.align	2
 2732              	.L218:
 2733 00a0 FFFF3F83 		.word	-2092957697
 2734 00a4 00F000F0 		.word	-268374016
 2735              		.cfi_endproc
 2736              	.LFE54:
 2738              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2739              		.align	1
 2740              		.global	HAL_ADC_GetState
 2741              		.syntax unified
 2742              		.code	16
 2743              		.thumb_func
 2744              		.fpu softvfp
 2746              	HAL_ADC_GetState:
 2747              	.LFB55:
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 2748              		.loc 1 1867 0
 2749              		.cfi_startproc
 2750              		@ args = 0, pretend = 0, frame = 0
 2751              		@ frame_needed = 0, uses_anonymous_args = 0
 2752              		@ link register save eliminated.
 2753              	.LVL212:
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2754              		.loc 1 1872 0
 2755 0000 406C     		ldr	r0, [r0, #68]
 2756              	.LVL213:
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2757              		.loc 1 1873 0
 2758              		@ sp needed
 2759 0002 7047     		bx	lr
 2760              		.cfi_endproc
 2761              	.LFE55:
 2763              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2764              		.align	1
 2765              		.global	HAL_ADC_GetError
 2766              		.syntax unified
 2767              		.code	16
 2768              		.thumb_func
 2769              		.fpu softvfp
 2771              	HAL_ADC_GetError:
 2772              	.LFB56:
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
 2773              		.loc 1 1881 0
 2774              		.cfi_startproc
 2775              		@ args = 0, pretend = 0, frame = 0
 2776              		@ frame_needed = 0, uses_anonymous_args = 0
 2777              		@ link register save eliminated.
 2778              	.LVL214:
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2779              		.loc 1 1882 0
 2780 0000 806C     		ldr	r0, [r0, #72]
 2781              	.LVL215:
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 2782              		.loc 1 1883 0
 2783              		@ sp needed
ARM GAS  /tmp/ccw6ed28.s 			page 94


 2784 0002 7047     		bx	lr
 2785              		.cfi_endproc
 2786              	.LFE56:
 2788              		.text
 2789              	.Letext0:
 2790              		.file 2 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machin
 2791              		.file 3 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_s
 2792              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2793              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 2794              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2795              		.file 7 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lo
 2796              		.file 8 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_t
 2797              		.file 9 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/
 2798              		.file 10 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/r
 2799              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2800              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2801              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2802              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccw6ed28.s 			page 95


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f0xx_hal_adc.c
     /tmp/ccw6ed28.s:16     .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccw6ed28.s:22     .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccw6ed28.s:106    .text.ADC_Disable:0000000000000000 $t
     /tmp/ccw6ed28.s:112    .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccw6ed28.s:236    .text.ADC_Enable:0000000000000000 $t
     /tmp/ccw6ed28.s:242    .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccw6ed28.s:386    .text.ADC_Enable:00000000000000a8 $d
     /tmp/ccw6ed28.s:393    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccw6ed28.s:400    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccw6ed28.s:415    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccw6ed28.s:422    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccw6ed28.s:732    .text.HAL_ADC_Init:0000000000000180 $d
     /tmp/ccw6ed28.s:739    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccw6ed28.s:746    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccw6ed28.s:761    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccw6ed28.s:768    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccw6ed28.s:893    .text.HAL_ADC_DeInit:0000000000000090 $d
     /tmp/ccw6ed28.s:901    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccw6ed28.s:908    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccw6ed28.s:997    .text.HAL_ADC_Start:000000000000005c $d
     /tmp/ccw6ed28.s:1002   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccw6ed28.s:1009   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccw6ed28.s:1076   .text.HAL_ADC_Stop:0000000000000040 $d
     /tmp/ccw6ed28.s:1081   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccw6ed28.s:1088   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccw6ed28.s:1247   .text.HAL_ADC_PollForConversion:00000000000000bc $d
     /tmp/ccw6ed28.s:1252   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccw6ed28.s:1259   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccw6ed28.s:1370   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccw6ed28.s:1377   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccw6ed28.s:1493   .text.HAL_ADC_Start_IT:0000000000000084 $d
     /tmp/ccw6ed28.s:1498   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccw6ed28.s:1505   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccw6ed28.s:1578   .text.HAL_ADC_Stop_IT:000000000000004c $d
     /tmp/ccw6ed28.s:1583   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccw6ed28.s:1590   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccw6ed28.s:1721   .text.HAL_ADC_Start_DMA:0000000000000098 $d
     /tmp/ccw6ed28.s:1908   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccw6ed28.s:2035   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccw6ed28.s:2110   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccw6ed28.s:1729   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccw6ed28.s:1736   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccw6ed28.s:1849   .text.HAL_ADC_Stop_DMA:0000000000000078 $d
     /tmp/ccw6ed28.s:1854   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccw6ed28.s:1861   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccw6ed28.s:1880   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccw6ed28.s:1887   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccw6ed28.s:1902   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccw6ed28.s:2002   .text.ADC_DMAConvCplt:000000000000006c $d
     /tmp/ccw6ed28.s:2007   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccw6ed28.s:2014   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccw6ed28.s:2029   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccw6ed28.s:2060   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccw6ed28.s:2067   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccw6ed28.s:2082   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
ARM GAS  /tmp/ccw6ed28.s 			page 96


     /tmp/ccw6ed28.s:2089   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccw6ed28.s:2104   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccw6ed28.s:2145   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccw6ed28.s:2152   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccw6ed28.s:2322   .text.HAL_ADC_IRQHandler:00000000000000d8 $d
     /tmp/ccw6ed28.s:2327   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccw6ed28.s:2334   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccw6ed28.s:2577   .text.HAL_ADC_ConfigChannel:0000000000000130 $d
     /tmp/ccw6ed28.s:2588   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccw6ed28.s:2595   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccw6ed28.s:2733   .text.HAL_ADC_AnalogWDGConfig:00000000000000a0 $d
     /tmp/ccw6ed28.s:2739   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccw6ed28.s:2746   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccw6ed28.s:2764   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccw6ed28.s:2771   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
__aeabi_uidiv
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
