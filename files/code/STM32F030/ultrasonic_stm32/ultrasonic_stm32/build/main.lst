ARM GAS  /tmp/ccpxeAZZ.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB46:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccpxeAZZ.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f0xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** ADC_HandleTypeDef hadc;
  49:Src/main.c    **** 
  50:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  51:Src/main.c    **** 
  52:Src/main.c    **** RTC_HandleTypeDef hrtc;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim1;
  55:Src/main.c    **** TIM_HandleTypeDef htim14;
  56:Src/main.c    **** TIM_HandleTypeDef htim16;
  57:Src/main.c    **** 
  58:Src/main.c    **** UART_HandleTypeDef huart1;
  59:Src/main.c    **** 
  60:Src/main.c    **** WWDG_HandleTypeDef hwwdg;
  61:Src/main.c    **** 
  62:Src/main.c    **** /* USER CODE BEGIN PV */
  63:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PV */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** void SystemClock_Config(void);
  69:Src/main.c    **** static void MX_GPIO_Init(void);
  70:Src/main.c    **** static void MX_ADC_Init(void);
  71:Src/main.c    **** static void MX_I2C1_Init(void);
  72:Src/main.c    **** static void MX_RTC_Init(void);
  73:Src/main.c    **** static void MX_TIM1_Init(void);
  74:Src/main.c    **** static void MX_TIM14_Init(void);
  75:Src/main.c    **** static void MX_TIM16_Init(void);
  76:Src/main.c    **** static void MX_USART1_UART_Init(void);
  77:Src/main.c    **** static void MX_WWDG_Init(void);
  78:Src/main.c    **** 
  79:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  80:Src/main.c    **** 
  81:Src/main.c    **** 
  82:Src/main.c    **** 
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE BEGIN PFP */
  85:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE END PFP */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE BEGIN 0 */
  90:Src/main.c    **** #ifdef __GNUC__
  91:Src/main.c    ****   /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
ARM GAS  /tmp/ccpxeAZZ.s 			page 3


  92:Src/main.c    ****      set to 'Yes') calls __io_putchar() */
  93:Src/main.c    ****   #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
  94:Src/main.c    **** #else
  95:Src/main.c    ****   #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  96:Src/main.c    **** #endif /* __GNUC__ */
  97:Src/main.c    **** /**
  98:Src/main.c    ****   * @brief  Retargets the C library printf function to the USART.
  99:Src/main.c    ****   * @param  None
 100:Src/main.c    ****   * @retval None
 101:Src/main.c    ****   */
 102:Src/main.c    **** PUTCHAR_PROTOTYPE
 103:Src/main.c    **** {
 104:Src/main.c    ****   /* Place your implementation of fputc here */
 105:Src/main.c    ****   /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
 106:Src/main.c    ****   HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 107:Src/main.c    **** 
 108:Src/main.c    ****   return ch;
 109:Src/main.c    **** }
 110:Src/main.c    **** /* USER CODE END 0 */
 111:Src/main.c    **** 
 112:Src/main.c    **** 
 113:Src/main.c    **** int main(void)
 114:Src/main.c    **** {
 115:Src/main.c    ****   /* USER CODE BEGIN 1 */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE END 1 */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 122:Src/main.c    ****   HAL_Init();
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE BEGIN Init */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE END Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* Configure the system clock */
 129:Src/main.c    ****   SystemClock_Config();
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE END SysInit */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* Initialize all configured peripherals */
 136:Src/main.c    ****   MX_GPIO_Init();
 137:Src/main.c    ****   MX_ADC_Init();
 138:Src/main.c    ****   MX_I2C1_Init();
 139:Src/main.c    ****   MX_RTC_Init();
 140:Src/main.c    ****   MX_TIM1_Init();
 141:Src/main.c    ****   MX_TIM14_Init();
 142:Src/main.c    ****   MX_TIM16_Init();
 143:Src/main.c    ****   MX_USART1_UART_Init();
 144:Src/main.c    ****   MX_WWDG_Init();
 145:Src/main.c    ****   /* USER CODE BEGIN 2 */
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE END 2 */
 148:Src/main.c    **** 
ARM GAS  /tmp/ccpxeAZZ.s 			page 4


 149:Src/main.c    ****   /* Infinite loop */
 150:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 151:Src/main.c    ****   while (1)
 152:Src/main.c    ****   {
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* USER CODE END WHILE */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* USER CODE BEGIN 3 */
 157:Src/main.c    **** 
 158:Src/main.c    ****   }
 159:Src/main.c    ****   /* USER CODE END 3 */
 160:Src/main.c    **** 
 161:Src/main.c    **** }
 162:Src/main.c    **** 
 163:Src/main.c    **** /**
 164:Src/main.c    ****   * @brief System Clock Configuration
 165:Src/main.c    ****   * @retval None
 166:Src/main.c    ****   */
 167:Src/main.c    **** void SystemClock_Config(void)
 168:Src/main.c    **** {
 169:Src/main.c    **** 
 170:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 171:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 172:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 173:Src/main.c    **** 
 174:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 175:Src/main.c    ****     */
 176:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 177:Src/main.c    ****                               |RCC_OSCILLATORTYPE_LSI;
 178:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 179:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 180:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 181:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 182:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 186:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 187:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188:Src/main.c    ****   {
 189:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 190:Src/main.c    ****   }
 191:Src/main.c    **** 
 192:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 193:Src/main.c    ****     */
 194:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 195:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 196:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 197:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 198:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 199:Src/main.c    **** 
 200:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 201:Src/main.c    ****   {
 202:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 203:Src/main.c    ****   }
 204:Src/main.c    **** 
 205:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
ARM GAS  /tmp/ccpxeAZZ.s 			page 5


 206:Src/main.c    ****                               |RCC_PERIPHCLK_RTC;
 207:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 208:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 209:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 210:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 211:Src/main.c    ****   {
 212:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 213:Src/main.c    ****   }
 214:Src/main.c    **** 
 215:Src/main.c    ****     /**Configure the Systick interrupt time
 216:Src/main.c    ****     */
 217:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 218:Src/main.c    **** 
 219:Src/main.c    ****     /**Configure the Systick
 220:Src/main.c    ****     */
 221:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 222:Src/main.c    **** 
 223:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 224:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 225:Src/main.c    **** }
 226:Src/main.c    **** 
 227:Src/main.c    **** /* ADC init function */
 228:Src/main.c    **** static void MX_ADC_Init(void)
 229:Src/main.c    **** {
 230:Src/main.c    **** 
 231:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 232:Src/main.c    **** 
 233:Src/main.c    ****     /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of co
 234:Src/main.c    ****     */
 235:Src/main.c    ****   hadc.Instance = ADC1;
 236:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 237:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 238:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 239:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 240:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 241:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 242:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 243:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 244:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 245:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 246:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 247:Src/main.c    ****   hadc.Init.DMAContinuousRequests = DISABLE;
 248:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 249:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 250:Src/main.c    ****   {
 251:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 252:Src/main.c    ****   }
 253:Src/main.c    **** 
 254:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 255:Src/main.c    ****     */
 256:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 257:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 258:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 259:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 260:Src/main.c    ****   {
 261:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 262:Src/main.c    ****   }
ARM GAS  /tmp/ccpxeAZZ.s 			page 6


 263:Src/main.c    **** 
 264:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 265:Src/main.c    ****     */
 266:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 267:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 268:Src/main.c    ****   {
 269:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 270:Src/main.c    ****   }
 271:Src/main.c    **** 
 272:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 273:Src/main.c    ****     */
 274:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 275:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 276:Src/main.c    ****   {
 277:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 278:Src/main.c    ****   }
 279:Src/main.c    **** 
 280:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 281:Src/main.c    ****     */
 282:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_3;
 283:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 286:Src/main.c    ****   }
 287:Src/main.c    **** 
 288:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 289:Src/main.c    ****     */
 290:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_4;
 291:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 294:Src/main.c    ****   }
 295:Src/main.c    **** 
 296:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 297:Src/main.c    ****     */
 298:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 299:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 300:Src/main.c    ****   {
 301:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 302:Src/main.c    ****   }
 303:Src/main.c    **** 
 304:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 305:Src/main.c    ****     */
 306:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 307:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 308:Src/main.c    ****   {
 309:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 310:Src/main.c    ****   }
 311:Src/main.c    **** 
 312:Src/main.c    ****     /**Configure for the selected ADC regular channel to be converted.
 313:Src/main.c    ****     */
 314:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_VREFINT;
 315:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 316:Src/main.c    ****   {
 317:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 318:Src/main.c    ****   }
 319:Src/main.c    **** 
ARM GAS  /tmp/ccpxeAZZ.s 			page 7


 320:Src/main.c    **** }
 321:Src/main.c    **** 
 322:Src/main.c    **** /* I2C1 init function */
 323:Src/main.c    **** static void MX_I2C1_Init(void)
 324:Src/main.c    **** {
 325:Src/main.c    **** 
 326:Src/main.c    ****   hi2c1.Instance = I2C1;
 327:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 328:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 329:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 330:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 331:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 332:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 333:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 334:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 335:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 338:Src/main.c    ****   }
 339:Src/main.c    **** 
 340:Src/main.c    ****     /**Configure Analogue filter
 341:Src/main.c    ****     */
 342:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 343:Src/main.c    ****   {
 344:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 345:Src/main.c    ****   }
 346:Src/main.c    **** 
 347:Src/main.c    ****     /**Configure Digital filter
 348:Src/main.c    ****     */
 349:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 350:Src/main.c    ****   {
 351:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 352:Src/main.c    ****   }
 353:Src/main.c    **** 
 354:Src/main.c    **** }
 355:Src/main.c    **** 
 356:Src/main.c    **** /* RTC init function */
 357:Src/main.c    **** static void MX_RTC_Init(void)
 358:Src/main.c    **** {
 359:Src/main.c    **** 
 360:Src/main.c    ****     /**Initialize RTC Only
 361:Src/main.c    ****     */
 362:Src/main.c    ****   hrtc.Instance = RTC;
 363:Src/main.c    ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 364:Src/main.c    ****   hrtc.Init.AsynchPrediv = 127;
 365:Src/main.c    ****   hrtc.Init.SynchPrediv = 255;
 366:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 367:Src/main.c    ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 368:Src/main.c    ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 369:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 370:Src/main.c    ****   {
 371:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 372:Src/main.c    ****   }
 373:Src/main.c    **** 
 374:Src/main.c    **** }
 375:Src/main.c    **** 
 376:Src/main.c    **** /* TIM1 init function */
ARM GAS  /tmp/ccpxeAZZ.s 			page 8


 377:Src/main.c    **** static void MX_TIM1_Init(void)
 378:Src/main.c    **** {
 379:Src/main.c    **** 
 380:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 381:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 382:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 383:Src/main.c    **** 
 384:Src/main.c    ****   htim1.Instance = TIM1;
 385:Src/main.c    ****   htim1.Init.Prescaler = 1;
 386:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 387:Src/main.c    ****   htim1.Init.Period = 255;
 388:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 389:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 390:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 391:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 392:Src/main.c    ****   {
 393:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 394:Src/main.c    ****   }
 395:Src/main.c    **** 
 396:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 397:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 398:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 399:Src/main.c    ****   {
 400:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 401:Src/main.c    ****   }
 402:Src/main.c    **** 
 403:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 404:Src/main.c    ****   sConfigOC.Pulse = 0;
 405:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 406:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 407:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 408:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 409:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 410:Src/main.c    ****   {
 411:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 412:Src/main.c    ****   }
 413:Src/main.c    **** 
 414:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 415:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 416:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 417:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 418:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 419:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 420:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 421:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 422:Src/main.c    ****   {
 423:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 424:Src/main.c    ****   }
 425:Src/main.c    **** 
 426:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 427:Src/main.c    **** 
 428:Src/main.c    **** }
 429:Src/main.c    **** 
 430:Src/main.c    **** /* TIM14 init function */
 431:Src/main.c    **** static void MX_TIM14_Init(void)
 432:Src/main.c    **** {
 433:Src/main.c    **** 
ARM GAS  /tmp/ccpxeAZZ.s 			page 9


 434:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 435:Src/main.c    **** 
 436:Src/main.c    ****   htim14.Instance = TIM14;
 437:Src/main.c    ****   htim14.Init.Prescaler = 0;
 438:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 439:Src/main.c    ****   htim14.Init.Period = 0;
 440:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 441:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 442:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 443:Src/main.c    ****   {
 444:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 445:Src/main.c    ****   }
 446:Src/main.c    **** 
 447:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 448:Src/main.c    ****   {
 449:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 450:Src/main.c    ****   }
 451:Src/main.c    **** 
 452:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 453:Src/main.c    ****   sConfigOC.Pulse = 0;
 454:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 455:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 456:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 457:Src/main.c    ****   {
 458:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 459:Src/main.c    ****   }
 460:Src/main.c    **** 
 461:Src/main.c    ****   HAL_TIM_MspPostInit(&htim14);
 462:Src/main.c    **** 
 463:Src/main.c    **** }
 464:Src/main.c    **** 
 465:Src/main.c    **** /* TIM16 init function */
 466:Src/main.c    **** static void MX_TIM16_Init(void)
 467:Src/main.c    **** {
 468:Src/main.c    **** 
 469:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 470:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 471:Src/main.c    **** 
 472:Src/main.c    ****   htim16.Instance = TIM16;
 473:Src/main.c    ****   htim16.Init.Prescaler = 0;
 474:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 475:Src/main.c    ****   htim16.Init.Period = 0;
 476:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 477:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 478:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 479:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 480:Src/main.c    ****   {
 481:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 482:Src/main.c    ****   }
 483:Src/main.c    **** 
 484:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 485:Src/main.c    ****   {
 486:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 487:Src/main.c    ****   }
 488:Src/main.c    **** 
 489:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 490:Src/main.c    ****   sConfigOC.Pulse = 0;
ARM GAS  /tmp/ccpxeAZZ.s 			page 10


 491:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 492:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 493:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 494:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 495:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 496:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 497:Src/main.c    ****   {
 498:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 499:Src/main.c    ****   }
 500:Src/main.c    **** 
 501:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 502:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 503:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 504:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 505:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 506:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 507:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 508:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 509:Src/main.c    ****   {
 510:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 511:Src/main.c    ****   }
 512:Src/main.c    **** 
 513:Src/main.c    ****   HAL_TIM_MspPostInit(&htim16);
 514:Src/main.c    **** 
 515:Src/main.c    **** }
 516:Src/main.c    **** 
 517:Src/main.c    **** /* USART1 init function */
 518:Src/main.c    **** static void MX_USART1_UART_Init(void)
 519:Src/main.c    **** {
 520:Src/main.c    **** 
 521:Src/main.c    ****   huart1.Instance = USART1;
 522:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 523:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 524:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 525:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 526:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 527:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 528:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 529:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 530:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 531:Src/main.c    ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 532:Src/main.c    ****   {
 533:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 534:Src/main.c    ****   }
 535:Src/main.c    **** 
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** /* WWDG init function */
 539:Src/main.c    **** static void MX_WWDG_Init(void)
 540:Src/main.c    **** {
 541:Src/main.c    **** 
 542:Src/main.c    ****   hwwdg.Instance = WWDG;
 543:Src/main.c    ****   hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 544:Src/main.c    ****   hwwdg.Init.Window = 64;
 545:Src/main.c    ****   hwwdg.Init.Counter = 127;
 546:Src/main.c    ****   hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 547:Src/main.c    ****   if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
ARM GAS  /tmp/ccpxeAZZ.s 			page 11


 548:Src/main.c    ****   {
 549:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 550:Src/main.c    ****   }
 551:Src/main.c    **** 
 552:Src/main.c    **** }
 553:Src/main.c    **** 
 554:Src/main.c    **** /** Configure pins as
 555:Src/main.c    ****         * Analog
 556:Src/main.c    ****         * Input
 557:Src/main.c    ****         * Output
 558:Src/main.c    ****         * EVENT_OUT
 559:Src/main.c    ****         * EXTI
 560:Src/main.c    **** */
 561:Src/main.c    **** static void MX_GPIO_Init(void)
 562:Src/main.c    **** {
  25              		.loc 1 562 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
  40              	.LBB2:
 563:Src/main.c    **** 
 564:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 565:Src/main.c    **** 
 566:Src/main.c    ****   /* GPIO Ports Clock Enable */
 567:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  41              		.loc 1 567 0
  42 0004 1B4B     		ldr	r3, .L2
  43 0006 5969     		ldr	r1, [r3, #20]
  44 0008 8020     		movs	r0, #128
  45 000a 8002     		lsls	r0, r0, #10
  46 000c 0143     		orrs	r1, r0
  47 000e 5961     		str	r1, [r3, #20]
  48 0010 5A69     		ldr	r2, [r3, #20]
  49 0012 0240     		ands	r2, r0
  50 0014 0192     		str	r2, [sp, #4]
  51 0016 019A     		ldr	r2, [sp, #4]
  52              	.LBE2:
  53              	.LBB3:
 568:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  54              		.loc 1 568 0
  55 0018 5A69     		ldr	r2, [r3, #20]
  56 001a 8021     		movs	r1, #128
  57 001c C902     		lsls	r1, r1, #11
  58 001e 0A43     		orrs	r2, r1
  59 0020 5A61     		str	r2, [r3, #20]
  60 0022 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccpxeAZZ.s 			page 12


  61 0024 0B40     		ands	r3, r1
  62 0026 0293     		str	r3, [sp, #8]
  63 0028 029B     		ldr	r3, [sp, #8]
  64              	.LBE3:
 569:Src/main.c    **** 
 570:Src/main.c    ****   /*Configure GPIO pin Output Level */
 571:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, PHASE_1_L_Pin|PHASE_2_L_Pin|CAL_ENABLE_Pin|PHASE_1_H_Pin
  65              		.loc 1 571 0
  66 002a 134F     		ldr	r7, .L2+4
  67 002c 0022     		movs	r2, #0
  68 002e BB21     		movs	r1, #187
  69 0030 3800     		movs	r0, r7
  70 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
  71              	.LVL0:
 572:Src/main.c    ****                           |PHASE_2_H_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 573:Src/main.c    **** 
 574:Src/main.c    ****   /*Configure GPIO pin Output Level */
 575:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|UD_STATE_Pin|CS_HP_Pin, GPIO_PIN_RESET);
  72              		.loc 1 575 0
  73 0036 9125     		movs	r5, #145
  74 0038 2D02     		lsls	r5, r5, #8
  75 003a 0022     		movs	r2, #0
  76 003c 2900     		movs	r1, r5
  77 003e 9020     		movs	r0, #144
  78 0040 C005     		lsls	r0, r0, #23
  79 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  80              	.LVL1:
 576:Src/main.c    **** 
 577:Src/main.c    ****   /*Configure GPIO pins : PHASE_1_L_Pin PHASE_2_L_Pin CAL_ENABLE_Pin PHASE_1_H_Pin
 578:Src/main.c    ****                            PHASE_2_H_Pin PB7 */
 579:Src/main.c    ****   GPIO_InitStruct.Pin = PHASE_1_L_Pin|PHASE_2_L_Pin|CAL_ENABLE_Pin|PHASE_1_H_Pin
  81              		.loc 1 579 0
  82 0046 BB23     		movs	r3, #187
  83 0048 0393     		str	r3, [sp, #12]
 580:Src/main.c    ****                           |PHASE_2_H_Pin|GPIO_PIN_7;
 581:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  84              		.loc 1 581 0
  85 004a 0126     		movs	r6, #1
  86 004c 0496     		str	r6, [sp, #16]
 582:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  87              		.loc 1 582 0
  88 004e 0024     		movs	r4, #0
  89 0050 0594     		str	r4, [sp, #20]
 583:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  90              		.loc 1 583 0
  91 0052 0694     		str	r4, [sp, #24]
 584:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  92              		.loc 1 584 0
  93 0054 03A9     		add	r1, sp, #12
  94 0056 3800     		movs	r0, r7
  95 0058 FFF7FEFF 		bl	HAL_GPIO_Init
  96              	.LVL2:
 585:Src/main.c    **** 
 586:Src/main.c    ****   /*Configure GPIO pins : PA8 UD_STATE_Pin CS_HP_Pin */
 587:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8|UD_STATE_Pin|CS_HP_Pin;
  97              		.loc 1 587 0
  98 005c 0395     		str	r5, [sp, #12]
ARM GAS  /tmp/ccpxeAZZ.s 			page 13


 588:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  99              		.loc 1 588 0
 100 005e 0496     		str	r6, [sp, #16]
 589:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 589 0
 102 0060 0594     		str	r4, [sp, #20]
 590:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 103              		.loc 1 590 0
 104 0062 0694     		str	r4, [sp, #24]
 591:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 105              		.loc 1 591 0
 106 0064 03A9     		add	r1, sp, #12
 107 0066 9020     		movs	r0, #144
 108 0068 C005     		lsls	r0, r0, #23
 109 006a FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL3:
 592:Src/main.c    **** 
 593:Src/main.c    **** }
 111              		.loc 1 593 0
 112 006e 09B0     		add	sp, sp, #36
 113              		@ sp needed
 114 0070 F0BD     		pop	{r4, r5, r6, r7, pc}
 115              	.L3:
 116 0072 C046     		.align	2
 117              	.L2:
 118 0074 00100240 		.word	1073876992
 119 0078 00040048 		.word	1207960576
 120              		.cfi_endproc
 121              	.LFE46:
 123              		.section	.text.__io_putchar,"ax",%progbits
 124              		.align	1
 125              		.global	__io_putchar
 126              		.syntax unified
 127              		.code	16
 128              		.thumb_func
 129              		.fpu softvfp
 131              	__io_putchar:
 132              	.LFB35:
 103:Src/main.c    ****   /* Place your implementation of fputc here */
 133              		.loc 1 103 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 8
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              	.LVL4:
 138 0000 00B5     		push	{lr}
 139              	.LCFI2:
 140              		.cfi_def_cfa_offset 4
 141              		.cfi_offset 14, -4
 142 0002 83B0     		sub	sp, sp, #12
 143              	.LCFI3:
 144              		.cfi_def_cfa_offset 16
 145 0004 0190     		str	r0, [sp, #4]
 106:Src/main.c    **** 
 146              		.loc 1 106 0
 147 0006 044B     		ldr	r3, .L5
 148 0008 0122     		movs	r2, #1
 149 000a 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccpxeAZZ.s 			page 14


 150 000c 0348     		ldr	r0, .L5+4
 151              	.LVL5:
 152 000e FFF7FEFF 		bl	HAL_UART_Transmit
 153              	.LVL6:
 109:Src/main.c    **** /* USER CODE END 0 */
 154              		.loc 1 109 0
 155 0012 0198     		ldr	r0, [sp, #4]
 156 0014 03B0     		add	sp, sp, #12
 157              		@ sp needed
 158 0016 00BD     		pop	{pc}
 159              	.L6:
 160              		.align	2
 161              	.L5:
 162 0018 FFFF0000 		.word	65535
 163 001c 00000000 		.word	huart1
 164              		.cfi_endproc
 165              	.LFE35:
 167              		.section	.text._Error_Handler,"ax",%progbits
 168              		.align	1
 169              		.global	_Error_Handler
 170              		.syntax unified
 171              		.code	16
 172              		.thumb_func
 173              		.fpu softvfp
 175              	_Error_Handler:
 176              	.LFB47:
 594:Src/main.c    **** 
 595:Src/main.c    **** /* USER CODE BEGIN 4 */
 596:Src/main.c    **** 
 597:Src/main.c    **** /* USER CODE END 4 */
 598:Src/main.c    **** 
 599:Src/main.c    **** /**
 600:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 601:Src/main.c    ****   * @param  file: The file name as string.
 602:Src/main.c    ****   * @param  line: The line in file as a number.
 603:Src/main.c    ****   * @retval None
 604:Src/main.c    ****   */
 605:Src/main.c    **** void _Error_Handler(char *file, int line)
 606:Src/main.c    **** {
 177              		.loc 1 606 0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183              	.LVL7:
 184              	.L8:
 185 0000 FEE7     		b	.L8
 186              		.cfi_endproc
 187              	.LFE47:
 189              		.section	.text.MX_ADC_Init,"ax",%progbits
 190              		.align	1
 191              		.syntax unified
 192              		.code	16
 193              		.thumb_func
 194              		.fpu softvfp
 196              	MX_ADC_Init:
ARM GAS  /tmp/ccpxeAZZ.s 			page 15


 197              	.LFB38:
 229:Src/main.c    **** 
 198              		.loc 1 229 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 16
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 229:Src/main.c    **** 
 202              		.loc 1 229 0
 203 0000 00B5     		push	{lr}
 204              	.LCFI4:
 205              		.cfi_def_cfa_offset 4
 206              		.cfi_offset 14, -4
 207 0002 85B0     		sub	sp, sp, #20
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 24
 235:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 210              		.loc 1 235 0
 211 0004 4648     		ldr	r0, .L28
 212 0006 474B     		ldr	r3, .L28+4
 213 0008 0360     		str	r3, [r0]
 236:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 214              		.loc 1 236 0
 215 000a 0023     		movs	r3, #0
 216 000c 4360     		str	r3, [r0, #4]
 237:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 217              		.loc 1 237 0
 218 000e 8360     		str	r3, [r0, #8]
 238:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 219              		.loc 1 238 0
 220 0010 C360     		str	r3, [r0, #12]
 239:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 221              		.loc 1 239 0
 222 0012 0122     		movs	r2, #1
 223 0014 0261     		str	r2, [r0, #16]
 240:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 224              		.loc 1 240 0
 225 0016 0421     		movs	r1, #4
 226 0018 4161     		str	r1, [r0, #20]
 241:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 227              		.loc 1 241 0
 228 001a 8361     		str	r3, [r0, #24]
 242:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 229              		.loc 1 242 0
 230 001c C361     		str	r3, [r0, #28]
 243:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 231              		.loc 1 243 0
 232 001e 0362     		str	r3, [r0, #32]
 244:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 233              		.loc 1 244 0
 234 0020 4362     		str	r3, [r0, #36]
 245:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 235              		.loc 1 245 0
 236 0022 C221     		movs	r1, #194
 237 0024 FF31     		adds	r1, r1, #255
 238 0026 8162     		str	r1, [r0, #40]
 246:Src/main.c    ****   hadc.Init.DMAContinuousRequests = DISABLE;
 239              		.loc 1 246 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 16


 240 0028 C362     		str	r3, [r0, #44]
 247:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 241              		.loc 1 247 0
 242 002a 0363     		str	r3, [r0, #48]
 248:Src/main.c    ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 243              		.loc 1 248 0
 244 002c 4263     		str	r2, [r0, #52]
 249:Src/main.c    ****   {
 245              		.loc 1 249 0
 246 002e FFF7FEFF 		bl	HAL_ADC_Init
 247              	.LVL8:
 248 0032 0028     		cmp	r0, #0
 249 0034 47D1     		bne	.L19
 256:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 250              		.loc 1 256 0
 251 0036 0023     		movs	r3, #0
 252 0038 0193     		str	r3, [sp, #4]
 257:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 253              		.loc 1 257 0
 254 003a 8023     		movs	r3, #128
 255 003c 5B01     		lsls	r3, r3, #5
 256 003e 0293     		str	r3, [sp, #8]
 258:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 257              		.loc 1 258 0
 258 0040 8023     		movs	r3, #128
 259 0042 5B05     		lsls	r3, r3, #21
 260 0044 0393     		str	r3, [sp, #12]
 259:Src/main.c    ****   {
 261              		.loc 1 259 0
 262 0046 01A9     		add	r1, sp, #4
 263 0048 3548     		ldr	r0, .L28
 264 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 265              	.LVL9:
 266 004e 0028     		cmp	r0, #0
 267 0050 3DD1     		bne	.L20
 266:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 268              		.loc 1 266 0
 269 0052 0123     		movs	r3, #1
 270 0054 0193     		str	r3, [sp, #4]
 267:Src/main.c    ****   {
 271              		.loc 1 267 0
 272 0056 01A9     		add	r1, sp, #4
 273 0058 3148     		ldr	r0, .L28
 274 005a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 275              	.LVL10:
 276 005e 0028     		cmp	r0, #0
 277 0060 3AD1     		bne	.L21
 274:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 278              		.loc 1 274 0
 279 0062 0223     		movs	r3, #2
 280 0064 0193     		str	r3, [sp, #4]
 275:Src/main.c    ****   {
 281              		.loc 1 275 0
 282 0066 01A9     		add	r1, sp, #4
 283 0068 2D48     		ldr	r0, .L28
 284 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 285              	.LVL11:
ARM GAS  /tmp/ccpxeAZZ.s 			page 17


 286 006e 0028     		cmp	r0, #0
 287 0070 37D1     		bne	.L22
 282:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 288              		.loc 1 282 0
 289 0072 0323     		movs	r3, #3
 290 0074 0193     		str	r3, [sp, #4]
 283:Src/main.c    ****   {
 291              		.loc 1 283 0
 292 0076 01A9     		add	r1, sp, #4
 293 0078 2948     		ldr	r0, .L28
 294 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 295              	.LVL12:
 296 007e 0028     		cmp	r0, #0
 297 0080 34D1     		bne	.L23
 290:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 298              		.loc 1 290 0
 299 0082 0423     		movs	r3, #4
 300 0084 0193     		str	r3, [sp, #4]
 291:Src/main.c    ****   {
 301              		.loc 1 291 0
 302 0086 01A9     		add	r1, sp, #4
 303 0088 2548     		ldr	r0, .L28
 304 008a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 305              	.LVL13:
 306 008e 0028     		cmp	r0, #0
 307 0090 31D1     		bne	.L24
 298:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 308              		.loc 1 298 0
 309 0092 0523     		movs	r3, #5
 310 0094 0193     		str	r3, [sp, #4]
 299:Src/main.c    ****   {
 311              		.loc 1 299 0
 312 0096 01A9     		add	r1, sp, #4
 313 0098 2148     		ldr	r0, .L28
 314 009a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 315              	.LVL14:
 316 009e 0028     		cmp	r0, #0
 317 00a0 2ED1     		bne	.L25
 306:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 318              		.loc 1 306 0
 319 00a2 1023     		movs	r3, #16
 320 00a4 0193     		str	r3, [sp, #4]
 307:Src/main.c    ****   {
 321              		.loc 1 307 0
 322 00a6 01A9     		add	r1, sp, #4
 323 00a8 1D48     		ldr	r0, .L28
 324 00aa FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 325              	.LVL15:
 326 00ae 0028     		cmp	r0, #0
 327 00b0 2BD1     		bne	.L26
 314:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 328              		.loc 1 314 0
 329 00b2 1123     		movs	r3, #17
 330 00b4 0193     		str	r3, [sp, #4]
 315:Src/main.c    ****   {
 331              		.loc 1 315 0
 332 00b6 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccpxeAZZ.s 			page 18


 333 00b8 1948     		ldr	r0, .L28
 334 00ba FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 335              	.LVL16:
 336 00be 0028     		cmp	r0, #0
 337 00c0 28D1     		bne	.L27
 320:Src/main.c    **** 
 338              		.loc 1 320 0
 339 00c2 05B0     		add	sp, sp, #20
 340              		@ sp needed
 341 00c4 00BD     		pop	{pc}
 342              	.L19:
 251:Src/main.c    ****   }
 343              		.loc 1 251 0
 344 00c6 FB21     		movs	r1, #251
 345 00c8 1748     		ldr	r0, .L28+8
 346 00ca FFF7FEFF 		bl	_Error_Handler
 347              	.LVL17:
 348              	.L20:
 261:Src/main.c    ****   }
 349              		.loc 1 261 0
 350 00ce 0621     		movs	r1, #6
 351 00d0 FF31     		adds	r1, r1, #255
 352 00d2 1548     		ldr	r0, .L28+8
 353 00d4 FFF7FEFF 		bl	_Error_Handler
 354              	.LVL18:
 355              	.L21:
 269:Src/main.c    ****   }
 356              		.loc 1 269 0
 357 00d8 0E21     		movs	r1, #14
 358 00da FF31     		adds	r1, r1, #255
 359 00dc 1248     		ldr	r0, .L28+8
 360 00de FFF7FEFF 		bl	_Error_Handler
 361              	.LVL19:
 362              	.L22:
 277:Src/main.c    ****   }
 363              		.loc 1 277 0
 364 00e2 1621     		movs	r1, #22
 365 00e4 FF31     		adds	r1, r1, #255
 366 00e6 1048     		ldr	r0, .L28+8
 367 00e8 FFF7FEFF 		bl	_Error_Handler
 368              	.LVL20:
 369              	.L23:
 285:Src/main.c    ****   }
 370              		.loc 1 285 0
 371 00ec 1E21     		movs	r1, #30
 372 00ee FF31     		adds	r1, r1, #255
 373 00f0 0D48     		ldr	r0, .L28+8
 374 00f2 FFF7FEFF 		bl	_Error_Handler
 375              	.LVL21:
 376              	.L24:
 293:Src/main.c    ****   }
 377              		.loc 1 293 0
 378 00f6 2621     		movs	r1, #38
 379 00f8 FF31     		adds	r1, r1, #255
 380 00fa 0B48     		ldr	r0, .L28+8
 381 00fc FFF7FEFF 		bl	_Error_Handler
 382              	.LVL22:
ARM GAS  /tmp/ccpxeAZZ.s 			page 19


 383              	.L25:
 301:Src/main.c    ****   }
 384              		.loc 1 301 0
 385 0100 2E21     		movs	r1, #46
 386 0102 FF31     		adds	r1, r1, #255
 387 0104 0848     		ldr	r0, .L28+8
 388 0106 FFF7FEFF 		bl	_Error_Handler
 389              	.LVL23:
 390              	.L26:
 309:Src/main.c    ****   }
 391              		.loc 1 309 0
 392 010a 3621     		movs	r1, #54
 393 010c FF31     		adds	r1, r1, #255
 394 010e 0648     		ldr	r0, .L28+8
 395 0110 FFF7FEFF 		bl	_Error_Handler
 396              	.LVL24:
 397              	.L27:
 317:Src/main.c    ****   }
 398              		.loc 1 317 0
 399 0114 3E21     		movs	r1, #62
 400 0116 FF31     		adds	r1, r1, #255
 401 0118 0348     		ldr	r0, .L28+8
 402 011a FFF7FEFF 		bl	_Error_Handler
 403              	.LVL25:
 404              	.L29:
 405 011e C046     		.align	2
 406              	.L28:
 407 0120 00000000 		.word	hadc
 408 0124 00240140 		.word	1073816576
 409 0128 00000000 		.word	.LC2
 410              		.cfi_endproc
 411              	.LFE38:
 413              		.section	.text.MX_I2C1_Init,"ax",%progbits
 414              		.align	1
 415              		.syntax unified
 416              		.code	16
 417              		.thumb_func
 418              		.fpu softvfp
 420              	MX_I2C1_Init:
 421              	.LFB39:
 324:Src/main.c    **** 
 422              		.loc 1 324 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426 0000 10B5     		push	{r4, lr}
 427              	.LCFI6:
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 4, -8
 430              		.cfi_offset 14, -4
 326:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 431              		.loc 1 326 0
 432 0002 1748     		ldr	r0, .L37
 433 0004 174B     		ldr	r3, .L37+4
 434 0006 0360     		str	r3, [r0]
 327:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 435              		.loc 1 327 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 20


 436 0008 174B     		ldr	r3, .L37+8
 437 000a 4360     		str	r3, [r0, #4]
 328:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 438              		.loc 1 328 0
 439 000c 0023     		movs	r3, #0
 440 000e 8360     		str	r3, [r0, #8]
 329:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 441              		.loc 1 329 0
 442 0010 0122     		movs	r2, #1
 443 0012 C260     		str	r2, [r0, #12]
 330:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 444              		.loc 1 330 0
 445 0014 0361     		str	r3, [r0, #16]
 331:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 446              		.loc 1 331 0
 447 0016 4361     		str	r3, [r0, #20]
 332:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 448              		.loc 1 332 0
 449 0018 8361     		str	r3, [r0, #24]
 333:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 450              		.loc 1 333 0
 451 001a C361     		str	r3, [r0, #28]
 334:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 452              		.loc 1 334 0
 453 001c 0362     		str	r3, [r0, #32]
 335:Src/main.c    ****   {
 454              		.loc 1 335 0
 455 001e FFF7FEFF 		bl	HAL_I2C_Init
 456              	.LVL26:
 457 0022 0028     		cmp	r0, #0
 458 0024 0CD1     		bne	.L34
 342:Src/main.c    ****   {
 459              		.loc 1 342 0
 460 0026 0021     		movs	r1, #0
 461 0028 0D48     		ldr	r0, .L37
 462 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 463              	.LVL27:
 464 002e 0028     		cmp	r0, #0
 465 0030 0BD1     		bne	.L35
 349:Src/main.c    ****   {
 466              		.loc 1 349 0
 467 0032 0021     		movs	r1, #0
 468 0034 0A48     		ldr	r0, .L37
 469 0036 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 470              	.LVL28:
 471 003a 0028     		cmp	r0, #0
 472 003c 0AD1     		bne	.L36
 354:Src/main.c    **** 
 473              		.loc 1 354 0
 474              		@ sp needed
 475 003e 10BD     		pop	{r4, pc}
 476              	.L34:
 337:Src/main.c    ****   }
 477              		.loc 1 337 0
 478 0040 5221     		movs	r1, #82
 479 0042 FF31     		adds	r1, r1, #255
 480 0044 0948     		ldr	r0, .L37+12
ARM GAS  /tmp/ccpxeAZZ.s 			page 21


 481 0046 FFF7FEFF 		bl	_Error_Handler
 482              	.LVL29:
 483              	.L35:
 344:Src/main.c    ****   }
 484              		.loc 1 344 0
 485 004a AC21     		movs	r1, #172
 486 004c 4900     		lsls	r1, r1, #1
 487 004e 0748     		ldr	r0, .L37+12
 488 0050 FFF7FEFF 		bl	_Error_Handler
 489              	.LVL30:
 490              	.L36:
 351:Src/main.c    ****   }
 491              		.loc 1 351 0
 492 0054 6021     		movs	r1, #96
 493 0056 FF31     		adds	r1, r1, #255
 494 0058 0448     		ldr	r0, .L37+12
 495 005a FFF7FEFF 		bl	_Error_Handler
 496              	.LVL31:
 497              	.L38:
 498 005e C046     		.align	2
 499              	.L37:
 500 0060 00000000 		.word	hi2c1
 501 0064 00540040 		.word	1073763328
 502 0068 0E090020 		.word	536873230
 503 006c 00000000 		.word	.LC2
 504              		.cfi_endproc
 505              	.LFE39:
 507              		.section	.text.MX_RTC_Init,"ax",%progbits
 508              		.align	1
 509              		.syntax unified
 510              		.code	16
 511              		.thumb_func
 512              		.fpu softvfp
 514              	MX_RTC_Init:
 515              	.LFB40:
 358:Src/main.c    **** 
 516              		.loc 1 358 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520 0000 10B5     		push	{r4, lr}
 521              	.LCFI7:
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 4, -8
 524              		.cfi_offset 14, -4
 362:Src/main.c    ****   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 525              		.loc 1 362 0
 526 0002 0B48     		ldr	r0, .L42
 527 0004 0B4B     		ldr	r3, .L42+4
 528 0006 0360     		str	r3, [r0]
 363:Src/main.c    ****   hrtc.Init.AsynchPrediv = 127;
 529              		.loc 1 363 0
 530 0008 0023     		movs	r3, #0
 531 000a 4360     		str	r3, [r0, #4]
 364:Src/main.c    ****   hrtc.Init.SynchPrediv = 255;
 532              		.loc 1 364 0
 533 000c 7F22     		movs	r2, #127
ARM GAS  /tmp/ccpxeAZZ.s 			page 22


 534 000e 8260     		str	r2, [r0, #8]
 365:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 535              		.loc 1 365 0
 536 0010 8032     		adds	r2, r2, #128
 537 0012 C260     		str	r2, [r0, #12]
 366:Src/main.c    ****   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 538              		.loc 1 366 0
 539 0014 0361     		str	r3, [r0, #16]
 367:Src/main.c    ****   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 540              		.loc 1 367 0
 541 0016 4361     		str	r3, [r0, #20]
 368:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 542              		.loc 1 368 0
 543 0018 8361     		str	r3, [r0, #24]
 369:Src/main.c    ****   {
 544              		.loc 1 369 0
 545 001a FFF7FEFF 		bl	HAL_RTC_Init
 546              	.LVL32:
 547 001e 0028     		cmp	r0, #0
 548 0020 00D1     		bne	.L41
 374:Src/main.c    **** 
 549              		.loc 1 374 0
 550              		@ sp needed
 551 0022 10BD     		pop	{r4, pc}
 552              	.L41:
 371:Src/main.c    ****   }
 553              		.loc 1 371 0
 554 0024 7421     		movs	r1, #116
 555 0026 FF31     		adds	r1, r1, #255
 556 0028 0348     		ldr	r0, .L42+8
 557 002a FFF7FEFF 		bl	_Error_Handler
 558              	.LVL33:
 559              	.L43:
 560 002e C046     		.align	2
 561              	.L42:
 562 0030 00000000 		.word	hrtc
 563 0034 00280040 		.word	1073752064
 564 0038 00000000 		.word	.LC2
 565              		.cfi_endproc
 566              	.LFE40:
 568              		.section	.text.MX_TIM1_Init,"ax",%progbits
 569              		.align	1
 570              		.syntax unified
 571              		.code	16
 572              		.thumb_func
 573              		.fpu softvfp
 575              	MX_TIM1_Init:
 576              	.LFB41:
 378:Src/main.c    **** 
 577              		.loc 1 378 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 64
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581 0000 00B5     		push	{lr}
 582              	.LCFI8:
 583              		.cfi_def_cfa_offset 4
 584              		.cfi_offset 14, -4
ARM GAS  /tmp/ccpxeAZZ.s 			page 23


 585 0002 91B0     		sub	sp, sp, #68
 586              	.LCFI9:
 587              		.cfi_def_cfa_offset 72
 384:Src/main.c    ****   htim1.Init.Prescaler = 1;
 588              		.loc 1 384 0
 589 0004 2848     		ldr	r0, .L53
 590 0006 294B     		ldr	r3, .L53+4
 591 0008 0360     		str	r3, [r0]
 385:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 592              		.loc 1 385 0
 593 000a 0123     		movs	r3, #1
 594 000c 4360     		str	r3, [r0, #4]
 386:Src/main.c    ****   htim1.Init.Period = 255;
 595              		.loc 1 386 0
 596 000e 0023     		movs	r3, #0
 597 0010 8360     		str	r3, [r0, #8]
 387:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 598              		.loc 1 387 0
 599 0012 FF22     		movs	r2, #255
 600 0014 C260     		str	r2, [r0, #12]
 388:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 601              		.loc 1 388 0
 602 0016 0361     		str	r3, [r0, #16]
 389:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 603              		.loc 1 389 0
 604 0018 4361     		str	r3, [r0, #20]
 390:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 605              		.loc 1 390 0
 606 001a 8361     		str	r3, [r0, #24]
 391:Src/main.c    ****   {
 607              		.loc 1 391 0
 608 001c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 609              	.LVL34:
 610 0020 0028     		cmp	r0, #0
 611 0022 2CD1     		bne	.L49
 396:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 612              		.loc 1 396 0
 613 0024 0023     		movs	r3, #0
 614 0026 0E93     		str	r3, [sp, #56]
 397:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 615              		.loc 1 397 0
 616 0028 0F93     		str	r3, [sp, #60]
 398:Src/main.c    ****   {
 617              		.loc 1 398 0
 618 002a 0EA9     		add	r1, sp, #56
 619 002c 1E48     		ldr	r0, .L53
 620 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 621              	.LVL35:
 622 0032 0028     		cmp	r0, #0
 623 0034 28D1     		bne	.L50
 403:Src/main.c    ****   sConfigOC.Pulse = 0;
 624              		.loc 1 403 0
 625 0036 6023     		movs	r3, #96
 626 0038 0793     		str	r3, [sp, #28]
 404:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 627              		.loc 1 404 0
 628 003a 0023     		movs	r3, #0
ARM GAS  /tmp/ccpxeAZZ.s 			page 24


 629 003c 0893     		str	r3, [sp, #32]
 405:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 630              		.loc 1 405 0
 631 003e 0993     		str	r3, [sp, #36]
 406:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 632              		.loc 1 406 0
 633 0040 0B93     		str	r3, [sp, #44]
 407:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 634              		.loc 1 407 0
 635 0042 0C93     		str	r3, [sp, #48]
 408:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 636              		.loc 1 408 0
 637 0044 0D93     		str	r3, [sp, #52]
 409:Src/main.c    ****   {
 638              		.loc 1 409 0
 639 0046 0C22     		movs	r2, #12
 640 0048 07A9     		add	r1, sp, #28
 641 004a 1748     		ldr	r0, .L53
 642 004c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 643              	.LVL36:
 644 0050 0028     		cmp	r0, #0
 645 0052 1ED1     		bne	.L51
 414:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 646              		.loc 1 414 0
 647 0054 0023     		movs	r3, #0
 648 0056 0093     		str	r3, [sp]
 415:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 649              		.loc 1 415 0
 650 0058 0193     		str	r3, [sp, #4]
 416:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 651              		.loc 1 416 0
 652 005a 0293     		str	r3, [sp, #8]
 417:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 653              		.loc 1 417 0
 654 005c 0393     		str	r3, [sp, #12]
 418:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 655              		.loc 1 418 0
 656 005e 0493     		str	r3, [sp, #16]
 419:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 657              		.loc 1 419 0
 658 0060 8022     		movs	r2, #128
 659 0062 9201     		lsls	r2, r2, #6
 660 0064 0592     		str	r2, [sp, #20]
 420:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 661              		.loc 1 420 0
 662 0066 0693     		str	r3, [sp, #24]
 421:Src/main.c    ****   {
 663              		.loc 1 421 0
 664 0068 6946     		mov	r1, sp
 665 006a 0F48     		ldr	r0, .L53
 666 006c FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 667              	.LVL37:
 668 0070 0028     		cmp	r0, #0
 669 0072 13D1     		bne	.L52
 426:Src/main.c    **** 
 670              		.loc 1 426 0
 671 0074 0C48     		ldr	r0, .L53
ARM GAS  /tmp/ccpxeAZZ.s 			page 25


 672 0076 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 673              	.LVL38:
 428:Src/main.c    **** 
 674              		.loc 1 428 0
 675 007a 11B0     		add	sp, sp, #68
 676              		@ sp needed
 677 007c 00BD     		pop	{pc}
 678              	.L49:
 393:Src/main.c    ****   }
 679              		.loc 1 393 0
 680 007e 8A21     		movs	r1, #138
 681 0080 FF31     		adds	r1, r1, #255
 682 0082 0B48     		ldr	r0, .L53+8
 683 0084 FFF7FEFF 		bl	_Error_Handler
 684              	.LVL39:
 685              	.L50:
 400:Src/main.c    ****   }
 686              		.loc 1 400 0
 687 0088 C821     		movs	r1, #200
 688 008a 4900     		lsls	r1, r1, #1
 689 008c 0848     		ldr	r0, .L53+8
 690 008e FFF7FEFF 		bl	_Error_Handler
 691              	.LVL40:
 692              	.L51:
 411:Src/main.c    ****   }
 693              		.loc 1 411 0
 694 0092 9C21     		movs	r1, #156
 695 0094 FF31     		adds	r1, r1, #255
 696 0096 0648     		ldr	r0, .L53+8
 697 0098 FFF7FEFF 		bl	_Error_Handler
 698              	.LVL41:
 699              	.L52:
 423:Src/main.c    ****   }
 700              		.loc 1 423 0
 701 009c A821     		movs	r1, #168
 702 009e FF31     		adds	r1, r1, #255
 703 00a0 0348     		ldr	r0, .L53+8
 704 00a2 FFF7FEFF 		bl	_Error_Handler
 705              	.LVL42:
 706              	.L54:
 707 00a6 C046     		.align	2
 708              	.L53:
 709 00a8 00000000 		.word	htim1
 710 00ac 002C0140 		.word	1073818624
 711 00b0 00000000 		.word	.LC2
 712              		.cfi_endproc
 713              	.LFE41:
 715              		.section	.text.MX_TIM14_Init,"ax",%progbits
 716              		.align	1
 717              		.syntax unified
 718              		.code	16
 719              		.thumb_func
 720              		.fpu softvfp
 722              	MX_TIM14_Init:
 723              	.LFB42:
 432:Src/main.c    **** 
 724              		.loc 1 432 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 26


 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 32
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728 0000 00B5     		push	{lr}
 729              	.LCFI10:
 730              		.cfi_def_cfa_offset 4
 731              		.cfi_offset 14, -4
 732 0002 89B0     		sub	sp, sp, #36
 733              	.LCFI11:
 734              		.cfi_def_cfa_offset 40
 436:Src/main.c    ****   htim14.Init.Prescaler = 0;
 735              		.loc 1 436 0
 736 0004 1948     		ldr	r0, .L62
 737 0006 1A4B     		ldr	r3, .L62+4
 738 0008 0360     		str	r3, [r0]
 437:Src/main.c    ****   htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 739              		.loc 1 437 0
 740 000a 0023     		movs	r3, #0
 741 000c 4360     		str	r3, [r0, #4]
 438:Src/main.c    ****   htim14.Init.Period = 0;
 742              		.loc 1 438 0
 743 000e 8360     		str	r3, [r0, #8]
 439:Src/main.c    ****   htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 744              		.loc 1 439 0
 745 0010 C360     		str	r3, [r0, #12]
 440:Src/main.c    ****   htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 746              		.loc 1 440 0
 747 0012 0361     		str	r3, [r0, #16]
 441:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 748              		.loc 1 441 0
 749 0014 8361     		str	r3, [r0, #24]
 442:Src/main.c    ****   {
 750              		.loc 1 442 0
 751 0016 FFF7FEFF 		bl	HAL_TIM_Base_Init
 752              	.LVL43:
 753 001a 0028     		cmp	r0, #0
 754 001c 16D1     		bne	.L59
 447:Src/main.c    ****   {
 755              		.loc 1 447 0
 756 001e 1348     		ldr	r0, .L62
 757 0020 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 758              	.LVL44:
 759 0024 0028     		cmp	r0, #0
 760 0026 16D1     		bne	.L60
 452:Src/main.c    ****   sConfigOC.Pulse = 0;
 761              		.loc 1 452 0
 762 0028 6023     		movs	r3, #96
 763 002a 0193     		str	r3, [sp, #4]
 453:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 764              		.loc 1 453 0
 765 002c 0023     		movs	r3, #0
 766 002e 0293     		str	r3, [sp, #8]
 454:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 767              		.loc 1 454 0
 768 0030 0393     		str	r3, [sp, #12]
 455:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 769              		.loc 1 455 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 27


 770 0032 0593     		str	r3, [sp, #20]
 456:Src/main.c    ****   {
 771              		.loc 1 456 0
 772 0034 0022     		movs	r2, #0
 773 0036 01A9     		add	r1, sp, #4
 774 0038 0C48     		ldr	r0, .L62
 775 003a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 776              	.LVL45:
 777 003e 0028     		cmp	r0, #0
 778 0040 0ED1     		bne	.L61
 461:Src/main.c    **** 
 779              		.loc 1 461 0
 780 0042 0A48     		ldr	r0, .L62
 781 0044 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 782              	.LVL46:
 463:Src/main.c    **** 
 783              		.loc 1 463 0
 784 0048 09B0     		add	sp, sp, #36
 785              		@ sp needed
 786 004a 00BD     		pop	{pc}
 787              	.L59:
 444:Src/main.c    ****   }
 788              		.loc 1 444 0
 789 004c DE21     		movs	r1, #222
 790 004e 4900     		lsls	r1, r1, #1
 791 0050 0848     		ldr	r0, .L62+8
 792 0052 FFF7FEFF 		bl	_Error_Handler
 793              	.LVL47:
 794              	.L60:
 449:Src/main.c    ****   }
 795              		.loc 1 449 0
 796 0056 C221     		movs	r1, #194
 797 0058 FF31     		adds	r1, r1, #255
 798 005a 0648     		ldr	r0, .L62+8
 799 005c FFF7FEFF 		bl	_Error_Handler
 800              	.LVL48:
 801              	.L61:
 458:Src/main.c    ****   }
 802              		.loc 1 458 0
 803 0060 E521     		movs	r1, #229
 804 0062 4900     		lsls	r1, r1, #1
 805 0064 0348     		ldr	r0, .L62+8
 806 0066 FFF7FEFF 		bl	_Error_Handler
 807              	.LVL49:
 808              	.L63:
 809 006a C046     		.align	2
 810              	.L62:
 811 006c 00000000 		.word	htim14
 812 0070 00200040 		.word	1073750016
 813 0074 00000000 		.word	.LC2
 814              		.cfi_endproc
 815              	.LFE42:
 817              		.section	.text.MX_TIM16_Init,"ax",%progbits
 818              		.align	1
 819              		.syntax unified
 820              		.code	16
 821              		.thumb_func
ARM GAS  /tmp/ccpxeAZZ.s 			page 28


 822              		.fpu softvfp
 824              	MX_TIM16_Init:
 825              	.LFB43:
 467:Src/main.c    **** 
 826              		.loc 1 467 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 56
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830 0000 00B5     		push	{lr}
 831              	.LCFI12:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 14, -4
 834 0002 8FB0     		sub	sp, sp, #60
 835              	.LCFI13:
 836              		.cfi_def_cfa_offset 64
 472:Src/main.c    ****   htim16.Init.Prescaler = 0;
 837              		.loc 1 472 0
 838 0004 2548     		ldr	r0, .L73
 839 0006 264B     		ldr	r3, .L73+4
 840 0008 0360     		str	r3, [r0]
 473:Src/main.c    ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 841              		.loc 1 473 0
 842 000a 0023     		movs	r3, #0
 843 000c 4360     		str	r3, [r0, #4]
 474:Src/main.c    ****   htim16.Init.Period = 0;
 844              		.loc 1 474 0
 845 000e 8360     		str	r3, [r0, #8]
 475:Src/main.c    ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 846              		.loc 1 475 0
 847 0010 C360     		str	r3, [r0, #12]
 476:Src/main.c    ****   htim16.Init.RepetitionCounter = 0;
 848              		.loc 1 476 0
 849 0012 0361     		str	r3, [r0, #16]
 477:Src/main.c    ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 850              		.loc 1 477 0
 851 0014 4361     		str	r3, [r0, #20]
 478:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 852              		.loc 1 478 0
 853 0016 8361     		str	r3, [r0, #24]
 479:Src/main.c    ****   {
 854              		.loc 1 479 0
 855 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 856              	.LVL50:
 857 001c 0028     		cmp	r0, #0
 858 001e 29D1     		bne	.L69
 484:Src/main.c    ****   {
 859              		.loc 1 484 0
 860 0020 1E48     		ldr	r0, .L73
 861 0022 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 862              	.LVL51:
 863 0026 0028     		cmp	r0, #0
 864 0028 29D1     		bne	.L70
 489:Src/main.c    ****   sConfigOC.Pulse = 0;
 865              		.loc 1 489 0
 866 002a 6023     		movs	r3, #96
 867 002c 0793     		str	r3, [sp, #28]
 490:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  /tmp/ccpxeAZZ.s 			page 29


 868              		.loc 1 490 0
 869 002e 0023     		movs	r3, #0
 870 0030 0893     		str	r3, [sp, #32]
 491:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 871              		.loc 1 491 0
 872 0032 0993     		str	r3, [sp, #36]
 492:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 873              		.loc 1 492 0
 874 0034 0A93     		str	r3, [sp, #40]
 493:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 875              		.loc 1 493 0
 876 0036 0B93     		str	r3, [sp, #44]
 494:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 877              		.loc 1 494 0
 878 0038 0C93     		str	r3, [sp, #48]
 495:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 879              		.loc 1 495 0
 880 003a 0D93     		str	r3, [sp, #52]
 496:Src/main.c    ****   {
 881              		.loc 1 496 0
 882 003c 0022     		movs	r2, #0
 883 003e 07A9     		add	r1, sp, #28
 884 0040 1648     		ldr	r0, .L73
 885 0042 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 886              	.LVL52:
 887 0046 0028     		cmp	r0, #0
 888 0048 1ED1     		bne	.L71
 501:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 889              		.loc 1 501 0
 890 004a 0023     		movs	r3, #0
 891 004c 0093     		str	r3, [sp]
 502:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 892              		.loc 1 502 0
 893 004e 0193     		str	r3, [sp, #4]
 503:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 894              		.loc 1 503 0
 895 0050 0293     		str	r3, [sp, #8]
 504:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 896              		.loc 1 504 0
 897 0052 0393     		str	r3, [sp, #12]
 505:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 898              		.loc 1 505 0
 899 0054 0493     		str	r3, [sp, #16]
 506:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 900              		.loc 1 506 0
 901 0056 8022     		movs	r2, #128
 902 0058 9201     		lsls	r2, r2, #6
 903 005a 0592     		str	r2, [sp, #20]
 507:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 904              		.loc 1 507 0
 905 005c 0693     		str	r3, [sp, #24]
 508:Src/main.c    ****   {
 906              		.loc 1 508 0
 907 005e 6946     		mov	r1, sp
 908 0060 0E48     		ldr	r0, .L73
 909 0062 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 910              	.LVL53:
ARM GAS  /tmp/ccpxeAZZ.s 			page 30


 911 0066 0028     		cmp	r0, #0
 912 0068 13D1     		bne	.L72
 513:Src/main.c    **** 
 913              		.loc 1 513 0
 914 006a 0C48     		ldr	r0, .L73
 915 006c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 916              	.LVL54:
 515:Src/main.c    **** 
 917              		.loc 1 515 0
 918 0070 0FB0     		add	sp, sp, #60
 919              		@ sp needed
 920 0072 00BD     		pop	{pc}
 921              	.L69:
 481:Src/main.c    ****   }
 922              		.loc 1 481 0
 923 0074 E221     		movs	r1, #226
 924 0076 FF31     		adds	r1, r1, #255
 925 0078 0A48     		ldr	r0, .L73+8
 926 007a FFF7FEFF 		bl	_Error_Handler
 927              	.LVL55:
 928              	.L70:
 486:Src/main.c    ****   }
 929              		.loc 1 486 0
 930 007e F321     		movs	r1, #243
 931 0080 4900     		lsls	r1, r1, #1
 932 0082 0848     		ldr	r0, .L73+8
 933 0084 FFF7FEFF 		bl	_Error_Handler
 934              	.LVL56:
 935              	.L71:
 498:Src/main.c    ****   }
 936              		.loc 1 498 0
 937 0088 F921     		movs	r1, #249
 938 008a 4900     		lsls	r1, r1, #1
 939 008c 0548     		ldr	r0, .L73+8
 940 008e FFF7FEFF 		bl	_Error_Handler
 941              	.LVL57:
 942              	.L72:
 510:Src/main.c    ****   }
 943              		.loc 1 510 0
 944 0092 FF21     		movs	r1, #255
 945 0094 4900     		lsls	r1, r1, #1
 946 0096 0348     		ldr	r0, .L73+8
 947 0098 FFF7FEFF 		bl	_Error_Handler
 948              	.LVL58:
 949              	.L74:
 950              		.align	2
 951              	.L73:
 952 009c 00000000 		.word	htim16
 953 00a0 00440140 		.word	1073824768
 954 00a4 00000000 		.word	.LC2
 955              		.cfi_endproc
 956              	.LFE43:
 958              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 959              		.align	1
 960              		.syntax unified
 961              		.code	16
 962              		.thumb_func
ARM GAS  /tmp/ccpxeAZZ.s 			page 31


 963              		.fpu softvfp
 965              	MX_USART1_UART_Init:
 966              	.LFB44:
 519:Src/main.c    **** 
 967              		.loc 1 519 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971 0000 10B5     		push	{r4, lr}
 972              	.LCFI14:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 4, -8
 975              		.cfi_offset 14, -4
 521:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 976              		.loc 1 521 0
 977 0002 0C48     		ldr	r0, .L78
 978 0004 0C4B     		ldr	r3, .L78+4
 979 0006 0360     		str	r3, [r0]
 522:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 980              		.loc 1 522 0
 981 0008 E123     		movs	r3, #225
 982 000a 5B02     		lsls	r3, r3, #9
 983 000c 4360     		str	r3, [r0, #4]
 523:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 984              		.loc 1 523 0
 985 000e 0023     		movs	r3, #0
 986 0010 8360     		str	r3, [r0, #8]
 524:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 987              		.loc 1 524 0
 988 0012 C360     		str	r3, [r0, #12]
 525:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 989              		.loc 1 525 0
 990 0014 0361     		str	r3, [r0, #16]
 526:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 991              		.loc 1 526 0
 992 0016 0C22     		movs	r2, #12
 993 0018 4261     		str	r2, [r0, #20]
 527:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 994              		.loc 1 527 0
 995 001a 8361     		str	r3, [r0, #24]
 528:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 996              		.loc 1 528 0
 997 001c C361     		str	r3, [r0, #28]
 529:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 998              		.loc 1 529 0
 999 001e 0362     		str	r3, [r0, #32]
 530:Src/main.c    ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 1000              		.loc 1 530 0
 1001 0020 4362     		str	r3, [r0, #36]
 531:Src/main.c    ****   {
 1002              		.loc 1 531 0
 1003 0022 FFF7FEFF 		bl	HAL_HalfDuplex_Init
 1004              	.LVL59:
 1005 0026 0028     		cmp	r0, #0
 1006 0028 00D1     		bne	.L77
 536:Src/main.c    **** 
 1007              		.loc 1 536 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 32


 1008              		@ sp needed
 1009 002a 10BD     		pop	{r4, pc}
 1010              	.L77:
 533:Src/main.c    ****   }
 1011              		.loc 1 533 0
 1012 002c 0349     		ldr	r1, .L78+8
 1013 002e 0448     		ldr	r0, .L78+12
 1014 0030 FFF7FEFF 		bl	_Error_Handler
 1015              	.LVL60:
 1016              	.L79:
 1017              		.align	2
 1018              	.L78:
 1019 0034 00000000 		.word	huart1
 1020 0038 00380140 		.word	1073821696
 1021 003c 15020000 		.word	533
 1022 0040 00000000 		.word	.LC2
 1023              		.cfi_endproc
 1024              	.LFE44:
 1026              		.section	.text.MX_WWDG_Init,"ax",%progbits
 1027              		.align	1
 1028              		.syntax unified
 1029              		.code	16
 1030              		.thumb_func
 1031              		.fpu softvfp
 1033              	MX_WWDG_Init:
 1034              	.LFB45:
 540:Src/main.c    **** 
 1035              		.loc 1 540 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039 0000 10B5     		push	{r4, lr}
 1040              	.LCFI15:
 1041              		.cfi_def_cfa_offset 8
 1042              		.cfi_offset 4, -8
 1043              		.cfi_offset 14, -4
 542:Src/main.c    ****   hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 1044              		.loc 1 542 0
 1045 0002 0B48     		ldr	r0, .L83
 1046 0004 0B4B     		ldr	r3, .L83+4
 1047 0006 0360     		str	r3, [r0]
 543:Src/main.c    ****   hwwdg.Init.Window = 64;
 1048              		.loc 1 543 0
 1049 0008 C023     		movs	r3, #192
 1050 000a 5B00     		lsls	r3, r3, #1
 1051 000c 4360     		str	r3, [r0, #4]
 544:Src/main.c    ****   hwwdg.Init.Counter = 127;
 1052              		.loc 1 544 0
 1053 000e 413B     		subs	r3, r3, #65
 1054 0010 FF3B     		subs	r3, r3, #255
 1055 0012 8360     		str	r3, [r0, #8]
 545:Src/main.c    ****   hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 1056              		.loc 1 545 0
 1057 0014 3F33     		adds	r3, r3, #63
 1058 0016 C360     		str	r3, [r0, #12]
 546:Src/main.c    ****   if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 1059              		.loc 1 546 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 33


 1060 0018 0023     		movs	r3, #0
 1061 001a 0361     		str	r3, [r0, #16]
 547:Src/main.c    ****   {
 1062              		.loc 1 547 0
 1063 001c FFF7FEFF 		bl	HAL_WWDG_Init
 1064              	.LVL61:
 1065 0020 0028     		cmp	r0, #0
 1066 0022 00D1     		bne	.L82
 552:Src/main.c    **** 
 1067              		.loc 1 552 0
 1068              		@ sp needed
 1069 0024 10BD     		pop	{r4, pc}
 1070              	.L82:
 549:Src/main.c    ****   }
 1071              		.loc 1 549 0
 1072 0026 0449     		ldr	r1, .L83+8
 1073 0028 0448     		ldr	r0, .L83+12
 1074 002a FFF7FEFF 		bl	_Error_Handler
 1075              	.LVL62:
 1076              	.L84:
 1077 002e C046     		.align	2
 1078              	.L83:
 1079 0030 00000000 		.word	hwwdg
 1080 0034 002C0040 		.word	1073753088
 1081 0038 25020000 		.word	549
 1082 003c 00000000 		.word	.LC2
 1083              		.cfi_endproc
 1084              	.LFE45:
 1086              		.global	__aeabi_uidiv
 1087              		.section	.text.SystemClock_Config,"ax",%progbits
 1088              		.align	1
 1089              		.global	SystemClock_Config
 1090              		.syntax unified
 1091              		.code	16
 1092              		.thumb_func
 1093              		.fpu softvfp
 1095              	SystemClock_Config:
 1096              	.LFB37:
 168:Src/main.c    **** 
 1097              		.loc 1 168 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 80
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101 0000 00B5     		push	{lr}
 1102              	.LCFI16:
 1103              		.cfi_def_cfa_offset 4
 1104              		.cfi_offset 14, -4
 1105 0002 95B0     		sub	sp, sp, #84
 1106              	.LCFI17:
 1107              		.cfi_def_cfa_offset 88
 176:Src/main.c    ****                               |RCC_OSCILLATORTYPE_LSI;
 1108              		.loc 1 176 0
 1109 0004 1A23     		movs	r3, #26
 1110 0006 0893     		str	r3, [sp, #32]
 178:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1111              		.loc 1 178 0
 1112 0008 193B     		subs	r3, r3, #25
ARM GAS  /tmp/ccpxeAZZ.s 			page 34


 1113 000a 0B93     		str	r3, [sp, #44]
 179:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 1114              		.loc 1 179 0
 1115 000c 0D93     		str	r3, [sp, #52]
 180:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1116              		.loc 1 180 0
 1117 000e 1022     		movs	r2, #16
 1118 0010 0C92     		str	r2, [sp, #48]
 181:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1119              		.loc 1 181 0
 1120 0012 0E92     		str	r2, [sp, #56]
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1121              		.loc 1 182 0
 1122 0014 0F93     		str	r3, [sp, #60]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1123              		.loc 1 183 0
 1124 0016 0133     		adds	r3, r3, #1
 1125 0018 1093     		str	r3, [sp, #64]
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 1126              		.loc 1 184 0
 1127 001a 0023     		movs	r3, #0
 1128 001c 1193     		str	r3, [sp, #68]
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1129              		.loc 1 185 0
 1130 001e A022     		movs	r2, #160
 1131 0020 9203     		lsls	r2, r2, #14
 1132 0022 1292     		str	r2, [sp, #72]
 186:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1133              		.loc 1 186 0
 1134 0024 1393     		str	r3, [sp, #76]
 187:Src/main.c    ****   {
 1135              		.loc 1 187 0
 1136 0026 08A8     		add	r0, sp, #32
 1137 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1138              	.LVL63:
 1139 002c 0028     		cmp	r0, #0
 1140 002e 2CD1     		bne	.L89
 194:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1141              		.loc 1 194 0
 1142 0030 0723     		movs	r3, #7
 1143 0032 0493     		str	r3, [sp, #16]
 196:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1144              		.loc 1 196 0
 1145 0034 053B     		subs	r3, r3, #5
 1146 0036 0593     		str	r3, [sp, #20]
 197:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1147              		.loc 1 197 0
 1148 0038 0023     		movs	r3, #0
 1149 003a 0693     		str	r3, [sp, #24]
 198:Src/main.c    **** 
 1150              		.loc 1 198 0
 1151 003c 0793     		str	r3, [sp, #28]
 200:Src/main.c    ****   {
 1152              		.loc 1 200 0
 1153 003e 0121     		movs	r1, #1
 1154 0040 04A8     		add	r0, sp, #16
 1155 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  /tmp/ccpxeAZZ.s 			page 35


 1156              	.LVL64:
 1157 0046 0028     		cmp	r0, #0
 1158 0048 23D1     		bne	.L90
 205:Src/main.c    ****                               |RCC_PERIPHCLK_RTC;
 1159              		.loc 1 205 0
 1160 004a 164B     		ldr	r3, .L92
 1161 004c 0093     		str	r3, [sp]
 207:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1162              		.loc 1 207 0
 1163 004e 0023     		movs	r3, #0
 1164 0050 0293     		str	r3, [sp, #8]
 208:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 1165              		.loc 1 208 0
 1166 0052 0393     		str	r3, [sp, #12]
 209:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1167              		.loc 1 209 0
 1168 0054 8023     		movs	r3, #128
 1169 0056 9B00     		lsls	r3, r3, #2
 1170 0058 0193     		str	r3, [sp, #4]
 210:Src/main.c    ****   {
 1171              		.loc 1 210 0
 1172 005a 6846     		mov	r0, sp
 1173 005c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1174              	.LVL65:
 1175 0060 0028     		cmp	r0, #0
 1176 0062 1AD1     		bne	.L91
 217:Src/main.c    **** 
 1177              		.loc 1 217 0
 1178 0064 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1179              	.LVL66:
 1180 0068 FA21     		movs	r1, #250
 1181 006a 8900     		lsls	r1, r1, #2
 1182 006c FFF7FEFF 		bl	__aeabi_uidiv
 1183              	.LVL67:
 1184 0070 FFF7FEFF 		bl	HAL_SYSTICK_Config
 1185              	.LVL68:
 221:Src/main.c    **** 
 1186              		.loc 1 221 0
 1187 0074 0420     		movs	r0, #4
 1188 0076 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 1189              	.LVL69:
 224:Src/main.c    **** }
 1190              		.loc 1 224 0
 1191 007a 0022     		movs	r2, #0
 1192 007c 0021     		movs	r1, #0
 1193 007e 0120     		movs	r0, #1
 1194 0080 4042     		rsbs	r0, r0, #0
 1195 0082 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1196              	.LVL70:
 225:Src/main.c    **** 
 1197              		.loc 1 225 0
 1198 0086 15B0     		add	sp, sp, #84
 1199              		@ sp needed
 1200 0088 00BD     		pop	{pc}
 1201              	.L89:
 189:Src/main.c    ****   }
 1202              		.loc 1 189 0
ARM GAS  /tmp/ccpxeAZZ.s 			page 36


 1203 008a BD21     		movs	r1, #189
 1204 008c 0648     		ldr	r0, .L92+4
 1205 008e FFF7FEFF 		bl	_Error_Handler
 1206              	.LVL71:
 1207              	.L90:
 202:Src/main.c    ****   }
 1208              		.loc 1 202 0
 1209 0092 CA21     		movs	r1, #202
 1210 0094 0448     		ldr	r0, .L92+4
 1211 0096 FFF7FEFF 		bl	_Error_Handler
 1212              	.LVL72:
 1213              	.L91:
 212:Src/main.c    ****   }
 1214              		.loc 1 212 0
 1215 009a D421     		movs	r1, #212
 1216 009c 0248     		ldr	r0, .L92+4
 1217 009e FFF7FEFF 		bl	_Error_Handler
 1218              	.LVL73:
 1219              	.L93:
 1220 00a2 C046     		.align	2
 1221              	.L92:
 1222 00a4 21000100 		.word	65569
 1223 00a8 00000000 		.word	.LC2
 1224              		.cfi_endproc
 1225              	.LFE37:
 1227              		.section	.text.main,"ax",%progbits
 1228              		.align	1
 1229              		.global	main
 1230              		.syntax unified
 1231              		.code	16
 1232              		.thumb_func
 1233              		.fpu softvfp
 1235              	main:
 1236              	.LFB36:
 114:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1237              		.loc 1 114 0
 1238              		.cfi_startproc
 1239              		@ Volatile: function does not return.
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242 0000 10B5     		push	{r4, lr}
 1243              	.LCFI18:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 4, -8
 1246              		.cfi_offset 14, -4
 122:Src/main.c    **** 
 1247              		.loc 1 122 0
 1248 0002 FFF7FEFF 		bl	HAL_Init
 1249              	.LVL74:
 129:Src/main.c    **** 
 1250              		.loc 1 129 0
 1251 0006 FFF7FEFF 		bl	SystemClock_Config
 1252              	.LVL75:
 136:Src/main.c    ****   MX_ADC_Init();
 1253              		.loc 1 136 0
 1254 000a FFF7FEFF 		bl	MX_GPIO_Init
 1255              	.LVL76:
ARM GAS  /tmp/ccpxeAZZ.s 			page 37


 137:Src/main.c    ****   MX_I2C1_Init();
 1256              		.loc 1 137 0
 1257 000e FFF7FEFF 		bl	MX_ADC_Init
 1258              	.LVL77:
 138:Src/main.c    ****   MX_RTC_Init();
 1259              		.loc 1 138 0
 1260 0012 FFF7FEFF 		bl	MX_I2C1_Init
 1261              	.LVL78:
 139:Src/main.c    ****   MX_TIM1_Init();
 1262              		.loc 1 139 0
 1263 0016 FFF7FEFF 		bl	MX_RTC_Init
 1264              	.LVL79:
 140:Src/main.c    ****   MX_TIM14_Init();
 1265              		.loc 1 140 0
 1266 001a FFF7FEFF 		bl	MX_TIM1_Init
 1267              	.LVL80:
 141:Src/main.c    ****   MX_TIM16_Init();
 1268              		.loc 1 141 0
 1269 001e FFF7FEFF 		bl	MX_TIM14_Init
 1270              	.LVL81:
 142:Src/main.c    ****   MX_USART1_UART_Init();
 1271              		.loc 1 142 0
 1272 0022 FFF7FEFF 		bl	MX_TIM16_Init
 1273              	.LVL82:
 143:Src/main.c    ****   MX_WWDG_Init();
 1274              		.loc 1 143 0
 1275 0026 FFF7FEFF 		bl	MX_USART1_UART_Init
 1276              	.LVL83:
 144:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1277              		.loc 1 144 0
 1278 002a FFF7FEFF 		bl	MX_WWDG_Init
 1279              	.LVL84:
 1280              	.L95:
 1281 002e FEE7     		b	.L95
 1282              		.cfi_endproc
 1283              	.LFE36:
 1285              		.comm	hwwdg,20,4
 1286              		.comm	huart1,112,4
 1287              		.comm	htim16,64,4
 1288              		.comm	htim14,64,4
 1289              		.comm	htim1,64,4
 1290              		.comm	hrtc,32,4
 1291              		.comm	hi2c1,76,4
 1292              		.comm	hadc,76,4
 1293              		.section	.rodata.MX_ADC_Init.str1.4,"aMS",%progbits,1
 1294              		.align	2
 1295              	.LC2:
 1296 0000 5372632F 		.ascii	"Src/main.c\000"
 1296      6D61696E 
 1296      2E6300
 1297              		.text
 1298              	.Letext0:
 1299              		.file 2 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machin
 1300              		.file 3 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_s
 1301              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1302              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 1303              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
ARM GAS  /tmp/ccpxeAZZ.s 			page 38


 1304              		.file 7 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lo
 1305              		.file 8 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_t
 1306              		.file 9 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/
 1307              		.file 10 "/home/arthurdent/Programs/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/r
 1308              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1309              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1310              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1311              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1312              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1313              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 1314              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 1315              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rtc.h"
 1316              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1317              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1318              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 1319              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_wwdg.h"
 1320              		.file 23 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 1321              		.file 24 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1322              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccpxeAZZ.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpxeAZZ.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccpxeAZZ.s:118    .text.MX_GPIO_Init:0000000000000074 $d
     /tmp/ccpxeAZZ.s:124    .text.__io_putchar:0000000000000000 $t
     /tmp/ccpxeAZZ.s:131    .text.__io_putchar:0000000000000000 __io_putchar
     /tmp/ccpxeAZZ.s:162    .text.__io_putchar:0000000000000018 $d
                            *COM*:0000000000000070 huart1
     /tmp/ccpxeAZZ.s:168    .text._Error_Handler:0000000000000000 $t
     /tmp/ccpxeAZZ.s:175    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccpxeAZZ.s:190    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:196    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccpxeAZZ.s:407    .text.MX_ADC_Init:0000000000000120 $d
                            *COM*:000000000000004c hadc
     /tmp/ccpxeAZZ.s:414    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:420    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccpxeAZZ.s:500    .text.MX_I2C1_Init:0000000000000060 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccpxeAZZ.s:508    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:514    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/ccpxeAZZ.s:562    .text.MX_RTC_Init:0000000000000030 $d
                            *COM*:0000000000000020 hrtc
     /tmp/ccpxeAZZ.s:569    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:575    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccpxeAZZ.s:709    .text.MX_TIM1_Init:00000000000000a8 $d
                            *COM*:0000000000000040 htim1
     /tmp/ccpxeAZZ.s:716    .text.MX_TIM14_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:722    .text.MX_TIM14_Init:0000000000000000 MX_TIM14_Init
     /tmp/ccpxeAZZ.s:811    .text.MX_TIM14_Init:000000000000006c $d
                            *COM*:0000000000000040 htim14
     /tmp/ccpxeAZZ.s:818    .text.MX_TIM16_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:824    .text.MX_TIM16_Init:0000000000000000 MX_TIM16_Init
     /tmp/ccpxeAZZ.s:952    .text.MX_TIM16_Init:000000000000009c $d
                            *COM*:0000000000000040 htim16
     /tmp/ccpxeAZZ.s:959    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:965    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccpxeAZZ.s:1019   .text.MX_USART1_UART_Init:0000000000000034 $d
     /tmp/ccpxeAZZ.s:1027   .text.MX_WWDG_Init:0000000000000000 $t
     /tmp/ccpxeAZZ.s:1033   .text.MX_WWDG_Init:0000000000000000 MX_WWDG_Init
     /tmp/ccpxeAZZ.s:1079   .text.MX_WWDG_Init:0000000000000030 $d
                            *COM*:0000000000000014 hwwdg
     /tmp/ccpxeAZZ.s:1088   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccpxeAZZ.s:1095   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccpxeAZZ.s:1222   .text.SystemClock_Config:00000000000000a4 $d
     /tmp/ccpxeAZZ.s:1228   .text.main:0000000000000000 $t
     /tmp/ccpxeAZZ.s:1235   .text.main:0000000000000000 main
     /tmp/ccpxeAZZ.s:1294   .rodata.MX_ADC_Init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
ARM GAS  /tmp/ccpxeAZZ.s 			page 40


HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_RTC_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_TIM_Base_Init
HAL_HalfDuplex_Init
HAL_WWDG_Init
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
